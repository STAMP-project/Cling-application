import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        java.lang.Class<?> wildcardClass3 = mutableInterval2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEndMillis((long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 'a', (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval5.setEndMillis(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readableInstant72, readablePeriod73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        mutableInterval74.setInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        long long90 = mutableInterval89.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    @Ignore
  public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        boolean boolean13 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Class<?> wildcardClass14 = interval6.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        boolean boolean6 = mutableInterval3.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableInstant7, readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval13.getStart();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        mutableInterval9.setInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime21);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    @Ignore
  public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        boolean boolean5 = mutableInterval2.isAfterNow();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodBeforeEnd(readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        long long28 = interval27.getEndMillis();
        boolean boolean30 = interval27.isAfter((long) (byte) 100);
        boolean boolean31 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = mutableInterval19.toDuration();
        boolean boolean33 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval19.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        mutableInterval19.setEnd((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean54 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval19);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEndMillis((long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    @Ignore
  public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval51.setStartMillis((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    @Ignore
  public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean49 = mutableInterval13.isBefore((long) (short) 10);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        java.lang.Class<?> wildcardClass41 = dateTime37.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267296955L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        java.lang.Object obj80 = mutableInterval78.clone();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(obj80, chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        mutableInterval82.setPeriodAfterStart(readablePeriod83);
        org.joda.time.Period period85 = mutableInterval82.toPeriod();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(0L, 1L, chronology88);
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        java.lang.Object obj91 = mutableInterval89.clone();
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval(obj91, chronology92);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        mutableInterval93.setPeriodAfterStart(readablePeriod94);
        org.joda.time.Period period96 = mutableInterval93.toPeriod();
        mutableInterval82.setPeriodAfterStart((org.joda.time.ReadablePeriod) period96);
        mutableInterval74.setPeriodAfterStart((org.joda.time.ReadablePeriod) period96);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(100L, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        mutableInterval75.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology80 = mutableInterval75.getChronology();
        mutableInterval13.setChronology(chronology80);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval13.setStartMillis(1606267296955L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology80);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        boolean boolean5 = mutableInterval2.isAfterNow();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodBeforeEnd(readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        long long28 = interval27.getEndMillis();
        boolean boolean30 = interval27.isAfter((long) (byte) 100);
        boolean boolean31 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = mutableInterval19.toDuration();
        boolean boolean33 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval19.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        mutableInterval19.setEnd((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean54 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Class<?> wildcardClass55 = mutableInterval19.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    @Ignore
  public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        java.lang.Object obj12 = mutableInterval9.clone();
        boolean boolean13 = mutableInterval3.equals((java.lang.Object) mutableInterval9);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setDurationBeforeEnd((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    @Ignore
  public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        boolean boolean34 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        mutableInterval37.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        mutableInterval43.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology48 = mutableInterval43.getChronology();
        mutableInterval37.setChronology(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((java.lang.Object) boolean34, chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    @Ignore
  public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setDurationAfterStart((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    @Ignore
  public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Interval interval20 = mutableInterval17.toInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = mutableInterval17.isBefore(readableInterval21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology25);
        boolean boolean27 = mutableInterval17.isAfter((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        boolean boolean34 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean35 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(obj41, chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableInterval43.setPeriodAfterStart(readablePeriod44);
        org.joda.time.Period period46 = mutableInterval43.toPeriod();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(obj52, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod55);
        org.joda.time.Period period57 = mutableInterval54.toPeriod();
        mutableInterval43.setPeriodAfterStart((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadablePeriod) period57);
        boolean boolean60 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime33);
        mutableInterval2.setDurationAfterStart((long) 'a');
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    @Ignore
  public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        boolean boolean5 = mutableInterval2.isAfterNow();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodBeforeEnd(readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        long long28 = interval27.getEndMillis();
        boolean boolean30 = interval27.isAfter((long) (byte) 100);
        boolean boolean31 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = mutableInterval19.toDuration();
        boolean boolean33 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval19.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        mutableInterval19.setEnd((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean54 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval19);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval19.setInterval((long) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    @Ignore
  public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        mutableInterval75.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology80 = mutableInterval75.getChronology();
        mutableInterval13.setChronology(chronology80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableInterval85.setDurationAfterStart(readableDuration88);
        boolean boolean90 = mutableInterval85.isAfterNow();
        boolean boolean91 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Interval interval92 = mutableInterval85.toInterval();
        org.joda.time.Interval interval93 = mutableInterval85.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
    }

    @Test
    @Ignore
  public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        java.lang.Class<?> wildcardClass30 = mutableInterval28.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableInterval2.isAfter(readableInstant12);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267320326L + "'", long3 == 1606267320326L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEndMillis((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEndMillis((long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267321240L + "'", long3 == 1606267321240L);
        org.junit.Assert.assertNotNull(mutableInterval4);
    }

    @Test
    @Ignore
  public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        long long9 = mutableInterval3.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        mutableInterval12.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval12.toMutableInterval();
        org.joda.time.Period period16 = mutableInterval12.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        mutableInterval21.setInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod18, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean54 = mutableInterval12.isAfter((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean55 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime45);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        long long7 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    @Ignore
  public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean21 = mutableInterval3.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    @Ignore
  public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        mutableInterval12.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime45);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setInterval(1606267295546L, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readablePeriod12, (org.joda.time.ReadableInstant) dateTime21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267325818L + "'", long3 == 1606267325818L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        boolean boolean9 = mutableInterval2.isAfterNow();
        boolean boolean11 = mutableInterval2.isBefore(1606267307365L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEndMillis((long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    @Ignore
  public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        mutableInterval7.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        mutableInterval7.setChronology(chronology20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology20);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(obj29, chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableInterval31.setPeriodAfterStart(readablePeriod32);
        org.joda.time.Period period34 = mutableInterval31.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod36, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        mutableInterval57.setInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean73 = mutableInterval23.isBefore((org.joda.time.ReadableInstant) dateTime63);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval23.setEndMillis(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    @Ignore
  public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(obj13, chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableInterval15.setPeriodBeforeEnd(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        boolean boolean47 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        boolean boolean54 = mutableInterval37.isBefore((org.joda.time.ReadableInstant) dateTime53);
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(readableInstant80, readablePeriod81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval(0L, 1L, chronology91);
        org.joda.time.Interval interval93 = mutableInterval92.toInterval();
        org.joda.time.DateTime dateTime94 = mutableInterval92.getStart();
        mutableInterval82.setInterval((org.joda.time.ReadableInstant) dateTime88, (org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.DateTime dateTime97 = mutableInterval96.getStart();
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    @Ignore
  public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval3.toMutableInterval();
        java.lang.Class<?> wildcardClass12 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval57.isBefore((long) (byte) 1);
        mutableInterval57.setInterval((long) (short) 0, (long) 100);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart(1606267296955L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    @Ignore
  public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = mutableInterval3.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(100L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(0L, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval9.getStart();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableInstant12, readablePeriod13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        mutableInterval14.setInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime26);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval5.setEnd((org.joda.time.ReadableInstant) dateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval8.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mutableInterval13);
    }

    @Test
    @Ignore
  public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodAfterStart(readablePeriod19);
        org.joda.time.Period period21 = mutableInterval18.toPeriod();
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Interval interval35 = mutableInterval32.toInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = mutableInterval32.isBefore(readableInterval36);
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval32.copy();
        boolean boolean39 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval32.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology43 = mutableInterval32.getChronology();
        boolean boolean44 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Class<?> wildcardClass45 = mutableInterval7.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267329251L, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval3.copy();
        java.lang.String str42 = mutableInterval3.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(1606267312293L, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str42, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval20.setInterval((long) ' ', (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    @Ignore
  public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1606267318729L, (long) (byte) 10, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    @Ignore
  public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) duration12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) ' ', 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        long long22 = mutableInterval9.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
    }

    @Test
    @Ignore
  public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        boolean boolean24 = mutableInterval19.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        mutableInterval12.setChronology(chronology25);
        mutableInterval3.setChronology(chronology25);
        long long28 = mutableInterval3.getEndMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) long28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 10, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(35L, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = mutableInterval33.toDuration();
        boolean boolean47 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval33.toMutableInterval();
        java.lang.String str49 = mutableInterval48.toString();
        java.lang.String str50 = mutableInterval48.toString();
        boolean boolean51 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        java.lang.Object obj57 = mutableInterval55.clone();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        java.lang.Object obj64 = mutableInterval61.clone();
        boolean boolean65 = mutableInterval55.equals((java.lang.Object) mutableInterval61);
        boolean boolean66 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        boolean boolean68 = mutableInterval55.isAfter(1606267322702L);
        org.joda.time.Chronology chronology69 = mutableInterval55.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    @Ignore
  public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        boolean boolean23 = mutableInterval3.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    @Ignore
  public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = mutableInterval34.getStartMillis();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    }

    @Test
    @Ignore
  public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        mutableInterval51.setEndMillis(0L);
        long long67 = mutableInterval51.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    @Ignore
  public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval34);
        java.lang.Class<?> wildcardClass36 = mutableInterval34.getClass();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) ' ', (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(obj18, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableInterval20.setPeriodBeforeEnd(readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        long long35 = interval34.getEndMillis();
        boolean boolean37 = interval34.isAfter((long) (byte) 100);
        boolean boolean38 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration39 = mutableInterval26.toDuration();
        boolean boolean40 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval26.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readablePeriod42, (org.joda.time.ReadableInstant) dateTime51);
        mutableInterval26.setEnd((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        mutableInterval64.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        long long73 = interval72.getEndMillis();
        boolean boolean75 = interval72.isAfter((long) (byte) 100);
        boolean boolean76 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) interval72);
        boolean boolean77 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(obj83, chronology84);
        org.joda.time.Duration duration86 = mutableInterval85.toDuration();
        mutableInterval26.setDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration86);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableInstant89, readablePeriod90);
        mutableInterval91.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval94 = mutableInterval91.toMutableInterval();
        org.joda.time.DateTime dateTime95 = mutableInterval94.getEnd();
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration86, (org.joda.time.ReadableInstant) dateTime95);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    @Ignore
  public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = mutableInterval33.toDuration();
        boolean boolean47 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval33.toMutableInterval();
        java.lang.String str49 = mutableInterval48.toString();
        java.lang.String str50 = mutableInterval48.toString();
        boolean boolean51 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        boolean boolean52 = mutableInterval3.isAfterNow();
        boolean boolean54 = mutableInterval3.isBefore((long) (byte) 10);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean22 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime20);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval((long) (byte) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    @Ignore
  public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        boolean boolean5 = mutableInterval2.isAfterNow();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodBeforeEnd(readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        long long28 = interval27.getEndMillis();
        boolean boolean30 = interval27.isAfter((long) (byte) 100);
        boolean boolean31 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = mutableInterval19.toDuration();
        boolean boolean33 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval19.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        mutableInterval19.setEnd((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean54 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval19);
        long long55 = mutableInterval19.toDurationMillis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    @Ignore
  public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setInterval(1606267333067L, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
    }

    @Test
    @Ignore
  public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        mutableInterval75.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology80 = mutableInterval75.getChronology();
        mutableInterval13.setChronology(chronology80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableInterval85.setDurationAfterStart(readableDuration88);
        boolean boolean90 = mutableInterval85.isAfterNow();
        boolean boolean91 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Interval interval92 = mutableInterval85.toInterval();
        boolean boolean94 = mutableInterval85.isBefore(1606267296955L);
        org.joda.time.DateTime dateTime95 = mutableInterval85.getStart();
        java.lang.Class<?> wildcardClass96 = dateTime95.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    @Ignore
  public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval22.setStartMillis(1606267336460L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
    }

    @Test
    @Ignore
  public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        long long50 = mutableInterval47.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod52, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean88 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval89.toMutableInterval();
        java.lang.String str91 = mutableInterval89.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str91, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration64 = mutableInterval51.toDuration();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval91 = mutableInterval12.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval91);
    }

    @Test
    @Ignore
  public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        boolean boolean10 = mutableInterval7.contains(1606267341034L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    @Ignore
  public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(1606267320326L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        long long6 = mutableInterval2.toDurationMillis();
        boolean boolean8 = mutableInterval2.contains((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEndMillis(1606267341941L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        org.joda.time.DateTime dateTime4 = mutableInterval3.getStart();
        java.lang.Class<?> wildcardClass5 = dateTime4.getClass();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    @Ignore
  public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        boolean boolean28 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval25);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        mutableInterval32.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval32.toMutableInterval();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        long long40 = mutableInterval39.toDurationMillis();
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Duration duration42 = mutableInterval39.toDuration();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval46.setPeriodAfterStart(readablePeriod50);
        mutableInterval46.setEndMillis((long) 100);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Interval interval67 = mutableInterval64.toInterval();
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = mutableInterval64.isBefore(readableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology72);
        boolean boolean74 = mutableInterval64.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        boolean boolean81 = mutableInterval64.isBefore((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = mutableInterval57.contains((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean83 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime80);
        mutableInterval29.setDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        boolean boolean86 = mutableInterval29.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    @Ignore
  public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        long long6 = mutableInterval3.getEndMillis();
        long long7 = mutableInterval3.getStartMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        long long14 = mutableInterval11.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readablePeriod16, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readablePeriod15, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean52 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        mutableInterval56.setDurationAfterStart((long) (byte) 1);
        boolean boolean61 = mutableInterval56.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        mutableInterval65.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology70 = mutableInterval65.getChronology();
        mutableInterval56.setChronology(chronology70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval11, chronology70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((java.lang.Object) long7, chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    @Ignore
  public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        mutableInterval50.setInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = mutableInterval12.contains((org.joda.time.ReadableInterval) mutableInterval64);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean7 = mutableInterval3.isAfterNow();
        long long8 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100);
        mutableInterval2.setDurationAfterStart(1606267296955L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        boolean boolean20 = mutableInterval15.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        mutableInterval8.setChronology(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((java.lang.Object) 1606267296955L, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    @Ignore
  public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period72 = mutableInterval13.toPeriod();
        boolean boolean74 = mutableInterval13.isBefore(1606267337871L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    @Ignore
  public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(obj56, chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableInterval58.setPeriodAfterStart(readablePeriod59);
        org.joda.time.Period period61 = mutableInterval58.toPeriod();
        mutableInterval44.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        mutableInterval40.setPeriodAfterStart((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Interval interval64 = mutableInterval40.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval64);
    }

    @Test
    @Ignore
  public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        boolean boolean13 = mutableInterval8.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        mutableInterval17.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology22 = mutableInterval17.getChronology();
        mutableInterval8.setChronology(chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Interval interval30 = mutableInterval27.toInterval();
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = mutableInterval27.isBefore(readableInterval31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology35);
        boolean boolean37 = mutableInterval27.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Interval interval38 = mutableInterval27.toInterval();
        org.joda.time.Period period39 = mutableInterval27.toPeriod();
        mutableInterval8.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readablePeriod46, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(readablePeriod45, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        mutableInterval67.setInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime82 = mutableInterval81.getStart();
        mutableInterval81.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean86 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(0L, 1L, chronology90);
        org.joda.time.Interval interval92 = mutableInterval91.toInterval();
        org.joda.time.DateTime dateTime93 = mutableInterval91.getStart();
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval(readablePeriod87, (org.joda.time.ReadableInstant) dateTime93);
        mutableInterval81.setStart((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period39, (org.joda.time.ReadableInstant) dateTime93);
        boolean boolean97 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    @Ignore
  public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        boolean boolean5 = mutableInterval3.isBefore((long) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableInterval10.setPeriodBeforeEnd(readablePeriod11);
        mutableInterval10.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        long long18 = mutableInterval17.getEndMillis();
        boolean boolean19 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean20 = mutableInterval17.isAfterNow();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Interval interval33 = mutableInterval30.toInterval();
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = mutableInterval30.isBefore(readableInterval34);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval30.copy();
        boolean boolean37 = mutableInterval24.contains((org.joda.time.ReadableInterval) mutableInterval30);
        mutableInterval30.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology41 = mutableInterval30.getChronology();
        boolean boolean42 = mutableInterval30.isBeforeNow();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableInterval46.setPeriodBeforeEnd(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        mutableInterval51.setInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = mutableInterval46.isAfter((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean66 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime63);
        mutableInterval17.setStart((org.joda.time.ReadableInstant) dateTime63);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(readableInstant6, (org.joda.time.ReadableInstant) dateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267354274L + "'", long18 == 1606267354274L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    @Ignore
  public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval4.getStart();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval10.copy();
        boolean boolean17 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval10);
        mutableInterval10.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology21 = mutableInterval10.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(obj0, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodBeforeEnd(readablePeriod27);
        mutableInterval26.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        long long34 = mutableInterval33.getEndMillis();
        boolean boolean35 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean36 = mutableInterval33.isAfterNow();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval46.copy();
        boolean boolean53 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval46);
        mutableInterval46.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology57 = mutableInterval46.getChronology();
        boolean boolean58 = mutableInterval46.isBeforeNow();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodBeforeEnd(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        mutableInterval67.setInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = mutableInterval62.isAfter((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = mutableInterval46.isAfter((org.joda.time.ReadableInstant) dateTime79);
        mutableInterval33.setStart((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean84 = mutableInterval22.equals((java.lang.Object) dateTime79);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology21);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1606267356719L + "'", long34 == 1606267356719L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    @Ignore
  public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        mutableInterval75.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology80 = mutableInterval75.getChronology();
        mutableInterval13.setChronology(chronology80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableInterval85.setDurationAfterStart(readableDuration88);
        boolean boolean90 = mutableInterval85.isAfterNow();
        boolean boolean91 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval85);
        mutableInterval85.setEndMillis(1606267333067L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology18);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval20.setInterval(1606267337318L, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        boolean boolean73 = mutableInterval72.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) ' ', (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration64 = mutableInterval51.toDuration();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        long long91 = mutableInterval12.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    @Ignore
  public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = mutableInterval21.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        mutableInterval52.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        long long61 = interval60.getEndMillis();
        boolean boolean63 = interval60.isAfter((long) (byte) 100);
        boolean boolean64 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration65 = mutableInterval52.toDuration();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readableInstant72, readablePeriod73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        mutableInterval74.setInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateTime30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((java.lang.Object) dateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((-1L), 1606267322702L);
        boolean boolean4 = mutableInterval2.isAfter(1606267312293L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    @Ignore
  public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodAfterStart(readablePeriod17);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.copy();
        org.joda.time.Period period26 = mutableInterval23.toPeriod();
        mutableInterval16.setPeriodAfterStart((org.joda.time.ReadablePeriod) period26);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period26);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval28.setInterval(1606267341034L, 1606267307365L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    @Ignore
  public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval33.toMutableInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval36.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval25.setStart((org.joda.time.ReadableInstant) dateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    @Ignore
  public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.DateTime dateTime28 = mutableInterval27.getEnd();
        boolean boolean29 = mutableInterval12.contains((org.joda.time.ReadableInterval) mutableInterval27);
        long long30 = mutableInterval12.getStartMillis();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    @Ignore
  public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        mutableInterval3.setDurationBeforeEnd(1606267295546L);
        java.lang.String str9 = mutableInterval3.toString();
        mutableInterval3.setDurationBeforeEnd((long) (byte) 10);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1919-02-06T22:38:24.455Z/1970-01-01T00:00:00.001Z" + "'", str9, "1919-02-06T22:38:24.455Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period50);
        boolean boolean53 = mutableInterval52.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    @Ignore
  public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        org.joda.time.Interval interval79 = mutableInterval76.toInterval();
        org.joda.time.ReadableInterval readableInterval80 = null;
        boolean boolean81 = mutableInterval76.isBefore(readableInterval80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology84);
        boolean boolean86 = mutableInterval76.isAfter((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        org.joda.time.DateTime dateTime92 = mutableInterval90.getStart();
        boolean boolean93 = mutableInterval76.isBefore((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime92);
        mutableInterval72.setDurationBeforeEnd((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval72.setStartMillis(1606267308431L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    @Ignore
  public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod7);
        mutableInterval3.setEndMillis((long) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology29);
        boolean boolean31 = mutableInterval21.isAfter((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        boolean boolean38 = mutableInterval21.isBefore((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime37);
        long long41 = mutableInterval3.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(100L, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5);
        java.lang.String str7 = mutableInterval5.toString();
        java.lang.Class<?> wildcardClass8 = mutableInterval5.getClass();
        org.junit.Assert.assertNotNull(mutableInterval5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2020-11-25T01:22:46.635Z/2020-11-25T01:22:46.636Z" + "'", str7, "2020-11-25T01:22:46.635Z/2020-11-25T01:22:46.636Z");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    @Ignore
  public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Interval interval31 = mutableInterval3.toInterval();
        long long32 = interval31.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267349702L, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        org.joda.time.DateTime dateTime4 = mutableInterval3.getStart();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableInstant7, readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval13.getStart();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        mutableInterval9.setInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod6, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableInstant25, readablePeriod26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        mutableInterval27.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    @Ignore
  public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval36.copy();
        boolean boolean41 = mutableInterval14.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean44 = mutableInterval14.isBefore((long) 'a');
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.overlaps(readableInterval7);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setEndMillis((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.toMutableInterval();
        boolean boolean22 = mutableInterval10.equals((java.lang.Object) mutableInterval19);
        org.joda.time.Period period23 = mutableInterval10.toPeriod();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        boolean boolean38 = interval35.isAfter((long) (byte) 100);
        boolean boolean39 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = mutableInterval27.toDuration();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        mutableInterval67.setInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(readableInstant82, readablePeriod83);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(0L, 1L, chronology87);
        org.joda.time.Interval interval89 = mutableInterval88.toInterval();
        org.joda.time.DateTime dateTime90 = mutableInterval88.getStart();
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval(0L, 1L, chronology93);
        org.joda.time.Interval interval95 = mutableInterval94.toInterval();
        org.joda.time.DateTime dateTime96 = mutableInterval94.getStart();
        mutableInterval84.setInterval((org.joda.time.ReadableInstant) dateTime90, (org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.MutableInterval mutableInterval98 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.MutableInterval mutableInterval99 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period23, (org.joda.time.ReadableInstant) dateTime96);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267371914L + "'", long11 == 1606267371914L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    @Ignore
  public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval7.copy();
        long long12 = mutableInterval11.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    @Ignore
  public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        java.lang.Object obj6 = mutableInterval4.clone();
        mutableInterval4.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology9 = mutableInterval4.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval4.toMutableInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Interval interval17 = mutableInterval14.toInterval();
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = mutableInterval14.isBefore(readableInterval18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        boolean boolean35 = mutableInterval30.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        mutableInterval23.setChronology(chronology36);
        mutableInterval14.setChronology(chronology36);
        mutableInterval4.setChronology(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((java.lang.Object) "hi!", chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    @Ignore
  public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodBeforeEnd(readablePeriod38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Interval interval62 = mutableInterval59.toInterval();
        org.joda.time.ReadableInterval readableInterval63 = null;
        boolean boolean64 = mutableInterval59.isBefore(readableInterval63);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology67);
        boolean boolean69 = mutableInterval59.isAfter((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        boolean boolean76 = mutableInterval59.isBefore((org.joda.time.ReadableInstant) dateTime75);
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean78 = mutableInterval28.isAfter((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean79 = mutableInterval28.isAfterNow();
        boolean boolean80 = mutableInterval28.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setStartMillis(1606267359834L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    @Ignore
  public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        long long78 = mutableInterval40.getStartMillis();
        long long79 = mutableInterval40.toDurationMillis();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    @Ignore
  public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodBeforeEnd(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime42);
        java.lang.Class<?> wildcardClass46 = dateTime42.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    @Ignore
  public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        boolean boolean20 = mutableInterval15.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        mutableInterval24.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology29 = mutableInterval24.getChronology();
        mutableInterval15.setChronology(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        mutableInterval39.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology44 = mutableInterval39.getChronology();
        mutableInterval33.setChronology(chronology44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval15, chronology44);
        mutableInterval9.setChronology(chronology44);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        mutableInterval50.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval50.toMutableInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        long long58 = mutableInterval57.toDurationMillis();
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Duration duration60 = mutableInterval57.toDuration();
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(duration60);
    }

    @Test
    @Ignore
  public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period72 = mutableInterval13.toPeriod();
        boolean boolean73 = mutableInterval13.isAfterNow();
        org.joda.time.Duration duration74 = mutableInterval13.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration74);
    }

    @Test
    @Ignore
  public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(obj14, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodBeforeEnd(readablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        long long31 = interval30.getEndMillis();
        boolean boolean33 = interval30.isAfter((long) (byte) 100);
        boolean boolean34 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration35 = mutableInterval22.toDuration();
        boolean boolean36 = mutableInterval16.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval22.toMutableInterval();
        boolean boolean38 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Class<?> wildcardClass39 = mutableInterval37.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 1606267318729L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval6.setInterval(1606267329404L, 1606267329251L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval6);
    }

    @Test
    @Ignore
  public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod7);
        mutableInterval3.setEndMillis((long) 100);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        java.lang.String str40 = mutableInterval39.toString();
        boolean boolean41 = mutableInterval39.containsNow();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        mutableInterval50.setInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = mutableInterval64.getStart();
        boolean boolean66 = mutableInterval39.contains((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology67 = mutableInterval39.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((java.lang.Object) 100, chronology67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str40, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
    }

    @Test
    @Ignore
  public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(1606267296955L, (long) (byte) -1, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    @Ignore
  public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(obj7, chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableInterval9.setPeriodBeforeEnd(readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        boolean boolean29 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval15.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readablePeriod31, (org.joda.time.ReadableInstant) dateTime40);
        mutableInterval15.setEnd((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        mutableInterval53.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        long long62 = interval61.getEndMillis();
        boolean boolean64 = interval61.isAfter((long) (byte) 100);
        boolean boolean65 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) interval61);
        boolean boolean66 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        boolean boolean73 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        mutableInterval77.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology82 = mutableInterval77.getChronology();
        mutableInterval15.setChronology(chronology82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(1606267320326L, (long) (byte) 100, chronology82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        org.joda.time.Period period6 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        org.joda.time.DateTime dateTime4 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        boolean boolean20 = mutableInterval15.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        mutableInterval8.setChronology(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((java.lang.Object) dateTime4, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    @Ignore
  public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period72 = mutableInterval13.toPeriod();
        boolean boolean73 = mutableInterval13.isAfterNow();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        mutableInterval77.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime82 = mutableInterval77.getStart();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval13.setStart((org.joda.time.ReadableInstant) dateTime82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    @Ignore
  public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        mutableInterval12.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableDuration48, readableInstant49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodBeforeEnd(readablePeriod55);
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval54);
        mutableInterval50.setDurationAfterStart(1606267308431L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readableInstant66, readablePeriod67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        mutableInterval68.setInterval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime80);
        mutableInterval50.setStart((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration85 = mutableInterval84.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    @Ignore
  public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval2.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setInterval(1606267329251L, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval17);
    }

    @Test
    @Ignore
  public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableInterval3.contains(readableInstant7);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    @Ignore
  public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        boolean boolean20 = mutableInterval15.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        mutableInterval24.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology29 = mutableInterval24.getChronology();
        mutableInterval15.setChronology(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        mutableInterval39.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology44 = mutableInterval39.getChronology();
        mutableInterval33.setChronology(chronology44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval15, chronology44);
        mutableInterval9.setChronology(chronology44);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setEndMillis((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    @Ignore
  public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        java.lang.String str6 = mutableInterval2.toString();
        long long7 = mutableInterval2.getStartMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        java.lang.Object obj20 = mutableInterval18.clone();
        org.joda.time.Interval interval21 = mutableInterval18.toInterval();
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = mutableInterval18.isBefore(readableInterval22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology26);
        boolean boolean28 = mutableInterval18.isAfter((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        boolean boolean35 = mutableInterval18.isBefore((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(obj42, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodAfterStart(readablePeriod45);
        org.joda.time.Period period47 = mutableInterval44.toPeriod();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(obj53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableInterval55.setPeriodAfterStart(readablePeriod56);
        org.joda.time.Period period58 = mutableInterval55.toPeriod();
        mutableInterval44.setPeriodAfterStart((org.joda.time.ReadablePeriod) period58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) period58);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEnd((org.joda.time.ReadableInstant) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2020-11-25T01:22:56.978Z/2020-11-25T01:22:56.979Z" + "'", str6, "2020-11-25T01:22:56.978Z/2020-11-25T01:22:56.979Z");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1606267376978L + "'", long7 == 1606267376978L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Duration duration28 = mutableInterval25.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        boolean boolean31 = mutableInterval3.contains(1606267322702L);
        long long32 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    @Ignore
  public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval28.setPeriodAfterStart(readablePeriod29);
        org.joda.time.Period period31 = mutableInterval28.toPeriod();
        mutableInterval14.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = mutableInterval14.isAfterNow();
        boolean boolean34 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Class<?> wildcardClass35 = mutableInterval7.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    @Ignore
  public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getStart();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        mutableInterval48.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology53 = mutableInterval48.getChronology();
        mutableInterval39.setChronology(chronology53);
        mutableInterval33.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology53);
        org.joda.time.Chronology chronology57 = mutableInterval3.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    @Ignore
  public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean22 = mutableInterval3.contains((long) '4');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval25.toPeriod(periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267377857L + "'", long31 == 1606267377857L);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    @Ignore
  public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval11);
        mutableInterval7.setDurationAfterStart(1606267308431L);
        boolean boolean17 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodBeforeEnd(readablePeriod26);
        mutableInterval25.setDurationBeforeEnd((long) 100);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.DateTime dateTime31 = mutableInterval25.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean14 = mutableInterval10.isAfterNow();
        long long15 = mutableInterval10.getStartMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267378166L + "'", long11 == 1606267378166L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1606267378166L + "'", long15 == 1606267378166L);
    }

    @Test
    @Ignore
  public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        boolean boolean11 = mutableInterval3.contains(1606267296955L);
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        long long25 = interval24.getEndMillis();
        boolean boolean27 = interval24.isAfter((long) (byte) 100);
        boolean boolean28 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Duration duration29 = mutableInterval16.toDuration();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval87.setEndMillis((long) ' ');
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval87);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:46.635Z/2020-11-25T01:22:46.636Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        org.joda.time.Interval interval35 = mutableInterval3.toInterval();
        long long36 = mutableInterval3.getEndMillis();
        boolean boolean37 = mutableInterval3.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Period period42 = mutableInterval40.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    @Ignore
  public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval12.copy();
        org.joda.time.Duration duration20 = mutableInterval12.toDuration();
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        boolean boolean30 = mutableInterval25.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        mutableInterval34.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        mutableInterval25.setChronology(chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Interval interval54 = mutableInterval51.toInterval();
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval51.isBefore(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology59);
        boolean boolean61 = mutableInterval51.isAfter((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        boolean boolean68 = mutableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = mutableInterval44.contains((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime67);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime72 = mutableInterval7.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    @Ignore
  public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Period period28 = mutableInterval7.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStartMillis((long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        boolean boolean21 = mutableInterval20.isBeforeNow();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getEnd();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        long long35 = interval34.getEndMillis();
        boolean boolean37 = interval34.isAfter((long) (byte) 100);
        boolean boolean38 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration39 = mutableInterval26.toDuration();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    @Ignore
  public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval44 = mutableInterval9.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(mutableInterval44);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        mutableInterval3.setStartMillis((long) (byte) 0);
        java.lang.Class<?> wildcardClass12 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    @Ignore
  public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.DateTime dateTime26 = mutableInterval25.getEnd();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        long long39 = interval38.getEndMillis();
        boolean boolean41 = interval38.isAfter((long) (byte) 100);
        boolean boolean42 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Duration duration43 = mutableInterval30.toDuration();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        mutableInterval52.setInterval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime64);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        java.lang.Object obj45 = mutableInterval2.clone();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "2020-11-25T01:23:01.138Z/2020-11-25T01:23:01.139Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "2020-11-25T01:23:01.138Z/2020-11-25T01:23:01.139Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "2020-11-25T01:23:01.138Z/2020-11-25T01:23:01.139Z");
    }

    @Test
    @Ignore
  public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        long long6 = mutableInterval3.getEndMillis();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableInterval10.setDurationAfterStart(readableDuration13);
        boolean boolean15 = mutableInterval10.isAfterNow();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        boolean boolean24 = mutableInterval19.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(obj31, chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableInterval33.setPeriodAfterStart(readablePeriod34);
        org.joda.time.Period period36 = mutableInterval33.toPeriod();
        mutableInterval19.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        mutableInterval10.setPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        boolean boolean40 = mutableInterval3.containsNow();
        mutableInterval3.setDurationBeforeEnd(10L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    @Ignore
  public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        boolean boolean32 = mutableInterval27.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        mutableInterval36.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology41 = mutableInterval36.getChronology();
        mutableInterval27.setChronology(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        mutableInterval45.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        mutableInterval51.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology56 = mutableInterval51.getChronology();
        mutableInterval45.setChronology(chronology56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval27, chronology56);
        boolean boolean59 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval58);
        mutableInterval22.setDurationAfterStart(1606267329404L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    @Ignore
  public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.copy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = mutableInterval12.toPeriod(periodType13);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology54);
        boolean boolean56 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        boolean boolean63 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime62);
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean67 = mutableInterval2.isBeforeNow();
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267381774L + "'", long8 == 1606267381774L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    @Ignore
  public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        mutableInterval12.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime45);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStartMillis(1606267372486L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    @Ignore
  public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Interval interval23 = mutableInterval20.toInterval();
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = mutableInterval20.isBefore(readableInterval24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology28);
        boolean boolean30 = mutableInterval20.isAfter((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        boolean boolean37 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((java.lang.Object) duration16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267321066L, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        long long16 = mutableInterval3.toDurationMillis();
        long long17 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    @Ignore
  public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        long long30 = interval29.getEndMillis();
        boolean boolean32 = interval29.isAfter((long) (byte) 100);
        boolean boolean33 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        mutableInterval36.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval36.toMutableInterval();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        long long44 = mutableInterval43.toDurationMillis();
        mutableInterval36.setInterval((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.Duration duration46 = mutableInterval43.toDuration();
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(obj53, chronology54);
        org.joda.time.DateTime dateTime56 = mutableInterval55.getEnd();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime56);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    @Ignore
  public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        long long50 = mutableInterval47.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod52, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean88 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval89.toMutableInterval();
        org.joda.time.DateTime dateTime91 = mutableInterval90.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 1606267335902L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = mutableInterval3.overlaps(readableInterval35);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        boolean boolean12 = mutableInterval10.contains(1606267378166L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    @Ignore
  public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        boolean boolean9 = mutableInterval2.isAfterNow();
        java.lang.Object obj10 = mutableInterval2.clone();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    @Ignore
  public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267322702L);
        mutableInterval3.setInterval((long) '#', 1606267296955L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(1606267382961L, 1606267380977L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    @Ignore
  public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval21.toMutableInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        long long29 = mutableInterval28.toDurationMillis();
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Duration duration31 = mutableInterval28.toDuration();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = mutableInterval35.isBefore(readableInterval39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology43);
        boolean boolean45 = mutableInterval35.isAfter((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        boolean boolean52 = mutableInterval35.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval3.equals((java.lang.Object) mutableInterval53);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval53.setStartMillis((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    @Ignore
  public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(obj62, chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableInterval64.setPeriodAfterStart(readablePeriod65);
        org.joda.time.Period period67 = mutableInterval64.toPeriod();
        mutableInterval50.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period67, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableInstant46, (org.joda.time.ReadablePeriod) period67);
        boolean boolean92 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval91);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval45.setStartMillis(1606267318729L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    @Ignore
  public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean15 = mutableInterval10.isBefore((long) (byte) 10);
        org.joda.time.Period period16 = mutableInterval10.toPeriod();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = mutableInterval39.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        mutableInterval53.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology58 = mutableInterval53.getChronology();
        mutableInterval44.setChronology(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        mutableInterval62.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        mutableInterval68.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology73 = mutableInterval68.getChronology();
        mutableInterval62.setChronology(chronology73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval44, chronology73);
        boolean boolean76 = mutableInterval39.contains((org.joda.time.ReadableInterval) mutableInterval75);
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval75.toMutableInterval();
        boolean boolean78 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval75);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267384120L + "'", long11 == 1606267384120L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    @Ignore
  public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval9 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Interval interval16 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        boolean boolean23 = interval16.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        boolean boolean24 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval20.toMutableInterval();
        boolean boolean26 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval20);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval20.setInterval(1606267379187L, 1606267336460L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    @Ignore
  public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        java.lang.Class<?> wildcardClass22 = mutableInterval9.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = mutableInterval3.toPeriod(periodType20);
        java.lang.Class<?> wildcardClass22 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:13.019Z/2020-11-25T01:22:13.019Z");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        long long16 = mutableInterval15.toDurationMillis();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        mutableInterval8.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        boolean boolean39 = mutableInterval34.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        mutableInterval27.setChronology(chronology40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology40);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval8, chronology40);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology40);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(1606267332913L, 1606267333019L, chronology40);
        mutableInterval1.setChronology(chronology40);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval1.copy();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableInterval48);
    }

    @Test
    @Ignore
  public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        java.lang.Object obj27 = mutableInterval22.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        boolean boolean35 = mutableInterval30.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        mutableInterval23.setChronology(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) dateTime10, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        mutableInterval7.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        mutableInterval7.setChronology(chronology20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology20);
        boolean boolean24 = mutableInterval23.isBeforeNow();
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    @Ignore
  public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.Duration duration13 = mutableInterval5.toDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval18, chronology50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology50);
        mutableInterval5.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology50);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        boolean boolean66 = mutableInterval61.equals((java.lang.Object) 0);
        boolean boolean67 = mutableInterval57.equals((java.lang.Object) mutableInterval61);
        java.lang.String str68 = mutableInterval57.toString();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.032Z/1970-01-01T00:00:00.100Z" + "'", str68, "1970-01-01T00:00:00.032Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.DateTime dateTime12 = mutableInterval2.getStart();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    @Ignore
  public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        boolean boolean21 = mutableInterval20.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Interval interval31 = mutableInterval28.toInterval();
        boolean boolean32 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableDuration33, readableInstant34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodBeforeEnd(readablePeriod40);
        mutableInterval35.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(obj48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableInterval50.setPeriodAfterStart(readablePeriod51);
        org.joda.time.Period period53 = mutableInterval50.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readablePeriod55, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readablePeriod54, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateTime82);
        mutableInterval35.setPeriodAfterStart((org.joda.time.ReadablePeriod) period53);
        mutableInterval24.setPeriodAfterStart((org.joda.time.ReadablePeriod) period53);
        mutableInterval20.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        mutableInterval20.setDurationAfterStart(1606267322702L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        boolean boolean24 = mutableInterval19.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        mutableInterval12.setChronology(chronology25);
        mutableInterval12.setEndMillis((long) '#');
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = mutableInterval12.toPeriod(periodType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        long long37 = mutableInterval34.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readablePeriod39, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod38, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean75 = mutableInterval34.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean77 = mutableInterval7.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval2.toMutableInterval();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval12);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267330633L, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.Object obj8 = mutableInterval7.clone();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        mutableInterval13.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readablePeriod10, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readablePeriod9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        mutableInterval31.setInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean46 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.MutableInterval mutableInterval48 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        boolean boolean62 = interval55.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        boolean boolean63 = mutableInterval48.isAfter((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval64 = mutableInterval59.toMutableInterval();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = mutableInterval59.toPeriod(periodType65);
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period66);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    @Ignore
  public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        java.lang.Class<?> wildcardClass18 = mutableInterval12.getClass();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    @Ignore
  public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        boolean boolean10 = mutableInterval5.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        mutableInterval14.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology19 = mutableInterval14.getChronology();
        mutableInterval5.setChronology(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(1606267341034L, (long) 1, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    @Ignore
  public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        mutableInterval44.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval44.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        java.lang.Object obj76 = mutableInterval73.clone();
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval73.copy();
        org.joda.time.Duration duration78 = mutableInterval73.toDuration();
        org.joda.time.Period period79 = mutableInterval73.toPeriod();
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval73.toMutableInterval();
        boolean boolean81 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 1606267371811L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        boolean boolean6 = mutableInterval3.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBefore(1606267296955L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (short) 1, (long) '#');
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:23:05.523Z/2020-11-25T01:23:05.524Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        boolean boolean9 = mutableInterval2.isAfterNow();
        boolean boolean11 = mutableInterval2.isBefore(1606267307365L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        mutableInterval31.setInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime43);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEnd((org.joda.time.ReadableInstant) dateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    @Ignore
  public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        long long14 = mutableInterval13.toDurationMillis();
        mutableInterval6.setInterval((org.joda.time.ReadableInterval) mutableInterval13);
        mutableInterval6.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        boolean boolean37 = mutableInterval32.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval25.setChronology(chronology38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology38);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology38);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval6, chronology38);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology38);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(1606267332913L, 1606267333019L, chronology38);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean51 = mutableInterval48.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval48.copy();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        java.lang.Object obj58 = mutableInterval56.clone();
        mutableInterval56.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology61 = mutableInterval56.getChronology();
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval56.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval56.copy();
        org.joda.time.Duration duration64 = mutableInterval56.toDuration();
        org.joda.time.DateTime dateTime65 = mutableInterval56.getStart();
        mutableInterval48.setStart((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = mutableInterval48.toPeriod(periodType67);
        boolean boolean69 = mutableInterval44.equals((java.lang.Object) periodType67);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    @Ignore
  public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1L, 1606267307365L, chronology27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableInterval34.setPeriodBeforeEnd(readablePeriod35);
        mutableInterval34.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readableInstant39, readablePeriod40);
        long long42 = mutableInterval41.getEndMillis();
        boolean boolean43 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        boolean boolean44 = mutableInterval41.isAfterNow();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = mutableInterval54.isBefore(readableInterval58);
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval54.copy();
        boolean boolean61 = mutableInterval48.contains((org.joda.time.ReadableInterval) mutableInterval54);
        mutableInterval54.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology65 = mutableInterval54.getChronology();
        boolean boolean66 = mutableInterval54.isBeforeNow();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        mutableInterval70.setPeriodBeforeEnd(readablePeriod71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(readableInstant73, readablePeriod74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        org.joda.time.DateTime dateTime87 = mutableInterval85.getStart();
        mutableInterval75.setInterval((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = mutableInterval70.isAfter((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean90 = mutableInterval54.isAfter((org.joda.time.ReadableInstant) dateTime87);
        mutableInterval41.setStart((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean92 = mutableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime87);
        java.lang.Class<?> wildcardClass93 = mutableInterval30.getClass();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1606267387820L + "'", long42 == 1606267387820L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    @Ignore
  public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        java.lang.Object obj12 = mutableInterval9.clone();
        boolean boolean13 = mutableInterval3.equals((java.lang.Object) mutableInterval9);
        org.joda.time.Interval interval14 = mutableInterval9.toInterval();
        boolean boolean15 = interval14.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    @Ignore
  public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Interval interval20 = mutableInterval17.toInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = mutableInterval17.isBefore(readableInterval21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology25);
        boolean boolean27 = mutableInterval17.isAfter((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        boolean boolean34 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean35 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(obj41, chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableInterval43.setPeriodAfterStart(readablePeriod44);
        org.joda.time.Period period46 = mutableInterval43.toPeriod();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(obj52, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod55);
        org.joda.time.Period period57 = mutableInterval54.toPeriod();
        mutableInterval43.setPeriodAfterStart((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadablePeriod) period57);
        boolean boolean60 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(obj66, chronology67);
        org.joda.time.Duration duration69 = mutableInterval68.toDuration();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        mutableInterval76.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        mutableInterval83.setDurationAfterStart((long) (byte) 1);
        boolean boolean88 = mutableInterval83.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology89 = mutableInterval83.getChronology();
        mutableInterval76.setChronology(chronology89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((java.lang.Object) duration69, chronology89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(chronology89);
    }

    @Test
    @Ignore
  public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.toMutableInterval();
        boolean boolean22 = mutableInterval10.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableInterval19.setPeriodAfterStart(readablePeriod23);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        mutableInterval28.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval28.toMutableInterval();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        long long36 = mutableInterval35.toDurationMillis();
        mutableInterval28.setInterval((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Duration duration38 = mutableInterval35.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        java.lang.Object obj44 = mutableInterval42.clone();
        org.joda.time.Interval interval45 = mutableInterval42.toInterval();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        mutableInterval42.setPeriodAfterStart(readablePeriod46);
        mutableInterval42.setEndMillis((long) 100);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        mutableInterval53.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Interval interval63 = mutableInterval60.toInterval();
        org.joda.time.ReadableInterval readableInterval64 = null;
        boolean boolean65 = mutableInterval60.isBefore(readableInterval64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology68);
        boolean boolean70 = mutableInterval60.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        boolean boolean77 = mutableInterval60.isBefore((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = mutableInterval53.contains((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean79 = mutableInterval42.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime76);
        mutableInterval19.setDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((java.lang.Object) duration38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267388350L + "'", long11 == 1606267388350L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    @Ignore
  public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        java.lang.String str17 = mutableInterval2.toString();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.001Z/2020-11-25T01:23:08.554Z" + "'", str17, "1970-01-01T00:00:00.001Z/2020-11-25T01:23:08.554Z");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        boolean boolean74 = mutableInterval72.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    @Ignore
  public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = mutableInterval14.toPeriod(periodType15);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(obj27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableInterval29.setPeriodBeforeEnd(readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        long long44 = interval43.getEndMillis();
        boolean boolean46 = interval43.isAfter((long) (byte) 100);
        boolean boolean47 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration48 = mutableInterval35.toDuration();
        boolean boolean49 = mutableInterval29.isBefore((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.MutableInterval mutableInterval50 = mutableInterval35.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime60);
        mutableInterval35.setEnd((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        mutableInterval73.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        long long82 = interval81.getEndMillis();
        boolean boolean84 = interval81.isAfter((long) (byte) 100);
        boolean boolean85 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) interval81);
        boolean boolean86 = mutableInterval35.contains((org.joda.time.ReadableInterval) mutableInterval73);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        org.joda.time.DateTime dateTime92 = mutableInterval90.getStart();
        boolean boolean93 = mutableInterval35.contains((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = mutableInterval21.contains((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean95 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean14 = mutableInterval10.isAfterNow();
        org.joda.time.Interval interval15 = mutableInterval10.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267389296L + "'", long11 == 1606267389296L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        long long21 = mutableInterval20.toDurationMillis();
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Duration duration23 = mutableInterval20.toDuration();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime51);
        boolean boolean54 = mutableInterval27.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        mutableInterval58.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        long long67 = interval66.getEndMillis();
        boolean boolean69 = interval66.isAfter((long) (byte) 100);
        boolean boolean70 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration71 = mutableInterval58.toDuration();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(readableInstant78, readablePeriod79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        org.joda.time.DateTime dateTime92 = mutableInterval90.getStart();
        mutableInterval80.setInterval((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration71);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration71);
        boolean boolean98 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTime dateTime99 = mutableInterval20.getStart();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267389616L + "'", long3 == 1606267389616L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    @Ignore
  public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        mutableInterval10.setDurationBeforeEnd(0L);
        boolean boolean17 = mutableInterval10.contains((long) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        long long30 = interval29.getEndMillis();
        boolean boolean32 = interval29.isAfter((long) (byte) 100);
        boolean boolean33 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration34 = mutableInterval21.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        mutableInterval61.setInterval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime67);
        mutableInterval10.setDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        mutableInterval80.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology85 = mutableInterval80.getChronology();
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval80.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval87 = mutableInterval80.copy();
        org.joda.time.Duration duration88 = mutableInterval80.toDuration();
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval(0L, 1L, chronology91);
        org.joda.time.Interval interval93 = mutableInterval92.toInterval();
        org.joda.time.DateTime dateTime94 = mutableInterval92.getStart();
        mutableInterval80.setStart((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration34);
        java.lang.String str98 = mutableInterval97.toString();
        boolean boolean99 = mutableInterval97.isBeforeNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(mutableInterval86);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "2020-11-25T01:23:09.746Z/2020-11-25T01:23:09.747Z" + "'", str98, "2020-11-25T01:23:09.746Z/2020-11-25T01:23:09.747Z");
// flaky:         org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableInterval2.setDurationBeforeEnd(readableDuration21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableInterval2.isBefore(readableInstant23);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267389845L + "'", long3 == 1606267389845L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    @Ignore
  public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval7.copy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime32);
        mutableInterval11.setDurationBeforeEnd(1606267312293L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    @Ignore
  public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(obj29, chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableInterval31.setPeriodBeforeEnd(readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        boolean boolean51 = mutableInterval31.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval37.toMutableInterval();
        java.lang.String str53 = mutableInterval52.toString();
        boolean boolean54 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setDurationBeforeEnd((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str53, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    @Ignore
  public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Interval interval23 = mutableInterval20.toInterval();
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = mutableInterval20.isBefore(readableInterval24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology28);
        boolean boolean30 = mutableInterval20.isAfter((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        boolean boolean37 = mutableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime36);
        mutableInterval38.setInterval((long) ' ', 1606267308431L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        long long14 = mutableInterval13.toDurationMillis();
        mutableInterval6.setInterval((org.joda.time.ReadableInterval) mutableInterval13);
        mutableInterval6.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        boolean boolean37 = mutableInterval32.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval25.setChronology(chronology38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology38);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology38);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval6, chronology38);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(1606267387899L, 1606267308431L, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    @Ignore
  public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        long long22 = mutableInterval21.getEndMillis();
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval21.copy();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = mutableInterval26.toPeriod(periodType27);
        mutableInterval21.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = mutableInterval21.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableInterval38.setPeriodBeforeEnd(readablePeriod39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Interval interval63 = mutableInterval60.toInterval();
        org.joda.time.ReadableInterval readableInterval64 = null;
        boolean boolean65 = mutableInterval60.isBefore(readableInterval64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology68);
        boolean boolean70 = mutableInterval60.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        boolean boolean77 = mutableInterval60.isBefore((org.joda.time.ReadableInstant) dateTime76);
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime76);
        boolean boolean79 = mutableInterval21.isAfter((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean80 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Chronology chronology81 = mutableInterval16.getChronology();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (short) 1, 1606267341941L, chronology81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval11, chronology81);
        boolean boolean85 = mutableInterval11.isBefore(1606267379187L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1606267390958L + "'", long22 == 1606267390958L);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    @Ignore
  public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = mutableInterval12.isBefore(readableInterval16);
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.copy();
        boolean boolean19 = mutableInterval6.contains((org.joda.time.ReadableInterval) mutableInterval12);
        mutableInterval12.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology23 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj2, chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(1606267375359L, 1606267371811L, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    @Ignore
  public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        java.lang.Object obj12 = mutableInterval9.clone();
        boolean boolean13 = mutableInterval3.equals((java.lang.Object) mutableInterval9);
        mutableInterval9.setDurationAfterStart(1606267371914L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(obj21, chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableInterval23.setPeriodBeforeEnd(readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        mutableInterval29.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        long long38 = interval37.getEndMillis();
        boolean boolean40 = interval37.isAfter((long) (byte) 100);
        boolean boolean41 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration42 = mutableInterval29.toDuration();
        boolean boolean43 = mutableInterval23.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.Period period44 = mutableInterval23.toPeriod();
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267386966L, 1606267371167L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        long long19 = mutableInterval16.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readablePeriod21, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readablePeriod20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean57 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        long long70 = interval69.getEndMillis();
        boolean boolean72 = interval69.isAfter((long) (byte) 100);
        boolean boolean73 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) interval69);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        mutableInterval76.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval76.toMutableInterval();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        long long84 = mutableInterval83.toDurationMillis();
        mutableInterval76.setInterval((org.joda.time.ReadableInterval) mutableInterval83);
        org.joda.time.Duration duration86 = mutableInterval83.toDuration();
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(0L, 1L, chronology90);
        org.joda.time.Interval interval92 = mutableInterval91.toInterval();
        java.lang.Object obj93 = mutableInterval91.clone();
        org.joda.time.Chronology chronology94 = null;
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval(obj93, chronology94);
        org.joda.time.DateTime dateTime96 = mutableInterval95.getEnd();
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration86, (org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.MutableInterval mutableInterval98 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime96);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertEquals(obj93.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj93), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj93), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.toMutableInterval();
        boolean boolean22 = mutableInterval10.equals((java.lang.Object) mutableInterval19);
        java.lang.Class<?> wildcardClass23 = mutableInterval10.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267391928L + "'", long11 == 1606267391928L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    @Ignore
  public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime60);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        mutableInterval73.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology78 = mutableInterval73.getChronology();
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval73.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval73.copy();
        org.joda.time.Duration duration81 = mutableInterval73.toDuration();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        org.joda.time.DateTime dateTime87 = mutableInterval85.getStart();
        mutableInterval73.setStart((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval(0L, 1L, chronology93);
        org.joda.time.Interval interval95 = mutableInterval94.toInterval();
        org.joda.time.DateTime dateTime96 = mutableInterval94.getStart();
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval(readablePeriod90, (org.joda.time.ReadableInstant) dateTime96);
        boolean boolean98 = mutableInterval89.contains((org.joda.time.ReadableInstant) dateTime96);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    @Ignore
  public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod30, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        boolean boolean56 = mutableInterval51.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(obj63, chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableInterval65.setPeriodAfterStart(readablePeriod66);
        org.joda.time.Period period68 = mutableInterval65.toPeriod();
        mutableInterval51.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) period68);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period68);
        java.lang.Object obj72 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        long long50 = mutableInterval47.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod52, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean88 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant90 = null;
        boolean boolean91 = mutableInterval89.contains(readableInstant90);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    @Ignore
  public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        boolean boolean12 = mutableInterval10.isBefore((long) (short) -1);
        mutableInterval10.setDurationAfterStart(1606267333067L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267337871L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        mutableInterval3.setDurationBeforeEnd(1606267295546L);
        java.lang.String str9 = mutableInterval3.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodBeforeEnd(readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration36 = mutableInterval23.toDuration();
        boolean boolean37 = mutableInterval17.isBefore((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval23.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readablePeriod39, (org.joda.time.ReadableInstant) dateTime48);
        mutableInterval23.setEnd((org.joda.time.ReadableInstant) dateTime48);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1919-02-06T22:38:24.455Z/1970-01-01T00:00:00.001Z" + "'", str9, "1919-02-06T22:38:24.455Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    @Ignore
  public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        boolean boolean21 = mutableInterval20.isBeforeNow();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        java.lang.Object obj28 = mutableInterval25.clone();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        java.lang.Object obj30 = mutableInterval29.clone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Interval interval37 = mutableInterval34.toInterval();
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = mutableInterval34.isBefore(readableInterval38);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval34.copy();
        boolean boolean42 = mutableInterval34.contains(1606267296955L);
        org.joda.time.DateTime dateTime43 = mutableInterval34.getStart();
        boolean boolean44 = mutableInterval29.equals((java.lang.Object) dateTime43);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval20.setEnd((org.joda.time.ReadableInstant) dateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval2.toPeriod(periodType11);
        mutableInterval2.setDurationBeforeEnd(1606267386521L);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    @Ignore
  public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        mutableInterval37.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval37.toMutableInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        long long45 = mutableInterval44.toDurationMillis();
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Duration duration47 = mutableInterval44.toDuration();
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(obj54, chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutableInterval56.setPeriodAfterStart(readablePeriod57);
        org.joda.time.Period period59 = mutableInterval56.toPeriod();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        mutableInterval63.setDurationAfterStart((long) (byte) 1);
        boolean boolean68 = mutableInterval63.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval77.setPeriodAfterStart(readablePeriod78);
        org.joda.time.Period period80 = mutableInterval77.toPeriod();
        mutableInterval63.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period80);
        boolean boolean82 = mutableInterval63.isAfterNow();
        boolean boolean83 = mutableInterval56.contains((org.joda.time.ReadableInterval) mutableInterval63);
        boolean boolean84 = mutableInterval33.isAfter((org.joda.time.ReadableInterval) mutableInterval56);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    @Ignore
  public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval25.toPeriod(periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval40);
        boolean boolean42 = mutableInterval40.isBeforeNow();
        org.joda.time.DateTime dateTime43 = mutableInterval40.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267394045L + "'", long31 == 1606267394045L);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    @Ignore
  public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        java.lang.Object obj80 = mutableInterval74.clone();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval12.containsNow();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        mutableInterval12.setDurationBeforeEnd(1606267387820L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
    }

    @Test
    @Ignore
  public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval5.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableInstant21, readablePeriod22);
        long long24 = mutableInterval23.getEndMillis();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval23.copy();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableDuration26, readableInstant27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = mutableInterval28.toPeriod(periodType29);
        mutableInterval23.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(obj38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodBeforeEnd(readablePeriod41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        org.joda.time.Interval interval65 = mutableInterval62.toInterval();
        org.joda.time.ReadableInterval readableInterval66 = null;
        boolean boolean67 = mutableInterval62.isBefore(readableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology70);
        boolean boolean72 = mutableInterval62.isAfter((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        boolean boolean79 = mutableInterval62.isBefore((org.joda.time.ReadableInstant) dateTime78);
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime78);
        boolean boolean81 = mutableInterval23.isAfter((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean82 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Chronology chronology83 = mutableInterval18.getChronology();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((long) (short) 1, 1606267341941L, chronology83);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval13, chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(1606267390958L, (long) (byte) 10, chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1606267394225L + "'", long24 == 1606267394225L);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Duration duration21 = mutableInterval3.toDuration();
        long long22 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    @Ignore
  public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        mutableInterval19.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval19.toMutableInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        long long27 = mutableInterval26.toDurationMillis();
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Duration duration29 = mutableInterval26.toDuration();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        java.lang.Object obj42 = mutableInterval39.clone();
        boolean boolean43 = mutableInterval33.equals((java.lang.Object) mutableInterval39);
        org.joda.time.Interval interval44 = mutableInterval39.toInterval();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(obj50, chronology51);
        org.joda.time.DateTime dateTime53 = mutableInterval52.getEnd();
        boolean boolean54 = interval44.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval55);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    @Ignore
  public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        java.lang.Object obj4 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setDurationAfterStart((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        boolean boolean33 = mutableInterval28.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        mutableInterval21.setChronology(chronology34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology34);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2, chronology34);
        boolean boolean40 = mutableInterval38.isAfter(1606267312293L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        boolean boolean28 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Class<?> wildcardClass29 = mutableInterval22.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    @Ignore
  public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(obj62, chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        mutableInterval64.setPeriodAfterStart(readablePeriod65);
        org.joda.time.Period period67 = mutableInterval64.toPeriod();
        mutableInterval50.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period67, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableInstant46, (org.joda.time.ReadablePeriod) period67);
        boolean boolean92 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval91);
        org.joda.time.Duration duration93 = mutableInterval45.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(duration93);
    }

    @Test
    @Ignore
  public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Interval interval14 = mutableInterval3.toInterval();
        org.joda.time.Period period15 = mutableInterval3.toPeriod();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Duration duration28 = mutableInterval25.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        java.lang.Object obj41 = mutableInterval38.clone();
        boolean boolean42 = mutableInterval32.equals((java.lang.Object) mutableInterval38);
        org.joda.time.Interval interval43 = mutableInterval38.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(obj49, chronology50);
        org.joda.time.DateTime dateTime52 = mutableInterval51.getEnd();
        boolean boolean53 = interval43.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period55 = mutableInterval54.toPeriod();
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period55);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        java.lang.Class<?> wildcardClass20 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    @Ignore
  public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        boolean boolean27 = interval26.containsNow();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        mutableInterval30.setDurationBeforeEnd(1L);
        boolean boolean33 = mutableInterval30.isAfterNow();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(obj39, chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableInterval41.setPeriodBeforeEnd(readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        long long56 = interval55.getEndMillis();
        boolean boolean58 = interval55.isAfter((long) (byte) 100);
        boolean boolean59 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = mutableInterval47.toDuration();
        boolean boolean61 = mutableInterval41.isBefore((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval47.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(readableInstant64, readablePeriod65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        mutableInterval66.setInterval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(readablePeriod63, (org.joda.time.ReadableInstant) dateTime72);
        mutableInterval47.setEnd((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean82 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DateTime dateTime83 = mutableInterval47.getEnd();
        boolean boolean84 = interval26.contains((org.joda.time.ReadableInstant) dateTime83);
        java.lang.Class<?> wildcardClass85 = dateTime83.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    @Ignore
  public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Duration duration10 = mutableInterval3.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    @Ignore
  public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval12.copy();
        org.joda.time.Duration duration20 = mutableInterval12.toDuration();
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        boolean boolean30 = mutableInterval25.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        mutableInterval34.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        mutableInterval25.setChronology(chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Interval interval54 = mutableInterval51.toInterval();
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval51.isBefore(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology59);
        boolean boolean61 = mutableInterval51.isAfter((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        boolean boolean68 = mutableInterval51.isBefore((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = mutableInterval44.contains((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime67);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.ReadableInstant readableInstant72 = null;
        mutableInterval7.setEnd(readableInstant72);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267373781L, 1606267391928L);
    }

    @Test
    @Ignore
  public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(obj29, chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableInterval31.setPeriodBeforeEnd(readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        boolean boolean51 = mutableInterval31.isBefore((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval37.toMutableInterval();
        java.lang.String str53 = mutableInterval52.toString();
        boolean boolean54 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime78 = mutableInterval77.getStart();
        org.joda.time.Duration duration79 = mutableInterval77.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration79);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str53, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(duration79);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        mutableInterval9.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        boolean boolean21 = mutableInterval16.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        mutableInterval9.setChronology(chronology22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(1606267329251L, 1606267336388L, chronology22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean10 = mutableInterval6.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    @Ignore
  public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        java.lang.Object obj2 = mutableInterval1.clone();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
    }

    @Test
    @Ignore
  public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Interval interval26 = mutableInterval23.toInterval();
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = mutableInterval23.isBefore(readableInterval27);
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval23.copy();
        boolean boolean30 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableInterval38.setPeriodBeforeEnd(readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        long long53 = interval52.getEndMillis();
        boolean boolean55 = interval52.isAfter((long) (byte) 100);
        boolean boolean56 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Duration duration57 = mutableInterval44.toDuration();
        boolean boolean58 = mutableInterval38.isBefore((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval44.toMutableInterval();
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean67 = mutableInterval64.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval64.copy();
        org.joda.time.Duration duration69 = mutableInterval64.toDuration();
        mutableInterval59.setDurationAfterStart((org.joda.time.ReadableDuration) duration69);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        java.lang.Class<?> wildcardClass72 = duration69.getClass();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    @Ignore
  public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(obj10, chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableInterval12.setPeriodAfterStart(readablePeriod13);
        org.joda.time.Period period15 = mutableInterval12.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        java.lang.Object obj62 = mutableInterval60.clone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(obj62, chronology63);
        org.joda.time.DateTime dateTime65 = mutableInterval64.getEnd();
        boolean boolean66 = mutableInterval56.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = mutableInterval4.contains((org.joda.time.ReadableInstant) dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267397709L + "'", long3 == 1606267397709L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableInterval6);
    }

    @Test
    @Ignore
  public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = mutableInterval3.toPeriod();
        boolean boolean23 = mutableInterval3.contains(1606267390958L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    @Ignore
  public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        mutableInterval36.setPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period50);
        boolean boolean54 = mutableInterval52.contains((long) (byte) 10);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval2.toPeriod(periodType11);
        java.lang.Class<?> wildcardClass13 = mutableInterval2.getClass();
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod35, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean71 = mutableInterval33.contains((org.joda.time.ReadableInstant) dateTime44);
        java.lang.Class<?> wildcardClass72 = mutableInterval33.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    @Ignore
  public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        boolean boolean8 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    @Ignore
  public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        boolean boolean40 = mutableInterval38.isBeforeNow();
        boolean boolean41 = mutableInterval38.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.Duration duration21 = mutableInterval19.toDuration();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267398993L + "'", long3 == 1606267398993L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        boolean boolean34 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = mutableInterval3.toPeriod(periodType35);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    @Ignore
  public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267322702L);
        mutableInterval3.setInterval((long) '#', 1606267296955L);
        org.joda.time.MutableInterval mutableInterval50 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        boolean boolean64 = interval57.isBefore((org.joda.time.ReadableInterval) mutableInterval61);
        boolean boolean65 = mutableInterval50.isAfter((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.MutableInterval mutableInterval66 = mutableInterval61.toMutableInterval();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = mutableInterval61.toPeriod(periodType67);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    @Ignore
  public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        boolean boolean30 = mutableInterval28.containsNow();
        mutableInterval28.setEndMillis(1606267386966L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    @Ignore
  public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.copy();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.Duration duration83 = mutableInterval81.toDuration();
        long long84 = mutableInterval81.toDurationMillis();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
    }

    @Test
    @Ignore
  public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = mutableInterval9.toPeriod(periodType22);
        mutableInterval9.setInterval((long) (byte) -1, (long) '4');
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    @Ignore
  public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        boolean boolean7 = mutableInterval5.isBefore(35L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        long long20 = interval19.getEndMillis();
        boolean boolean22 = interval19.isAfter((long) (byte) 100);
        boolean boolean23 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Duration duration24 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        mutableInterval51.setInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        java.lang.Object obj71 = mutableInterval69.clone();
        org.joda.time.Interval interval72 = mutableInterval69.toInterval();
        org.joda.time.ReadableInterval readableInterval73 = null;
        boolean boolean74 = mutableInterval69.isBefore(readableInterval73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology77);
        boolean boolean79 = mutableInterval69.isAfter((org.joda.time.ReadableInterval) mutableInterval78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        boolean boolean86 = mutableInterval69.isBefore((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval5.setDurationAfterStart((org.joda.time.ReadableDuration) duration24);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.toMutableInterval();
        java.lang.String str5 = mutableInterval2.toString();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2020-11-25T01:23:20.050Z/2020-11-25T01:23:20.050Z" + "'", str5, "2020-11-25T01:23:20.050Z/2020-11-25T01:23:20.050Z");
    }

    @Test
    @Ignore
  public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        mutableInterval10.setDurationBeforeEnd(0L);
        boolean boolean17 = mutableInterval10.contains((long) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        long long30 = interval29.getEndMillis();
        boolean boolean32 = interval29.isAfter((long) (byte) 100);
        boolean boolean33 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration34 = mutableInterval21.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        mutableInterval61.setInterval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime67);
        mutableInterval10.setDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        mutableInterval80.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology85 = mutableInterval80.getChronology();
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval80.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval87 = mutableInterval80.copy();
        org.joda.time.Duration duration88 = mutableInterval80.toDuration();
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval(0L, 1L, chronology91);
        org.joda.time.Interval interval93 = mutableInterval92.toInterval();
        org.joda.time.DateTime dateTime94 = mutableInterval92.getStart();
        mutableInterval80.setStart((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration98 = mutableInterval97.toDuration();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(mutableInterval86);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    @Ignore
  public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(readableInstant78, readablePeriod79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        org.joda.time.DateTime dateTime92 = mutableInterval90.getStart();
        mutableInterval80.setInterval((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = mutableInterval74.contains((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean96 = mutableInterval74.isAfter(1606267377939L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    @Ignore
  public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        mutableInterval7.setDurationBeforeEnd(1L);
        boolean boolean10 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTime dateTime60 = mutableInterval24.getEnd();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        java.lang.Object obj68 = mutableInterval65.clone();
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval65.copy();
        org.joda.time.Duration duration70 = mutableInterval65.toDuration();
        mutableInterval61.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        long long72 = mutableInterval61.toDurationMillis();
        java.lang.String str73 = mutableInterval61.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str73, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        long long5 = mutableInterval4.getEndMillis();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval4.copy();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableDuration7, readableInstant8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = mutableInterval9.toPeriod(periodType10);
        mutableInterval4.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = mutableInterval4.getStart();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean20 = mutableInterval17.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval17.copy();
        boolean boolean22 = mutableInterval4.equals((java.lang.Object) mutableInterval21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableInterval4.setDurationBeforeEnd(readableDuration23);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        mutableInterval32.setChronology(chronology45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(1606267329251L, 1606267336388L, chronology45);
        mutableInterval4.setChronology(chronology45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(1606267375359L, 1L, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1606267400934L + "'", long5 == 1606267400934L);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    @Ignore
  public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(obj12, chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableInterval14.setPeriodBeforeEnd(readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        long long29 = interval28.getEndMillis();
        boolean boolean31 = interval28.isAfter((long) (byte) 100);
        boolean boolean32 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration33 = mutableInterval20.toDuration();
        boolean boolean34 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval20.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod36, (org.joda.time.ReadableInstant) dateTime45);
        mutableInterval20.setEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime55 = mutableInterval20.getEnd();
        boolean boolean56 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Interval interval57 = mutableInterval3.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval57);
    }

    @Test
    @Ignore
  public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(1606267386521L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    @Ignore
  public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        long long21 = mutableInterval9.toDurationMillis();
        mutableInterval9.setDurationAfterStart(1606267341034L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        mutableInterval26.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        mutableInterval32.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology37 = mutableInterval32.getChronology();
        mutableInterval26.setChronology(chronology37);
        mutableInterval9.setChronology(chronology37);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setStartMillis(1606267398993L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1606267295511L + "'", long21 == 1606267295511L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    @Ignore
  public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.toMutableInterval();
        boolean boolean22 = mutableInterval10.equals((java.lang.Object) mutableInterval19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodBeforeEnd(readablePeriod31);
        mutableInterval30.setDurationBeforeEnd((long) 100);
        mutableInterval30.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval30.toMutableInterval();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        long long50 = interval49.getEndMillis();
        boolean boolean52 = interval49.isAfter((long) (byte) 100);
        boolean boolean53 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration54 = mutableInterval41.toDuration();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        mutableInterval78.setPeriodAfterStart(readablePeriod79);
        org.joda.time.Duration duration81 = mutableInterval78.toDuration();
        mutableInterval37.setDurationAfterStart((org.joda.time.ReadableDuration) duration81);
        mutableInterval10.setDurationAfterStart((org.joda.time.ReadableDuration) duration81);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267401822L + "'", long11 == 1606267401822L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(duration81);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((-1L), 1606267322702L);
        boolean boolean3 = mutableInterval2.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    @Ignore
  public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Period period28 = mutableInterval7.toPeriod();
        java.lang.Object obj29 = mutableInterval7.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        long long27 = interval26.getEndMillis();
        boolean boolean29 = interval26.isAfter((long) (byte) 100);
        boolean boolean30 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration31 = mutableInterval18.toDuration();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime52);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableDuration61, readableInstant62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = mutableInterval63.toPeriod(periodType64);
        mutableInterval60.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        boolean boolean67 = mutableInterval60.isAfterNow();
        boolean boolean69 = mutableInterval60.isBefore(1606267307365L);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = mutableInterval60.toPeriod(periodType70);
        mutableInterval9.setPeriodAfterStart((org.joda.time.ReadablePeriod) period71);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        boolean boolean9 = mutableInterval2.isAfterNow();
        boolean boolean11 = mutableInterval2.isBefore(1606267307365L);
        org.joda.time.Duration duration12 = mutableInterval2.toDuration();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        boolean boolean3 = mutableInterval1.isAfter(100L);
        mutableInterval1.setDurationAfterStart(1606267398058L);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    @Ignore
  public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        boolean boolean30 = mutableInterval28.containsNow();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = mutableInterval53.getStart();
        boolean boolean55 = mutableInterval28.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology56 = mutableInterval28.getChronology();
        java.lang.Object obj57 = mutableInterval28.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.Duration duration8 = mutableInterval7.toDuration();
        long long9 = mutableInterval7.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    @Ignore
  public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Interval interval10 = mutableInterval7.toInterval();
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = mutableInterval7.isBefore(readableInterval11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        boolean boolean28 = mutableInterval23.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        mutableInterval16.setChronology(chronology29);
        mutableInterval7.setChronology(chronology29);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(1L, 1606267307365L, chronology29);
        org.joda.time.Chronology chronology33 = mutableInterval32.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(1606267392528L, (long) ' ', chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTime dateTime15 = mutableInterval7.getStart();
        long long16 = mutableInterval7.toDurationMillis();
        boolean boolean17 = mutableInterval7.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    @Ignore
  public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        mutableInterval7.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology12 = mutableInterval7.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval7.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval7.copy();
        org.joda.time.Duration duration15 = mutableInterval7.toDuration();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval20.toMutableInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        long long28 = mutableInterval27.toDurationMillis();
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval20.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        mutableInterval46.setDurationAfterStart((long) (byte) 1);
        boolean boolean51 = mutableInterval46.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        mutableInterval39.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology52);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval20, chronology52);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology52);
        mutableInterval7.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology52);
        org.joda.time.Chronology chronology60 = mutableInterval59.getChronology();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(1606267341941L, 1606267386521L, chronology60);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    @Ignore
  public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        org.joda.time.Interval interval11 = mutableInterval8.toInterval();
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = mutableInterval8.isBefore(readableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology16);
        boolean boolean18 = mutableInterval8.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        boolean boolean38 = interval35.isAfter((long) (byte) 100);
        boolean boolean39 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = mutableInterval27.toDuration();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime61);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        mutableInterval2.setDurationAfterStart((org.joda.time.ReadableDuration) duration40);
        long long68 = mutableInterval2.getStartMillis();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1606267403522L + "'", long68 == 1606267403522L);
    }

    @Test
    @Ignore
  public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval2.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval17.setDurationBeforeEnd((long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval17);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean11 = mutableInterval2.isBefore(1606267296955L);
        long long12 = mutableInterval2.getEndMillis();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        long long6 = mutableInterval2.toDurationMillis();
        boolean boolean8 = mutableInterval2.contains((long) 100);
        long long9 = mutableInterval2.getEndMillis();
        boolean boolean10 = mutableInterval2.isBeforeNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1606267403921L + "'", long9 == 1606267403921L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    @Ignore
  public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        java.lang.String str46 = mutableInterval40.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval50.toMutableInterval();
        boolean boolean58 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval50);
        boolean boolean59 = mutableInterval50.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((java.lang.Object) readablePeriod41);
        long long44 = mutableInterval43.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        long long5 = mutableInterval4.getEndMillis();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval4.copy();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableDuration7, readableInstant8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = mutableInterval9.toPeriod(periodType10);
        mutableInterval4.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = mutableInterval4.getStart();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean20 = mutableInterval17.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval17.copy();
        boolean boolean22 = mutableInterval4.equals((java.lang.Object) mutableInterval21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableInterval4.setDurationBeforeEnd(readableDuration23);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        mutableInterval32.setChronology(chronology45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(1606267329251L, 1606267336388L, chronology45);
        mutableInterval4.setChronology(chronology45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(1606267390091L, 0L, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1606267404113L + "'", long5 == 1606267404113L);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    @Ignore
  public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        boolean boolean27 = interval26.containsNow();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        mutableInterval30.setDurationBeforeEnd(1L);
        boolean boolean33 = mutableInterval30.isAfterNow();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(obj39, chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableInterval41.setPeriodBeforeEnd(readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        long long56 = interval55.getEndMillis();
        boolean boolean58 = interval55.isAfter((long) (byte) 100);
        boolean boolean59 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = mutableInterval47.toDuration();
        boolean boolean61 = mutableInterval41.isBefore((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval47.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(readableInstant64, readablePeriod65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        mutableInterval66.setInterval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(readablePeriod63, (org.joda.time.ReadableInstant) dateTime72);
        mutableInterval47.setEnd((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean82 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.DateTime dateTime83 = mutableInterval47.getEnd();
        boolean boolean84 = interval26.contains((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval85 = interval26.toMutableInterval();
        boolean boolean86 = mutableInterval85.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        long long6 = mutableInterval3.getEndMillis();
        org.joda.time.Interval interval7 = mutableInterval3.toInterval();
        java.lang.Class<?> wildcardClass8 = mutableInterval3.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    @Ignore
  public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology17);
        boolean boolean19 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        long long32 = interval31.getEndMillis();
        boolean boolean34 = interval31.isAfter((long) (byte) 100);
        boolean boolean35 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) interval31);
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        mutableInterval40.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        long long49 = interval48.getEndMillis();
        boolean boolean51 = interval48.isAfter((long) (byte) 100);
        boolean boolean52 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration53 = mutableInterval40.toDuration();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        long long66 = interval65.getEndMillis();
        boolean boolean68 = interval65.isAfter((long) (byte) 100);
        boolean boolean69 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Duration duration70 = mutableInterval57.toDuration();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(readableInstant77, readablePeriod78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(0L, 1L, chronology88);
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        org.joda.time.DateTime dateTime91 = mutableInterval89.getStart();
        mutableInterval79.setInterval((org.joda.time.ReadableInstant) dateTime85, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime91);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        mutableInterval18.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        long long15 = interval4.getStartMillis();
        org.joda.time.Period period16 = interval4.toPeriod();
        boolean boolean17 = interval4.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    @Ignore
  public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj6);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        long long6 = mutableInterval3.getEndMillis();
        boolean boolean8 = mutableInterval3.isBefore(1606267320326L);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        boolean boolean28 = mutableInterval23.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        mutableInterval16.setChronology(chronology29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology29);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology29);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(obj38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Period period43 = mutableInterval40.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readablePeriod45, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readablePeriod44, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(readableInstant64, readablePeriod65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        mutableInterval66.setInterval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period43, (org.joda.time.ReadableInstant) dateTime72);
        boolean boolean82 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) dateTime72);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    @Ignore
  public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodAfterStart(readablePeriod37);
        org.joda.time.Period period39 = mutableInterval36.toPeriod();
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval36.copy();
        boolean boolean41 = mutableInterval14.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        boolean boolean42 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean44 = mutableInterval7.isAfter(1606267379637L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(obj50, chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutableInterval52.setPeriodBeforeEnd(readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        mutableInterval58.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        long long67 = interval66.getEndMillis();
        boolean boolean69 = interval66.isAfter((long) (byte) 100);
        boolean boolean70 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration71 = mutableInterval58.toDuration();
        boolean boolean72 = mutableInterval52.isBefore((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.MutableInterval mutableInterval73 = mutableInterval58.toMutableInterval();
        boolean boolean74 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    @Ignore
  public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval5.isAfterNow();
        java.lang.String str8 = mutableInterval5.toString();
        org.joda.time.Chronology chronology9 = mutableInterval5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(1606267390091L, 1606267386521L, chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str8, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267389616L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Duration duration12 = mutableInterval3.toDuration();
        java.lang.Class<?> wildcardClass13 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean84 = mutableInterval81.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableDuration89, readableInstant90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = mutableInterval91.toPeriod(periodType92);
        mutableInterval88.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval85.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = mutableInterval76.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Interval interval97 = mutableInterval85.toInterval();
        boolean boolean98 = interval97.isAfterNow();
        long long99 = interval97.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(interval97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    @Ignore
  public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        mutableInterval7.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology12 = mutableInterval7.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval7.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval7.copy();
        org.joda.time.Duration duration15 = mutableInterval7.toDuration();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval20.toMutableInterval();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        long long28 = mutableInterval27.toDurationMillis();
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval20.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        mutableInterval46.setDurationAfterStart((long) (byte) 1);
        boolean boolean51 = mutableInterval46.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        mutableInterval39.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology52);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval20, chronology52);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology52);
        mutableInterval7.setChronology(chronology52);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) 0, 1606267318729L, chronology52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((long) 'a', (long) (byte) 1, chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    @Ignore
  public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        mutableInterval7.setDurationBeforeEnd((long) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean71 = mutableInterval69.isBefore((long) (byte) 1);
        boolean boolean72 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.MutableInterval mutableInterval73 = mutableInterval69.toMutableInterval();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval73.setStartMillis(1606267389234L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mutableInterval73);
    }

    @Test
    @Ignore
  public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1L, 1606267307365L, chronology27);
        long long31 = mutableInterval30.getStartMillis();
        mutableInterval30.setEndMillis(1606267401822L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((java.lang.Object) period9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267406716L + "'", long3 == 1606267406716L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:23:20.050Z/2020-11-25T01:23:20.050Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        boolean boolean7 = interval4.isAfter((long) (byte) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        boolean boolean23 = mutableInterval18.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        mutableInterval11.setChronology(chronology24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval11.toPeriod(periodType26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        mutableInterval31.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        long long40 = interval39.getEndMillis();
        boolean boolean42 = interval39.isAfter((long) (byte) 100);
        boolean boolean43 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration44 = mutableInterval31.toDuration();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        mutableInterval53.setInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        mutableInterval72.setDurationAfterStart((long) (byte) 1);
        mutableInterval72.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        java.lang.Object obj89 = mutableInterval87.clone();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(obj89, chronology90);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        mutableInterval91.setPeriodAfterStart(readablePeriod92);
        org.joda.time.Period period94 = mutableInterval91.toPeriod();
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadablePeriod) period94);
        boolean boolean96 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableInterval mutableInterval98 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime83);
        boolean boolean99 = interval4.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    @Ignore
  public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 1, 1606267295546L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        java.lang.Object obj8 = mutableInterval6.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableInterval10.setPeriodBeforeEnd(readablePeriod11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Interval interval35 = mutableInterval32.toInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = mutableInterval32.isBefore(readableInterval36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology40);
        boolean boolean42 = mutableInterval32.isAfter((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) dateTime48);
        mutableInterval10.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    @Ignore
  public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        java.lang.String str6 = mutableInterval2.toString();
        long long7 = mutableInterval2.getStartMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        long long20 = interval19.getEndMillis();
        boolean boolean22 = interval19.isAfter((long) (byte) 100);
        boolean boolean23 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Duration duration24 = mutableInterval11.toDuration();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        java.lang.Object obj60 = mutableInterval58.clone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(obj60, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodAfterStart(readablePeriod63);
        org.joda.time.Period period65 = mutableInterval62.toPeriod();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(obj72, chronology73);
        org.joda.time.Duration duration75 = mutableInterval74.toDuration();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        org.joda.time.Interval interval84 = mutableInterval81.toInterval();
        org.joda.time.ReadableInterval readableInterval85 = null;
        boolean boolean86 = mutableInterval81.isBefore(readableInterval85);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology89);
        boolean boolean91 = mutableInterval81.isAfter((org.joda.time.ReadableInterval) mutableInterval90);
        org.joda.time.Interval interval92 = mutableInterval81.toInterval();
        org.joda.time.Period period93 = mutableInterval81.toPeriod();
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) period93);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval94);
        mutableInterval2.setDurationBeforeEnd(1606267377857L);
        org.junit.Assert.assertNotNull(mutableInterval5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2020-11-25T01:23:27.359Z/2020-11-25T01:23:27.360Z" + "'", str6, "2020-11-25T01:23:27.359Z/2020-11-25T01:23:27.360Z");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1606267407359L + "'", long7 == 1606267407359L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    @Ignore
  public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval5.getStart();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Interval interval14 = mutableInterval11.toInterval();
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = mutableInterval11.isBefore(readableInterval15);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval11.copy();
        boolean boolean18 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval11);
        mutableInterval11.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology22 = mutableInterval11.getChronology();
        long long23 = mutableInterval11.toDurationMillis();
        mutableInterval11.setDurationAfterStart(1606267341034L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        mutableInterval28.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        mutableInterval34.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology39 = mutableInterval34.getChronology();
        mutableInterval28.setChronology(chronology39);
        mutableInterval11.setChronology(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(1606267403522L, 1606267387899L, chronology39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1606267295511L + "'", long23 == 1606267295511L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    @Ignore
  public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Interval interval37 = mutableInterval34.toInterval();
        mutableInterval34.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval34.copy();
        boolean boolean41 = mutableInterval30.isBefore((org.joda.time.ReadableInterval) mutableInterval40);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    @Ignore
  public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval3.isAfterNow();
        java.lang.String str6 = mutableInterval3.toString();
        org.joda.time.Chronology chronology7 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        mutableInterval11.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology16 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval11.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval11.copy();
        org.joda.time.Duration duration19 = mutableInterval11.toDuration();
        org.joda.time.DateTime dateTime20 = mutableInterval11.getStart();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodAfterStart(readablePeriod25);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval24.toMutableInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval31.copy();
        org.joda.time.Period period34 = mutableInterval31.toPeriod();
        mutableInterval24.setPeriodAfterStart((org.joda.time.ReadablePeriod) period34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean43 = mutableInterval40.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval44 = mutableInterval40.copy();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableDuration48, readableInstant49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = mutableInterval50.toPeriod(periodType51);
        mutableInterval47.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        mutableInterval44.setPeriodAfterStart((org.joda.time.ReadablePeriod) period52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) period52);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str6, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(1606267330633L, 0L, chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    @Ignore
  public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        boolean boolean38 = mutableInterval33.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        mutableInterval26.setChronology(chronology39);
        mutableInterval26.setEndMillis((long) '#');
        org.joda.time.Duration duration43 = mutableInterval26.toDuration();
        org.joda.time.Duration duration44 = mutableInterval26.toDuration();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Interval interval51 = mutableInterval48.toInterval();
        boolean boolean53 = interval51.contains(1606267341941L);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        mutableInterval62.setInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = mutableInterval76.getStart();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getEnd();
        boolean boolean79 = interval51.contains((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime78);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    @Ignore
  public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.Duration duration13 = mutableInterval5.toDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval18, chronology50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology50);
        mutableInterval5.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) 0, 1606267318729L, chronology50);
        long long58 = mutableInterval57.toDurationMillis();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1606267318729L + "'", long58 == 1606267318729L);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setDurationBeforeEnd(0L);
        long long11 = mutableInterval3.toDurationMillis();
        org.joda.time.Period period12 = mutableInterval3.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    @Ignore
  public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        java.lang.Object obj58 = mutableInterval57.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        long long18 = mutableInterval3.getEndMillis();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        boolean boolean38 = mutableInterval33.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        mutableInterval26.setChronology(chronology39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology39);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(obj48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableInterval50.setPeriodAfterStart(readablePeriod51);
        org.joda.time.Period period53 = mutableInterval50.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readablePeriod55, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readablePeriod54, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period53, (org.joda.time.ReadableInstant) dateTime82);
        boolean boolean92 = mutableInterval42.isBefore((org.joda.time.ReadableInstant) dateTime82);
        mutableInterval42.setInterval(1L, (long) '#');
        boolean boolean96 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267408494L + "'", long18 == 1606267408494L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    @Ignore
  public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval4.getStart();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval10.copy();
        boolean boolean17 = mutableInterval4.contains((org.joda.time.ReadableInterval) mutableInterval10);
        mutableInterval10.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology21 = mutableInterval10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((java.lang.Object) 1606267378516L, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    @Ignore
  public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        long long30 = mutableInterval3.getStartMillis();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = mutableInterval40.isBefore(readableInterval44);
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval40.copy();
        boolean boolean47 = mutableInterval34.contains((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology51 = mutableInterval40.getChronology();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology51);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    @Ignore
  public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval12.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval31);
    }

    @Test
    @Ignore
  public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Interval interval51 = mutableInterval48.toInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = mutableInterval48.isBefore(readableInterval52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology56);
        boolean boolean58 = mutableInterval48.isAfter((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        boolean boolean65 = mutableInterval48.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period66 = mutableInterval48.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period66);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    @Ignore
  public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean22 = mutableInterval3.contains((long) '4');
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableInstant25, readablePeriod26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        mutableInterval27.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readablePeriod24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readablePeriod23, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime51);
        boolean boolean60 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime51);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(1606267394045L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean10 = mutableInterval2.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    @Ignore
  public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        long long34 = mutableInterval12.toDurationMillis();
        boolean boolean35 = mutableInterval12.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    @Ignore
  public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval7.copy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime36 = mutableInterval11.getEnd();
        boolean boolean37 = mutableInterval11.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    @Ignore
  public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        boolean boolean53 = mutableInterval48.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        mutableInterval57.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology62 = mutableInterval57.getChronology();
        mutableInterval48.setChronology(chronology62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology62);
        mutableInterval3.setEndMillis(1606267375359L);
        mutableInterval3.setStartMillis(1606267295511L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    @Ignore
  public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        mutableInterval31.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        long long40 = interval39.getEndMillis();
        boolean boolean42 = interval39.isAfter((long) (byte) 100);
        boolean boolean43 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration44 = mutableInterval31.toDuration();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        mutableInterval53.setInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime65);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean71 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj72 = mutableInterval14.clone();
        long long73 = mutableInterval14.getEndMillis();
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
    }

    @Test
    @Ignore
  public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        java.lang.String str7 = interval6.toString();
        boolean boolean9 = interval6.isBefore((long) '#');
        boolean boolean10 = interval6.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str7, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 10, 1606267380977L);
    }

    @Test
    @Ignore
  public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval12.containsNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval12.setDurationAfterStart((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        mutableInterval49.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        mutableInterval49.setEnd(readableInstant53);
        mutableInterval49.setDurationBeforeEnd(0L);
        long long57 = mutableInterval49.toDurationMillis();
        boolean boolean58 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.MutableInterval mutableInterval60 = org.joda.time.MutableInterval.parse("2020-11-25T01:21:52.702Z/2020-11-25T01:21:52.703Z");
        boolean boolean61 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval60);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    @Ignore
  public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        mutableInterval16.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        long long24 = mutableInterval23.toDurationMillis();
        mutableInterval16.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval16.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        mutableInterval35.setChronology(chronology48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology48);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval16, chronology48);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology48);
        mutableInterval3.setChronology(chronology48);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        mutableInterval58.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        org.joda.time.Interval interval68 = mutableInterval65.toInterval();
        org.joda.time.ReadableInterval readableInterval69 = null;
        boolean boolean70 = mutableInterval65.isBefore(readableInterval69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology73);
        boolean boolean75 = mutableInterval65.isAfter((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        boolean boolean82 = mutableInterval65.isBefore((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = mutableInterval58.contains((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval58);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    @Ignore
  public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        long long18 = mutableInterval3.getEndMillis();
        mutableInterval3.setStartMillis(1606267383991L);
        boolean boolean21 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267410092L + "'", long18 == 1606267410092L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    @Ignore
  public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((java.lang.Object) chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    @Ignore
  public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        long long30 = mutableInterval3.getStartMillis();
        java.lang.Object obj31 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    @Ignore
  public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean15 = mutableInterval12.isBefore(1606267318729L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = mutableInterval19.isBefore(readableInterval23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology27);
        boolean boolean29 = mutableInterval19.isAfter((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        long long36 = mutableInterval33.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readableInstant39, readablePeriod40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        mutableInterval41.setInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readablePeriod38, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readablePeriod37, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readableInstant57, readablePeriod58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        mutableInterval59.setInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean74 = mutableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        boolean boolean83 = mutableInterval78.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        java.lang.Object obj89 = mutableInterval87.clone();
        mutableInterval87.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology92 = mutableInterval87.getChronology();
        mutableInterval78.setChronology(chronology92);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval33, chronology92);
        mutableInterval19.setChronology(chronology92);
        boolean boolean96 = mutableInterval12.contains((org.joda.time.ReadableInterval) mutableInterval19);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    @Ignore
  public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval25.toPeriod(periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj42 = mutableInterval40.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267410506L + "'", long31 == 1606267410506L);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "2020-11-25T01:23:30.506Z/2020-11-25T01:23:30.506Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "2020-11-25T01:23:30.506Z/2020-11-25T01:23:30.506Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "2020-11-25T01:23:30.506Z/2020-11-25T01:23:30.506Z");
    }

    @Test
    @Ignore
  public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = mutableInterval3.toPeriod(periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        boolean boolean11 = mutableInterval8.isAfterNow();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(obj17, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableInterval19.setPeriodBeforeEnd(readablePeriod20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        long long34 = interval33.getEndMillis();
        boolean boolean36 = interval33.isAfter((long) (byte) 100);
        boolean boolean37 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration38 = mutableInterval25.toDuration();
        boolean boolean39 = mutableInterval19.isBefore((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval25.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readablePeriod41, (org.joda.time.ReadableInstant) dateTime50);
        mutableInterval25.setEnd((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean60 = mutableInterval8.contains((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.DateTime dateTime61 = mutableInterval25.getEnd();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        java.lang.Object obj68 = mutableInterval66.clone();
        java.lang.Object obj69 = mutableInterval66.clone();
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval66.copy();
        org.joda.time.Duration duration71 = mutableInterval66.toDuration();
        mutableInterval62.setDurationAfterStart((org.joda.time.ReadableDuration) duration71);
        long long73 = mutableInterval62.toDurationMillis();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        java.lang.Object obj80 = mutableInterval77.clone();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval77.copy();
        org.joda.time.DateTime dateTime82 = mutableInterval77.getStart();
        boolean boolean83 = mutableInterval62.contains((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(readableDuration0, (org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    @Ignore
  public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.copy();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.Duration duration83 = mutableInterval81.toDuration();
        boolean boolean85 = mutableInterval81.contains(1606267333019L);
        mutableInterval81.setInterval(1606267390858L, 1606267408340L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    @Ignore
  public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        long long18 = mutableInterval3.getStartMillis();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        mutableInterval29.setDurationAfterStart((long) (byte) 1);
        boolean boolean34 = mutableInterval29.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval22.setChronology(chronology35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(obj42, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodAfterStart(readablePeriod45);
        org.joda.time.Period period47 = mutableInterval44.toPeriod();
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval44.copy();
        boolean boolean49 = mutableInterval22.isAfter((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(obj55, chronology56);
        boolean boolean58 = mutableInterval22.equals((java.lang.Object) mutableInterval57);
        boolean boolean59 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableInterval3.isAfter(readableInstant60);
        long long62 = mutableInterval3.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
    }

    @Test
    @Ignore
  public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        java.lang.Object obj41 = mutableInterval38.clone();
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval38.copy();
        org.joda.time.Duration duration43 = mutableInterval38.toDuration();
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Interval interval45 = mutableInterval34.toInterval();
        boolean boolean46 = interval45.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean84 = mutableInterval81.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableDuration89, readableInstant90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = mutableInterval91.toPeriod(periodType92);
        mutableInterval88.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval85.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = mutableInterval76.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.MutableInterval mutableInterval97 = mutableInterval76.copy();
        mutableInterval97.setDurationAfterStart(1606267371811L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(mutableInterval97);
    }

    @Test
    @Ignore
  public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        boolean boolean30 = mutableInterval28.containsNow();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = mutableInterval53.getStart();
        boolean boolean55 = mutableInterval28.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology56 = mutableInterval28.getChronology();
        boolean boolean57 = mutableInterval28.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:10.633Z/2020-11-25T01:22:10.634Z");
        org.joda.time.Interval interval2 = mutableInterval1.toInterval();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval2);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readablePeriod46, (org.joda.time.ReadableInstant) dateTime52);
        mutableInterval40.setStart((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableInterval40.setDurationBeforeEnd(readableDuration55);
        org.joda.time.Chronology chronology57 = mutableInterval40.getChronology();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    @Ignore
  public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval9 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Interval interval16 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        boolean boolean23 = interval16.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        boolean boolean24 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval20.toMutableInterval();
        boolean boolean26 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval20.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodBeforeEnd(readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        boolean boolean56 = mutableInterval36.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval42.toMutableInterval();
        java.lang.String str58 = mutableInterval57.toString();
        boolean boolean59 = mutableInterval57.containsNow();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readableInstant66, readablePeriod67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        mutableInterval68.setInterval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime83 = mutableInterval82.getStart();
        boolean boolean84 = mutableInterval57.contains((org.joda.time.ReadableInstant) dateTime83);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval20.setEnd((org.joda.time.ReadableInstant) dateTime83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str58, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267402689L, 1606267402582L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getStart();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        mutableInterval48.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology53 = mutableInterval48.getChronology();
        mutableInterval39.setChronology(chronology53);
        mutableInterval33.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology53);
        java.lang.Class<?> wildcardClass57 = mutableInterval56.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        boolean boolean6 = mutableInterval5.containsNow();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        mutableInterval10.setInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean25 = mutableInterval5.isAfter((org.joda.time.ReadableInstant) dateTime16);
        boolean boolean27 = mutableInterval5.isAfter(1606267320326L);
        mutableInterval5.setStartMillis(1606267380446L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    @Ignore
  public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    @Ignore
  public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.Duration duration8 = mutableInterval7.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readableInstant50, readablePeriod51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        mutableInterval52.setInterval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime81);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    @Ignore
  public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        org.joda.time.Interval interval11 = mutableInterval8.toInterval();
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = mutableInterval8.isBefore(readableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology16);
        boolean boolean18 = mutableInterval8.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean19 = mutableInterval17.isAfterNow();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean22 = mutableInterval3.isBefore(1606267387899L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    @Ignore
  public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval2.copy();
        long long18 = mutableInterval17.getEndMillis();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267412186L + "'", long18 == 1606267412186L);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = mutableInterval22.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    @Ignore
  public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        long long78 = mutableInterval40.getStartMillis();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        mutableInterval82.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(0L, 1L, chronology88);
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        mutableInterval89.setDurationAfterStart((long) (byte) 1);
        boolean boolean94 = mutableInterval89.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology95 = mutableInterval89.getChronology();
        mutableInterval82.setChronology(chronology95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((java.lang.Object) long78, chronology95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    @Ignore
  public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Period period36 = mutableInterval34.toPeriod();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        mutableInterval40.setDurationBeforeEnd(0L);
        boolean boolean47 = mutableInterval40.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        mutableInterval50.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval50.toMutableInterval();
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean55 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval40.setEndMillis(1606267337871L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval9.getEnd();
        boolean boolean11 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = mutableInterval2.contains(1606267389296L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267412766L + "'", long3 == 1606267412766L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    @Ignore
  public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval9.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        mutableInterval5.setInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod24, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readableInstant44, readablePeriod45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        org.joda.time.DateTime dateTime58 = mutableInterval56.getStart();
        mutableInterval46.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime61 = mutableInterval60.getStart();
        mutableInterval60.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean65 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        java.lang.Object obj71 = mutableInterval69.clone();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(obj71, chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        mutableInterval73.setPeriodBeforeEnd(readablePeriod74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        mutableInterval79.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        long long88 = interval87.getEndMillis();
        boolean boolean90 = interval87.isAfter((long) (byte) 100);
        boolean boolean91 = mutableInterval79.overlaps((org.joda.time.ReadableInterval) interval87);
        org.joda.time.Duration duration92 = mutableInterval79.toDuration();
        boolean boolean93 = mutableInterval73.isBefore((org.joda.time.ReadableInterval) mutableInterval79);
        org.joda.time.MutableInterval mutableInterval94 = mutableInterval79.toMutableInterval();
        java.lang.String str95 = mutableInterval94.toString();
        java.lang.String str96 = mutableInterval94.toString();
        boolean boolean97 = mutableInterval60.isBefore((org.joda.time.ReadableInterval) mutableInterval94);
        org.joda.time.Duration duration98 = mutableInterval94.toDuration();
        org.joda.time.MutableInterval mutableInterval99 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration98);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str95, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str96, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    @Ignore
  public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        java.lang.String str46 = mutableInterval40.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval50.toMutableInterval();
        boolean boolean58 = mutableInterval40.contains((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.DateTime dateTime59 = mutableInterval50.getEnd();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval50.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str46, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableInterval60);
    }

    @Test
    @Ignore
  public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        long long8 = mutableInterval7.getStartMillis();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        long long15 = mutableInterval12.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean53 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        boolean boolean62 = mutableInterval57.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        java.lang.Object obj68 = mutableInterval66.clone();
        mutableInterval66.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology71 = mutableInterval66.getChronology();
        mutableInterval57.setChronology(chronology71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology71);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7, chronology71);
        org.joda.time.MutableInterval mutableInterval75 = mutableInterval7.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableInterval75);
    }

    @Test
    @Ignore
  public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Interval interval25 = mutableInterval22.toInterval();
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = mutableInterval22.isBefore(readableInterval26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology30);
        boolean boolean32 = mutableInterval22.isAfter((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Interval interval33 = mutableInterval22.toInterval();
        org.joda.time.Period period34 = mutableInterval22.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readablePeriod41, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        mutableInterval62.setInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime77 = mutableInterval76.getStart();
        mutableInterval76.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean81 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval76);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(readablePeriod82, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval76.setStart((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval91);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    @Ignore
  public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean11 = mutableInterval2.isBefore(1606267296955L);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableInstant12, readablePeriod13);
        mutableInterval14.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval14.toMutableInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval17.getEnd();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval17.toMutableInterval();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Interval interval52 = mutableInterval49.toInterval();
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = mutableInterval49.isBefore(readableInterval53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology57);
        boolean boolean59 = mutableInterval49.isAfter((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        boolean boolean66 = mutableInterval49.isBefore((org.joda.time.ReadableInstant) dateTime65);
        mutableInterval27.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        mutableInterval71.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        long long80 = interval79.getEndMillis();
        boolean boolean82 = interval79.isAfter((long) (byte) 100);
        boolean boolean83 = mutableInterval71.overlaps((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Duration duration84 = mutableInterval71.toDuration();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration84);
        boolean boolean86 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime38);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    @Ignore
  public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        mutableInterval12.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        mutableInterval50.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval50.toMutableInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        long long58 = mutableInterval57.toDurationMillis();
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Duration duration60 = mutableInterval57.toDuration();
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval7.setDurationAfterStart(0L);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(duration60);
    }

    @Test
    @Ignore
  public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        long long26 = mutableInterval25.getEndMillis();
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval25.copy();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableDuration28, readableInstant29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = mutableInterval30.toPeriod(periodType31);
        mutableInterval25.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        java.lang.Object obj40 = mutableInterval38.clone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(obj40, chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval42.setPeriodBeforeEnd(readablePeriod43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Interval interval67 = mutableInterval64.toInterval();
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = mutableInterval64.isBefore(readableInterval68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology72);
        boolean boolean74 = mutableInterval64.isAfter((org.joda.time.ReadableInterval) mutableInterval73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        boolean boolean81 = mutableInterval64.isBefore((org.joda.time.ReadableInstant) dateTime80);
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime80);
        boolean boolean83 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean84 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology85 = mutableInterval20.getChronology();
        mutableInterval17.setChronology(chronology85);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1606267414091L + "'", long26 == 1606267414091L);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        org.joda.time.Interval interval74 = mutableInterval72.toInterval();
        boolean boolean76 = mutableInterval72.isAfter(1606267379637L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval9.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        mutableInterval5.setInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str20 = mutableInterval2.toString();
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2020-11-25T01:23:34.426Z/2020-11-25T01:23:34.426Z" + "'", str20, "2020-11-25T01:23:34.426Z/2020-11-25T01:23:34.426Z");
    }

    @Test
    @Ignore
  public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        mutableInterval31.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        long long40 = interval39.getEndMillis();
        boolean boolean42 = interval39.isAfter((long) (byte) 100);
        boolean boolean43 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration44 = mutableInterval31.toDuration();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        mutableInterval53.setInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime65);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval14);
        boolean boolean71 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj72 = mutableInterval14.clone();
        java.lang.Object obj73 = mutableInterval14.clone();
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(obj13, chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableInterval15.setPeriodBeforeEnd(readablePeriod16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        boolean boolean47 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        boolean boolean54 = mutableInterval37.isBefore((org.joda.time.ReadableInstant) dateTime53);
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration72);
        boolean boolean74 = mutableInterval7.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        long long87 = interval86.getEndMillis();
        boolean boolean89 = interval86.isAfter((long) (byte) 100);
        boolean boolean90 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) interval86);
        long long91 = mutableInterval78.toDurationMillis();
        org.joda.time.DateTime dateTime92 = mutableInterval78.getStart();
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L + "'", long91 == 1L);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    @Ignore
  public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        java.lang.Object obj43 = mutableInterval40.clone();
        org.joda.time.MutableInterval mutableInterval44 = mutableInterval40.copy();
        org.joda.time.DateTime dateTime45 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Interval interval54 = mutableInterval51.toInterval();
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = mutableInterval51.isBefore(readableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        mutableInterval60.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        mutableInterval67.setDurationAfterStart((long) (byte) 1);
        boolean boolean72 = mutableInterval67.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology73 = mutableInterval67.getChronology();
        mutableInterval60.setChronology(chronology73);
        mutableInterval51.setChronology(chronology73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(1L, 1606267307365L, chronology73);
        mutableInterval40.setChronology(chronology73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) dateTime36, chronology73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Duration duration5 = interval4.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    @Ignore
  public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Period period6 = mutableInterval2.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, readableInstant45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(obj52, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodBeforeEnd(readablePeriod55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readableInstant57, readablePeriod58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        mutableInterval59.setInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        org.joda.time.Interval interval79 = mutableInterval76.toInterval();
        org.joda.time.ReadableInterval readableInterval80 = null;
        boolean boolean81 = mutableInterval76.isBefore(readableInterval80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology84);
        boolean boolean86 = mutableInterval76.isAfter((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        org.joda.time.DateTime dateTime92 = mutableInterval90.getStart();
        boolean boolean93 = mutableInterval76.isBefore((org.joda.time.ReadableInstant) dateTime92);
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime92);
        boolean boolean95 = mutableInterval46.contains((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        mutableInterval5.setChronology(chronology18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology18);
        boolean boolean21 = mutableInterval20.isBeforeNow();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getEnd();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        mutableInterval26.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        long long35 = interval34.getEndMillis();
        boolean boolean37 = interval34.isAfter((long) (byte) 100);
        boolean boolean38 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Duration duration39 = mutableInterval26.toDuration();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration39);
        mutableInterval57.setInterval(1606267341941L, 1606267387820L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    @Ignore
  public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean38 = mutableInterval7.isBefore(1606267312293L);
        mutableInterval7.setStartMillis((long) 0);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval7.toMutableInterval();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval41);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = mutableInterval74.getStart();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean79 = mutableInterval77.equals((java.lang.Object) 1606267408494L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267415410L + "'", long3 == 1606267415410L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    @Ignore
  public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        mutableInterval7.setDurationBeforeEnd(1L);
        boolean boolean10 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTime dateTime60 = mutableInterval24.getEnd();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(obj67, chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutableInterval69.setPeriodBeforeEnd(readablePeriod70);
        mutableInterval69.setDurationBeforeEnd((long) 100);
        mutableInterval69.setStartMillis(1L);
        boolean boolean76 = mutableInterval61.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval61.setStartMillis(1606267390858L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    @Ignore
  public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        boolean boolean40 = mutableInterval35.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Period period52 = mutableInterval49.toPeriod();
        mutableInterval35.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        boolean boolean74 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period52, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        java.lang.Object obj83 = mutableInterval80.clone();
        org.joda.time.MutableInterval mutableInterval84 = mutableInterval80.copy();
        java.lang.Object obj85 = mutableInterval84.clone();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(readableInstant86, readablePeriod87);
        mutableInterval88.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval91 = mutableInterval88.toMutableInterval();
        org.joda.time.Period period92 = mutableInterval88.toPeriod();
        mutableInterval84.setPeriodAfterStart((org.joda.time.ReadablePeriod) period92);
        mutableInterval76.setPeriodAfterStart((org.joda.time.ReadablePeriod) period92);
        boolean boolean96 = mutableInterval76.isBefore(1606267337871L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        mutableInterval28.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        boolean boolean40 = mutableInterval35.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        mutableInterval28.setChronology(chronology41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology41);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((java.lang.Object) interval22, chronology41);
        mutableInterval3.setChronology(chronology41);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = mutableInterval19.toPeriod(periodType20);
        boolean boolean23 = mutableInterval19.contains(1606267380604L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    @Ignore
  public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        long long27 = interval26.getEndMillis();
        boolean boolean29 = interval26.isAfter((long) (byte) 100);
        boolean boolean30 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration31 = mutableInterval18.toDuration();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime52);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        long long58 = mutableInterval9.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
    }

    @Test
    @Ignore
  public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.copy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = mutableInterval12.toPeriod(periodType13);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology54);
        boolean boolean56 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        boolean boolean63 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime62);
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Chronology chronology67 = mutableInterval2.getChronology();
        boolean boolean69 = mutableInterval2.contains(1606267390283L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267416358L + "'", long8 == 1606267416358L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Period period13 = interval4.toPeriod();
        long long14 = interval4.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100);
        mutableInterval2.setDurationAfterStart(1606267296955L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.copy();
        org.joda.time.ReadableInstant readableInstant6 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval5.setStart(readableInstant6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
    }

    @Test
    @Ignore
  public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        mutableInterval10.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval10.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Duration duration20 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Interval interval27 = mutableInterval24.toInterval();
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval24.isBefore(readableInterval28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology32);
        boolean boolean34 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        boolean boolean41 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean45 = mutableInterval3.contains(1606267322702L);
        org.joda.time.Interval interval46 = mutableInterval3.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean8 = mutableInterval5.contains((long) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        mutableInterval43.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        long long52 = interval51.getEndMillis();
        boolean boolean54 = interval51.isAfter((long) (byte) 100);
        boolean boolean55 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration56 = mutableInterval43.toDuration();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        mutableInterval65.setInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration56);
        mutableInterval5.setEnd((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology83 = mutableInterval5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(1606267410092L, (-1L), chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    @Ignore
  public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval17.copy();
        long long22 = mutableInterval17.getEndMillis();
        boolean boolean23 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean25 = mutableInterval7.contains(1606267341941L);
        java.lang.String str26 = mutableInterval7.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str26, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        mutableInterval24.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval24.toMutableInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        long long32 = mutableInterval31.toDurationMillis();
        mutableInterval24.setInterval((org.joda.time.ReadableInterval) mutableInterval31);
        boolean boolean34 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.String str35 = mutableInterval31.toString();
        boolean boolean36 = mutableInterval31.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str35, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime72);
        mutableInterval74.setEndMillis((long) ' ');
        long long77 = mutableInterval74.getStartMillis();
        org.joda.time.Duration duration78 = mutableInterval74.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(duration78);
    }

    @Test
    @Ignore
  public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval12.toPeriod(periodType18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        java.lang.Object obj26 = mutableInterval23.clone();
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval23.copy();
        org.joda.time.Chronology chronology28 = mutableInterval27.getChronology();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((java.lang.Object) periodType18, chronology28);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    @Ignore
  public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        org.joda.time.DateTime dateTime11 = mutableInterval9.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        mutableInterval5.setInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval21 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        boolean boolean35 = interval28.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean36 = mutableInterval21.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval32.toMutableInterval();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = mutableInterval32.toPeriod(periodType38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) period39);
        java.lang.Class<?> wildcardClass41 = mutableInterval40.getClass();
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        boolean boolean5 = mutableInterval2.isAfterNow();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, (long) 0);
        java.lang.Class<?> wildcardClass9 = mutableInterval8.getClass();
        boolean boolean10 = mutableInterval2.equals((java.lang.Object) wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    @Ignore
  public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    @Ignore
  public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval9.getEnd();
        boolean boolean11 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableDuration12, readableInstant13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(obj27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableInterval29.setPeriodAfterStart(readablePeriod30);
        org.joda.time.Period period32 = mutableInterval29.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateTime61);
        mutableInterval14.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        boolean boolean74 = mutableInterval2.contains(1606267337318L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267417651L + "'", long3 == 1606267417651L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    @Ignore
  public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.DateTime dateTime8 = mutableInterval7.getEnd();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = mutableInterval11.toPeriod(periodType12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        long long17 = mutableInterval16.getEndMillis();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        mutableInterval20.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval20.toMutableInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval23.getEnd();
        boolean boolean25 = mutableInterval16.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateTime24);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStart((org.joda.time.ReadableInstant) dateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1606267417700L + "'", long17 == 1606267417700L);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    @Ignore
  public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        org.joda.time.Interval interval11 = mutableInterval8.toInterval();
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = mutableInterval8.isBefore(readableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology16);
        boolean boolean18 = mutableInterval8.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean19 = mutableInterval17.isAfterNow();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Interval interval33 = mutableInterval30.toInterval();
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = mutableInterval30.isBefore(readableInterval34);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval30.copy();
        boolean boolean37 = mutableInterval24.contains((org.joda.time.ReadableInterval) mutableInterval30);
        mutableInterval30.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology41 = mutableInterval30.getChronology();
        boolean boolean42 = mutableInterval30.isBeforeNow();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableInterval46.setPeriodBeforeEnd(readablePeriod47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        mutableInterval51.setInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = mutableInterval46.isAfter((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean66 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(readableInstant73, readablePeriod74);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        org.joda.time.DateTime dateTime87 = mutableInterval85.getStart();
        mutableInterval75.setInterval((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = mutableInterval89.getStart();
        org.joda.time.Duration duration91 = mutableInterval89.toDuration();
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableDuration) duration91);
        boolean boolean93 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        long long17 = interval16.getEndMillis();
        boolean boolean19 = interval16.isAfter((long) (byte) 100);
        boolean boolean20 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration21 = mutableInterval8.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime42);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readablePeriod47, (org.joda.time.ReadableInstant) dateTime53);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableDuration56, readableInstant57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableInterval62.setPeriodBeforeEnd(readablePeriod63);
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval62);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval58);
        boolean boolean67 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval66);
        boolean boolean68 = mutableInterval66.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        long long50 = interval49.getEndMillis();
        boolean boolean52 = interval49.isAfter((long) (byte) 100);
        boolean boolean53 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration54 = mutableInterval41.toDuration();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration54);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology81 = mutableInterval3.getChronology();
        mutableInterval3.setInterval(1606267375359L, 1606267378516L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    @Ignore
  public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = mutableInterval74.getStart();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateTime48);
        java.lang.Object obj78 = mutableInterval77.clone();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267418547L + "'", long3 == 1606267418547L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        mutableInterval44.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval44.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        long long75 = interval74.getEndMillis();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(readableInstant76, readablePeriod77);
        mutableInterval78.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval78.toMutableInterval();
        boolean boolean82 = interval74.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        java.lang.Object obj88 = mutableInterval86.clone();
        org.joda.time.Interval interval89 = mutableInterval86.toInterval();
        org.joda.time.ReadableInterval readableInterval90 = null;
        boolean boolean91 = mutableInterval86.isBefore(readableInterval90);
        org.joda.time.MutableInterval mutableInterval92 = mutableInterval86.copy();
        boolean boolean94 = mutableInterval86.contains(1606267296955L);
        org.joda.time.DateTime dateTime95 = mutableInterval86.getStart();
        java.lang.Object obj96 = mutableInterval86.clone();
        org.joda.time.Duration duration97 = mutableInterval86.toDuration();
        boolean boolean98 = interval74.equals((java.lang.Object) duration97);
        mutableInterval69.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration97);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(mutableInterval92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(obj96);
        org.junit.Assert.assertEquals(obj96.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj96), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj96), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        long long41 = mutableInterval40.toDurationMillis();
        mutableInterval40.setEndMillis(1606267337871L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
    }

    @Test
    @Ignore
  public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Class<?> wildcardClass17 = mutableInterval9.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((java.lang.Object) "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        mutableInterval2.setStartMillis(1L);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval2.copy();
        long long18 = mutableInterval17.getEndMillis();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        boolean boolean24 = mutableInterval21.isAfterNow();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        java.lang.Object obj30 = mutableInterval28.clone();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(obj30, chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutableInterval32.setPeriodBeforeEnd(readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        mutableInterval38.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        long long47 = interval46.getEndMillis();
        boolean boolean49 = interval46.isAfter((long) (byte) 100);
        boolean boolean50 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Duration duration51 = mutableInterval38.toDuration();
        boolean boolean52 = mutableInterval32.isBefore((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval38.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        mutableInterval57.setInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(readablePeriod54, (org.joda.time.ReadableInstant) dateTime63);
        mutableInterval38.setEnd((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean73 = mutableInterval21.contains((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval21.setStart((org.joda.time.ReadableInstant) dateTime82);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval17.setEnd((org.joda.time.ReadableInstant) dateTime82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267419218L + "'", long18 == 1606267419218L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    @Ignore
  public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        mutableInterval12.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableDuration48, readableInstant49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodBeforeEnd(readablePeriod55);
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval54);
        mutableInterval50.setDurationAfterStart(1606267308431L);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readableInstant66, readablePeriod67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        mutableInterval68.setInterval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime80);
        mutableInterval50.setStart((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = mutableInterval84.toPeriod(periodType85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period86, readableInstant87);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    @Ignore
  public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        mutableInterval10.setStartMillis((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        mutableInterval17.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval17.toMutableInterval();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        long long25 = mutableInterval24.toDurationMillis();
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.Duration duration27 = mutableInterval24.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Interval interval34 = mutableInterval31.toInterval();
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = mutableInterval31.isBefore(readableInterval35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology39);
        boolean boolean41 = mutableInterval31.isAfter((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        boolean boolean48 = mutableInterval31.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean51 = mutableInterval6.contains((org.joda.time.ReadableInstant) dateTime47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) dateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean15 = mutableInterval10.isBefore((long) (byte) 10);
        boolean boolean16 = mutableInterval10.isBeforeNow();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267419614L + "'", long11 == 1606267419614L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    @Ignore
  public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Period period36 = mutableInterval34.toPeriod();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Interval interval43 = mutableInterval40.toInterval();
        mutableInterval40.setDurationBeforeEnd(0L);
        boolean boolean47 = mutableInterval40.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        mutableInterval50.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval50.toMutableInterval();
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean55 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) boolean55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    @Ignore
  public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = mutableInterval52.isBefore(readableInterval56);
        org.joda.time.MutableInterval mutableInterval58 = mutableInterval52.copy();
        boolean boolean59 = mutableInterval46.contains((org.joda.time.ReadableInterval) mutableInterval52);
        mutableInterval52.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology63 = mutableInterval52.getChronology();
        boolean boolean64 = mutableInterval52.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        mutableInterval67.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval67.toMutableInterval();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        long long75 = mutableInterval74.toDurationMillis();
        mutableInterval67.setInterval((org.joda.time.ReadableInterval) mutableInterval74);
        boolean boolean77 = mutableInterval52.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = mutableInterval52.toPeriod(periodType78);
        mutableInterval40.setPeriodAfterStart((org.joda.time.ReadablePeriod) period79);
        boolean boolean82 = mutableInterval40.equals((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267414091L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.DateTime dateTime13 = mutableInterval11.getStart();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        mutableInterval16.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        boolean boolean36 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval33);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        mutableInterval40.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval40.toMutableInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        long long48 = mutableInterval47.toDurationMillis();
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Duration duration50 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod58);
        mutableInterval54.setEndMillis((long) 100);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = mutableInterval65.contains((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean91 = mutableInterval54.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval37.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval95 = mutableInterval7.copy();
        boolean boolean97 = mutableInterval7.contains((long) (short) -1);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mutableInterval95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        long long26 = mutableInterval22.getEndMillis();
        mutableInterval22.setDurationAfterStart(1606267392528L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
    }

    @Test
    @Ignore
  public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        mutableInterval6.setDurationAfterStart((long) (byte) 1);
        boolean boolean11 = mutableInterval6.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        long long13 = mutableInterval6.getStartMillis();
        org.joda.time.Duration duration14 = mutableInterval6.toDuration();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        long long27 = interval26.getEndMillis();
        boolean boolean29 = interval26.isAfter((long) (byte) 100);
        boolean boolean30 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration31 = mutableInterval18.toDuration();
        mutableInterval6.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        boolean boolean59 = mutableInterval54.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(obj66, chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableInterval68.setPeriodAfterStart(readablePeriod69);
        org.joda.time.Period period71 = mutableInterval68.toPeriod();
        mutableInterval54.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadablePeriod) period71);
        mutableInterval6.setPeriodAfterStart((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        java.lang.Object obj86 = mutableInterval84.clone();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(obj86, chronology87);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        mutableInterval88.setPeriodAfterStart(readablePeriod89);
        org.joda.time.Period period91 = mutableInterval88.toPeriod();
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadablePeriod) period91);
        org.joda.time.Chronology chronology93 = mutableInterval92.getChronology();
        mutableInterval6.setChronology(chronology93);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval(0L, 1606267385057L, chronology93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((java.lang.Object) 1606267380977L, chronology93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(chronology93);
    }

    @Test
    @Ignore
  public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        mutableInterval2.setDurationBeforeEnd((long) (short) 10);
        boolean boolean15 = mutableInterval2.contains(10L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        boolean boolean42 = mutableInterval37.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        mutableInterval30.setChronology(chronology43);
        mutableInterval21.setChronology(chronology43);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(1L, 1606267307365L, chronology43);
        org.joda.time.Chronology chronology47 = mutableInterval46.getChronology();
        mutableInterval2.setChronology(chronology47);
        boolean boolean49 = mutableInterval2.isAfterNow();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267420326L + "'", long3 == 1606267420326L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        boolean boolean27 = mutableInterval22.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        mutableInterval15.setChronology(chronology28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = mutableInterval15.toPeriod(periodType30);
        mutableInterval9.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        long long33 = mutableInterval9.toDurationMillis();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
    }

    @Test
    @Ignore
  public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = mutableInterval5.toPeriod(periodType6);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        org.joda.time.Interval interval50 = mutableInterval47.toInterval();
        org.joda.time.ReadableInterval readableInterval51 = null;
        boolean boolean52 = mutableInterval47.isBefore(readableInterval51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology55);
        boolean boolean57 = mutableInterval47.isAfter((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.ReadableDuration readableDuration64 = null;
        mutableInterval61.setDurationAfterStart(readableDuration64);
        boolean boolean66 = mutableInterval61.isAfterNow();
        mutableInterval47.setInterval((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime91 = mutableInterval90.getStart();
        boolean boolean93 = mutableInterval90.isBefore((long) (short) 10);
        mutableInterval61.setInterval((org.joda.time.ReadableInterval) mutableInterval90);
        boolean boolean95 = mutableInterval90.isAfterNow();
        long long96 = mutableInterval90.getStartMillis();
        java.lang.String str97 = mutableInterval90.toString();
        org.joda.time.Chronology chronology98 = mutableInterval90.getChronology();
        org.joda.time.MutableInterval mutableInterval99 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval43, chronology98);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str97, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    @Ignore
  public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        mutableInterval27.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology32 = mutableInterval27.getChronology();
        mutableInterval21.setChronology(chronology32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology32);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval34.setStartMillis(1606267416223L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    @Ignore
  public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = mutableInterval9.toPeriod(periodType22);
        boolean boolean25 = mutableInterval9.contains(1606267337318L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    @Ignore
  public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.toMutableInterval();
        java.lang.Object obj82 = mutableInterval74.clone();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Interval interval20 = mutableInterval9.toInterval();
        boolean boolean21 = interval20.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    @Ignore
  public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        boolean boolean11 = mutableInterval3.contains(1606267296955L);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = mutableInterval14.toPeriod(periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        long long20 = mutableInterval19.getEndMillis();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableInstant21, readablePeriod22);
        mutableInterval23.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval23.toMutableInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval26.getEnd();
        boolean boolean28 = mutableInterval19.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodAfterStart(readablePeriod38);
        org.joda.time.Period period40 = mutableInterval37.toPeriod();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodAfterStart(readablePeriod49);
        org.joda.time.Period period51 = mutableInterval48.toPeriod();
        mutableInterval37.setPeriodAfterStart((org.joda.time.ReadablePeriod) period51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period51);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableDuration54, readableInstant55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = mutableInterval56.toPeriod(periodType57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        long long62 = mutableInterval61.getEndMillis();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        mutableInterval65.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval65.toMutableInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval68.getEnd();
        boolean boolean70 = mutableInterval61.isAfter((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(obj77, chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableInterval79.setPeriodAfterStart(readablePeriod80);
        org.joda.time.Period period82 = mutableInterval79.toPeriod();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        java.lang.Object obj88 = mutableInterval86.clone();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(obj88, chronology89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        mutableInterval90.setPeriodAfterStart(readablePeriod91);
        org.joda.time.Period period93 = mutableInterval90.toPeriod();
        mutableInterval79.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadablePeriod) period93);
        mutableInterval3.setInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime97 = mutableInterval3.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period16);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1606267420879L + "'", long20 == 1606267420879L);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period58);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1606267420879L + "'", long62 == 1606267420879L);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    @Ignore
  public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod6);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = mutableInterval3.toPeriod(periodType9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = mutableInterval3.isAfter(readableInterval11);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Chronology chronology52 = mutableInterval49.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7, chronology52);
        boolean boolean54 = mutableInterval7.isBeforeNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    @Ignore
  public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval5.isAfterNow();
        java.lang.String str8 = mutableInterval5.toString();
        org.joda.time.Chronology chronology9 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj1, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((java.lang.Object) (short) 1, chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str8, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    @Ignore
  public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval3.isAfterNow();
        java.lang.String str6 = mutableInterval3.toString();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(readableInstant7, readablePeriod8);
        mutableInterval9.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval9.toMutableInterval();
        org.joda.time.DateTime dateTime13 = mutableInterval12.getEnd();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval12.toMutableInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval14.getStart();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval19.copy();
        org.joda.time.Period period22 = mutableInterval19.toPeriod();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval25.toMutableInterval();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        long long33 = mutableInterval32.toDurationMillis();
        mutableInterval25.setInterval((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.Duration duration35 = mutableInterval32.toDuration();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        org.joda.time.Interval interval42 = mutableInterval39.toInterval();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval39.setPeriodAfterStart(readablePeriod43);
        mutableInterval39.setEndMillis((long) 100);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        boolean boolean74 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = mutableInterval50.contains((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = mutableInterval39.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) period22);
        boolean boolean80 = mutableInterval3.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        java.lang.Object obj89 = mutableInterval87.clone();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(obj89, chronology90);
        org.joda.time.DateTime dateTime92 = mutableInterval91.getEnd();
        boolean boolean93 = mutableInterval83.isBefore((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean94 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str6, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    @Ignore
  public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        boolean boolean32 = mutableInterval27.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        mutableInterval36.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology41 = mutableInterval36.getChronology();
        mutableInterval27.setChronology(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        mutableInterval45.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        mutableInterval51.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology56 = mutableInterval51.getChronology();
        mutableInterval45.setChronology(chronology56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval27, chronology56);
        boolean boolean59 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval58.toMutableInterval();
        mutableInterval60.setDurationBeforeEnd(1606267337871L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mutableInterval60);
    }

    @Test
    @Ignore
  public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        boolean boolean10 = mutableInterval3.containsNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(1606267375359L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        org.joda.time.Duration duration24 = mutableInterval22.toDuration();
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval22.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(mutableInterval25);
    }

    @Test
    @Ignore
  public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodBeforeEnd(readablePeriod31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readableInstant33, readablePeriod34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        mutableInterval35.setInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        org.joda.time.ReadableInterval readableInterval56 = null;
        boolean boolean57 = mutableInterval52.isBefore(readableInterval56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology60);
        boolean boolean62 = mutableInterval52.isAfter((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        boolean boolean69 = mutableInterval52.isBefore((org.joda.time.ReadableInstant) dateTime68);
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(readablePeriod22, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        java.lang.Object obj78 = mutableInterval75.clone();
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval75.copy();
        org.joda.time.Duration duration80 = mutableInterval75.toDuration();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration80);
        boolean boolean82 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime41);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setStartMillis(1606267389616L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    @Ignore
  public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        mutableInterval51.setEndMillis(0L);
        org.joda.time.Interval interval67 = mutableInterval51.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval67);
    }

    @Test
    @Ignore
  public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        long long50 = mutableInterval47.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod52, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean88 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime61);
        java.lang.Object obj90 = mutableInterval89.clone();
        long long91 = mutableInterval89.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    @Ignore
  public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        mutableInterval3.setDurationAfterStart(1606267408494L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
    }

    @Test
    @Ignore
  public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        mutableInterval9.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        boolean boolean21 = mutableInterval16.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        mutableInterval9.setChronology(chronology22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology22);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(obj31, chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableInterval33.setPeriodAfterStart(readablePeriod34);
        org.joda.time.Period period36 = mutableInterval33.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readableInstant39, readablePeriod40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        mutableInterval41.setInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readablePeriod38, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readablePeriod37, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readableInstant57, readablePeriod58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        mutableInterval59.setInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period36, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean75 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime65);
        mutableInterval25.setInterval(1L, (long) '#');
        boolean boolean79 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    @Ignore
  public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        boolean boolean53 = mutableInterval48.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        mutableInterval57.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology62 = mutableInterval57.getChronology();
        mutableInterval48.setChronology(chronology62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology62);
        java.lang.Class<?> wildcardClass65 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    @Ignore
  public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        org.joda.time.Interval interval13 = mutableInterval10.toInterval();
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = mutableInterval10.isBefore(readableInterval14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology18);
        boolean boolean20 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        boolean boolean27 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        mutableInterval31.setDurationBeforeEnd(1L);
        boolean boolean34 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        java.lang.Object obj41 = mutableInterval39.clone();
        mutableInterval39.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology44 = mutableInterval39.getChronology();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        long long57 = interval56.getEndMillis();
        boolean boolean59 = interval56.isAfter((long) (byte) 100);
        boolean boolean60 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration61 = mutableInterval48.toDuration();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readableInstant68, readablePeriod69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        mutableInterval70.setInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime82);
        mutableInterval39.setEnd((org.joda.time.ReadableInstant) dateTime82);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(readableInstant35, (org.joda.time.ReadableInstant) dateTime82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        long long30 = interval29.getEndMillis();
        boolean boolean32 = interval29.isAfter((long) (byte) 100);
        boolean boolean33 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration34 = mutableInterval21.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readablePeriod60, (org.joda.time.ReadableInstant) dateTime66);
        mutableInterval16.setStart((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableInterval8.setDurationAfterStart(readableDuration70);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    @Ignore
  public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.Period period78 = mutableInterval40.toPeriod();
        mutableInterval40.setEndMillis(100L);
        java.lang.Class<?> wildcardClass81 = mutableInterval40.getClass();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.Interval interval4 = mutableInterval2.toInterval();
        long long5 = interval4.getStartMillis();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1606267423797L + "'", long5 == 1606267423797L);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean7 = mutableInterval3.isAfterNow();
        java.lang.Class<?> wildcardClass8 = mutableInterval3.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    @Ignore
  public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.DateTime dateTime13 = mutableInterval11.getStart();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.Interval interval20 = mutableInterval17.toInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = mutableInterval17.isBefore(readableInterval21);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval17.copy();
        boolean boolean24 = mutableInterval11.contains((org.joda.time.ReadableInterval) mutableInterval17);
        mutableInterval17.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology28 = mutableInterval17.getChronology();
        long long29 = mutableInterval17.toDurationMillis();
        mutableInterval17.setDurationAfterStart(1606267341034L);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        mutableInterval40.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology45 = mutableInterval40.getChronology();
        mutableInterval34.setChronology(chronology45);
        mutableInterval17.setChronology(chronology45);
        org.joda.time.DateTime dateTime48 = mutableInterval17.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStart((org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1606267295511L + "'", long29 == 1606267295511L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    @Ignore
  public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval34);
        org.joda.time.Chronology chronology36 = mutableInterval35.getChronology();
        long long37 = mutableInterval35.getEndMillis();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    @Ignore
  public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval17.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
    }

    @Test
    @Ignore
  public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        long long13 = mutableInterval12.getEndMillis();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval12.copy();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = mutableInterval17.toPeriod(periodType18);
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean28 = mutableInterval25.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval12.equals((java.lang.Object) mutableInterval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableInterval12.setDurationBeforeEnd(readableDuration31);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        mutableInterval40.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        boolean boolean52 = mutableInterval47.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        mutableInterval40.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(1606267329251L, 1606267336388L, chronology53);
        mutableInterval12.setChronology(chronology53);
        boolean boolean58 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Interval interval71 = mutableInterval68.toInterval();
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = mutableInterval68.isBefore(readableInterval72);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval68.copy();
        boolean boolean75 = mutableInterval62.contains((org.joda.time.ReadableInterval) mutableInterval68);
        mutableInterval68.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology79 = mutableInterval68.getChronology();
        boolean boolean80 = mutableInterval68.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(readableInstant81, readablePeriod82);
        mutableInterval83.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval83.toMutableInterval();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        long long91 = mutableInterval90.toDurationMillis();
        mutableInterval83.setInterval((org.joda.time.ReadableInterval) mutableInterval90);
        boolean boolean93 = mutableInterval68.isBefore((org.joda.time.ReadableInterval) mutableInterval90);
        org.joda.time.Duration duration94 = mutableInterval90.toDuration();
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration94);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1606267424650L + "'", long13 == 1606267424650L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(mutableInterval86);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L + "'", long91 == 1L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
    }

    @Test
    @Ignore
  public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1L, 1606267307365L, chronology27);
        long long31 = mutableInterval30.getStartMillis();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = mutableInterval30.toPeriod(periodType32);
        java.lang.Class<?> wildcardClass34 = mutableInterval30.getClass();
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    @Ignore
  public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = mutableInterval33.toDuration();
        boolean boolean47 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval33.toMutableInterval();
        java.lang.String str49 = mutableInterval48.toString();
        java.lang.String str50 = mutableInterval48.toString();
        boolean boolean51 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        boolean boolean52 = mutableInterval3.isAfterNow();
        org.joda.time.Duration duration53 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        mutableInterval56.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval56.toMutableInterval();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        long long64 = mutableInterval63.toDurationMillis();
        mutableInterval56.setInterval((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.Duration duration66 = mutableInterval63.toDuration();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        java.lang.Object obj79 = mutableInterval76.clone();
        boolean boolean80 = mutableInterval70.equals((java.lang.Object) mutableInterval76);
        org.joda.time.Interval interval81 = mutableInterval76.toInterval();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(obj87, chronology88);
        org.joda.time.DateTime dateTime90 = mutableInterval89.getEnd();
        boolean boolean91 = interval81.contains((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    @Ignore
  public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval57.isBefore((long) (byte) 1);
        boolean boolean61 = mutableInterval57.isBefore((long) (byte) 100);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = mutableInterval57.toPeriod(periodType62);
        java.lang.Object obj64 = mutableInterval57.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableInterval3.setDurationAfterStart(readableDuration6);
        boolean boolean8 = mutableInterval3.isAfterNow();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean15 = mutableInterval12.contains((long) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        mutableInterval31.setInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = mutableInterval19.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        long long59 = interval58.getEndMillis();
        boolean boolean61 = interval58.isAfter((long) (byte) 100);
        boolean boolean62 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration63 = mutableInterval50.toDuration();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readableInstant70, readablePeriod71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        mutableInterval72.setInterval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration63);
        mutableInterval12.setEnd((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean90 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime28);
        long long91 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        long long31 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    @Ignore
  public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodAfterStart(readablePeriod25);
        org.joda.time.Period period27 = mutableInterval24.toPeriod();
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval24.copy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        mutableInterval32.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology37 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval32.toMutableInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        long long56 = interval55.getEndMillis();
        boolean boolean58 = interval55.isAfter((long) (byte) 100);
        boolean boolean59 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime81);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        boolean boolean87 = mutableInterval24.contains((org.joda.time.ReadableInterval) mutableInterval38);
        boolean boolean88 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval38);
        boolean boolean90 = mutableInterval9.isBefore(1606267408494L);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval9);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    @Ignore
  public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        mutableInterval7.setDurationBeforeEnd((long) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean71 = mutableInterval69.isBefore((long) (byte) 1);
        boolean boolean72 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(readableDuration81, readableInstant82);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Period period85 = mutableInterval83.toPeriod(periodType84);
        mutableInterval80.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period85);
        boolean boolean87 = interval77.contains((org.joda.time.ReadableInterval) mutableInterval80);
        org.joda.time.DateTime dateTime88 = mutableInterval80.getStart();
        mutableInterval69.setEnd((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    @Ignore
  public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = mutableInterval33.toDuration();
        boolean boolean47 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval33.toMutableInterval();
        java.lang.String str49 = mutableInterval48.toString();
        java.lang.String str50 = mutableInterval48.toString();
        boolean boolean51 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        boolean boolean53 = mutableInterval48.isAfter(1606267329404L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    @Ignore
  public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean17 = mutableInterval9.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 1606267419614L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        boolean boolean22 = mutableInterval3.isAfterNow();
        mutableInterval3.setDurationAfterStart(1606267378166L);
        mutableInterval3.setEndMillis(1606267377939L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19);
        boolean boolean23 = mutableInterval21.contains(1606267418547L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    @Ignore
  public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        java.lang.Object obj8 = mutableInterval6.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj8, chronology9);
        org.joda.time.DateTime dateTime11 = mutableInterval10.getEnd();
        boolean boolean12 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = mutableInterval2.contains(1606267371167L);
        boolean boolean16 = mutableInterval2.isAfter(1606267381869L);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        mutableInterval19.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval19.toMutableInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        mutableInterval26.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology31 = mutableInterval26.getChronology();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = mutableInterval26.toPeriod(periodType32);
        mutableInterval19.setPeriodAfterStart((org.joda.time.ReadablePeriod) period33);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period33);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    @Ignore
  public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        long long34 = mutableInterval12.toDurationMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval12.setStartMillis(1606267332913L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267307364L, 1606267386521L);
    }

    @Test
    @Ignore
  public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(readableInstant1, readablePeriod2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval13.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableInterval35.setPeriodAfterStart(readablePeriod36);
        org.joda.time.Period period38 = mutableInterval35.toPeriod();
        mutableInterval21.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadablePeriod) period38);
        mutableInterval40.setDurationAfterStart(1606267419730L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    @Ignore
  public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        mutableInterval44.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval44.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime55);
        mutableInterval69.setInterval(1606267373498L, 1606267380604L);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        java.lang.Object obj84 = mutableInterval82.clone();
        java.lang.Object obj85 = mutableInterval82.clone();
        boolean boolean86 = mutableInterval76.equals((java.lang.Object) mutableInterval82);
        org.joda.time.Interval interval87 = mutableInterval82.toInterval();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(0L, 1L, chronology90);
        org.joda.time.Interval interval92 = mutableInterval91.toInterval();
        java.lang.Object obj93 = mutableInterval91.clone();
        org.joda.time.Chronology chronology94 = null;
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval(obj93, chronology94);
        org.joda.time.DateTime dateTime96 = mutableInterval95.getEnd();
        boolean boolean97 = interval87.contains((org.joda.time.ReadableInstant) dateTime96);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval69.setEnd((org.joda.time.ReadableInstant) dateTime96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertEquals(obj93.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj93), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj93), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    @Ignore
  public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        boolean boolean11 = mutableInterval2.isBefore(1606267296955L);
        java.lang.String str12 = mutableInterval2.toString();
        java.lang.String str13 = mutableInterval2.toString();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z" + "'", str12, "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z" + "'", str13, "1970-01-01T00:00:00.100Z/1970-01-01T00:00:00.100Z");
    }

    @Test
    @Ignore
  public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        long long6 = mutableInterval3.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval21.getStart();
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readablePeriod8, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readablePeriod7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean44 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        boolean boolean53 = mutableInterval48.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        mutableInterval57.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology62 = mutableInterval57.getChronology();
        mutableInterval48.setChronology(chronology62);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology62);
        boolean boolean65 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        mutableInterval25.setDurationBeforeEnd(1L);
        boolean boolean28 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval25);
        boolean boolean30 = mutableInterval22.isBefore((long) (byte) 0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    @Ignore
  public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology17 = mutableInterval12.getChronology();
        mutableInterval3.setChronology(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval21.toMutableInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        long long29 = mutableInterval28.toDurationMillis();
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Duration duration31 = mutableInterval28.toDuration();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = mutableInterval35.isBefore(readableInterval39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology43);
        boolean boolean45 = mutableInterval35.isAfter((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        boolean boolean52 = mutableInterval35.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval3.equals((java.lang.Object) mutableInterval53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        java.lang.Object obj62 = mutableInterval59.clone();
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval59.copy();
        java.lang.Object obj64 = mutableInterval63.clone();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        mutableInterval67.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval67.toMutableInterval();
        org.joda.time.Period period71 = mutableInterval67.toPeriod();
        mutableInterval63.setPeriodAfterStart((org.joda.time.ReadablePeriod) period71);
        mutableInterval53.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period71);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    @Ignore
  public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        java.lang.String str45 = mutableInterval40.toString();
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval40.copy();
        long long47 = mutableInterval46.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str45, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        long long15 = interval4.getStartMillis();
        org.joda.time.Period period16 = interval4.toPeriod();
        boolean boolean17 = interval4.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    @Ignore
  public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod4);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.overlaps(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        long long15 = mutableInterval12.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant18, readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        mutableInterval20.setInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod16, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readableInstant36, readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        mutableInterval38.setInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean53 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        long long66 = interval65.getEndMillis();
        boolean boolean68 = interval65.isAfter((long) (byte) 100);
        boolean boolean69 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readableInstant70, readablePeriod71);
        mutableInterval72.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval75 = mutableInterval72.toMutableInterval();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        long long80 = mutableInterval79.toDurationMillis();
        mutableInterval72.setInterval((org.joda.time.ReadableInterval) mutableInterval79);
        org.joda.time.Duration duration82 = mutableInterval79.toDuration();
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        java.lang.Object obj89 = mutableInterval87.clone();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(obj89, chronology90);
        org.joda.time.DateTime dateTime92 = mutableInterval91.getEnd();
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration82, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime92);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    @Ignore
  public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Interval interval26 = mutableInterval23.toInterval();
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = mutableInterval23.isBefore(readableInterval27);
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval23.copy();
        boolean boolean30 = mutableInterval17.contains((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval23.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology34 = mutableInterval23.getChronology();
        boolean boolean35 = mutableInterval23.isBeforeNow();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval39.setPeriodBeforeEnd(readablePeriod40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readableInstant42, readablePeriod43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        org.joda.time.DateTime dateTime50 = mutableInterval48.getStart();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        mutableInterval44.setInterval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = mutableInterval39.isAfter((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = mutableInterval23.isAfter((org.joda.time.ReadableInstant) dateTime56);
        mutableInterval10.setStart((org.joda.time.ReadableInstant) dateTime56);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval10.setInterval(1606267390283L, 1606267383991L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267428759L + "'", long11 == 1606267428759L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    @Ignore
  public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = mutableInterval10.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        long long50 = interval49.getEndMillis();
        boolean boolean52 = interval49.isAfter((long) (byte) 100);
        boolean boolean53 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration54 = mutableInterval41.toDuration();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readableInstant61, readablePeriod62);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        mutableInterval63.setInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration54);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        java.lang.Object obj86 = mutableInterval84.clone();
        mutableInterval84.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology89 = mutableInterval84.getChronology();
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = mutableInterval84.toPeriod(periodType90);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) period91);
        mutableInterval92.setEndMillis(1606267359834L);
        mutableInterval92.setEndMillis(1606267423797L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    @Ignore
  public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        boolean boolean30 = mutableInterval28.containsNow();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = mutableInterval53.getStart();
        boolean boolean55 = mutableInterval28.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology56 = mutableInterval28.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval28);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    @Ignore
  public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval28.setPeriodAfterStart(readablePeriod29);
        org.joda.time.Period period31 = mutableInterval28.toPeriod();
        mutableInterval14.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = mutableInterval14.isAfterNow();
        boolean boolean34 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        mutableInterval38.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        mutableInterval38.setEnd(readableInstant42);
        mutableInterval38.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = mutableInterval68.getStart();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getEnd();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        mutableInterval74.setDurationAfterStart((long) (byte) 1);
        boolean boolean79 = mutableInterval74.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        java.lang.Object obj85 = mutableInterval83.clone();
        mutableInterval83.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology88 = mutableInterval83.getChronology();
        mutableInterval74.setChronology(chronology88);
        mutableInterval68.setChronology(chronology88);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval38, chronology88);
        boolean boolean92 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) mutableInterval38);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    @Ignore
  public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval28.setPeriodAfterStart(readablePeriod29);
        org.joda.time.Period period31 = mutableInterval28.toPeriod();
        mutableInterval14.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = mutableInterval14.isAfterNow();
        boolean boolean34 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.String str35 = mutableInterval7.toString();
        mutableInterval7.setDurationBeforeEnd(1606267390283L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str35, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime37 = mutableInterval36.getStart();
        org.joda.time.Period period38 = mutableInterval36.toPeriod();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        boolean boolean47 = mutableInterval42.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        mutableInterval51.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology56 = mutableInterval51.getChronology();
        mutableInterval42.setChronology(chronology56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        mutableInterval61.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Interval interval71 = mutableInterval68.toInterval();
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = mutableInterval68.isBefore(readableInterval72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology76);
        boolean boolean78 = mutableInterval68.isAfter((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        boolean boolean85 = mutableInterval68.isBefore((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = mutableInterval42.isAfter((org.joda.time.ReadableInstant) dateTime84);
        boolean boolean88 = mutableInterval36.isAfter((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval89 = mutableInterval36.copy();
        long long90 = mutableInterval36.getEndMillis();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    @Ignore
  public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Interval interval10 = mutableInterval7.toInterval();
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = mutableInterval7.isBefore(readableInterval11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        mutableInterval16.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        mutableInterval23.setDurationAfterStart((long) (byte) 1);
        boolean boolean28 = mutableInterval23.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        mutableInterval16.setChronology(chronology29);
        mutableInterval7.setChronology(chronology29);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(1L, 1606267307365L, chronology29);
        org.joda.time.Chronology chronology33 = mutableInterval32.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(1606267403921L, 1606267394045L, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    @Ignore
  public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.Duration duration29 = mutableInterval28.toDuration();
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        java.lang.Class<?> wildcardClass31 = mutableInterval19.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267383991L, 1606267336460L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        mutableInterval9.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        long long18 = interval17.getEndMillis();
        boolean boolean20 = interval17.isAfter((long) (byte) 100);
        boolean boolean21 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Duration duration22 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        mutableInterval31.setInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableInterval46.setPeriodAfterStart(readablePeriod47);
        org.joda.time.Chronology chronology49 = mutableInterval46.getChronology();
        long long50 = mutableInterval46.getStartMillis();
        java.lang.String str51 = mutableInterval46.toString();
        org.joda.time.MutableInterval mutableInterval52 = mutableInterval46.copy();
        boolean boolean53 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z" + "'", str51, "1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 1606267403522L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableInterval17.isBefore(readableInstant20);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = mutableInterval33.toDuration();
        boolean boolean47 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval33.toMutableInterval();
        java.lang.String str49 = mutableInterval48.toString();
        java.lang.String str50 = mutableInterval48.toString();
        boolean boolean51 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        boolean boolean52 = mutableInterval3.isAfterNow();
        boolean boolean54 = mutableInterval3.isAfter(0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    @Ignore
  public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        java.lang.Object obj25 = mutableInterval23.clone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(obj25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        mutableInterval33.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        long long42 = interval41.getEndMillis();
        boolean boolean44 = interval41.isAfter((long) (byte) 100);
        boolean boolean45 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = mutableInterval33.toDuration();
        boolean boolean47 = mutableInterval27.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval33.toMutableInterval();
        java.lang.String str49 = mutableInterval48.toString();
        java.lang.String str50 = mutableInterval48.toString();
        boolean boolean51 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        mutableInterval48.setDurationBeforeEnd(1606267321066L);
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = mutableInterval48.isBefore(readableInterval54);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str50, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    @Ignore
  public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = mutableInterval3.toPeriod();
        boolean boolean23 = mutableInterval3.isBefore(1606267383991L);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableDuration24, readableInstant25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodBeforeEnd(readablePeriod31);
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval26);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        mutableInterval37.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval37.toMutableInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        long long45 = mutableInterval44.toDurationMillis();
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        mutableInterval59.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology64 = mutableInterval59.getChronology();
        mutableInterval50.setChronology(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readableInstant66, readablePeriod67);
        mutableInterval68.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        java.lang.Object obj76 = mutableInterval74.clone();
        mutableInterval74.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology79 = mutableInterval74.getChronology();
        mutableInterval68.setChronology(chronology79);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval50, chronology79);
        mutableInterval44.setChronology(chronology79);
        mutableInterval34.setChronology(chronology79);
        mutableInterval3.setChronology(chronology79);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    @Ignore
  public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableInterval35.setPeriodAfterStart(readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        mutableInterval41.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology46 = mutableInterval41.getChronology();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval41.toMutableInterval();
        boolean boolean48 = mutableInterval35.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.MutableInterval mutableInterval50 = mutableInterval13.copy();
        org.joda.time.Chronology chronology51 = mutableInterval13.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval13.setStartMillis(1606267335902L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    @Ignore
  public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Interval interval28 = mutableInterval25.toInterval();
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = mutableInterval25.isBefore(readableInterval29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology33);
        boolean boolean35 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        boolean boolean42 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        java.lang.Object obj49 = mutableInterval47.clone();
        long long50 = mutableInterval47.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readablePeriod52, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readablePeriod51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean88 = mutableInterval47.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval89.toMutableInterval();
        boolean boolean92 = mutableInterval90.isBefore(1606267413967L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    @Ignore
  public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval9.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
    }

    @Test
    @Ignore
  public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Period period36 = mutableInterval34.toPeriod();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval34);
        long long38 = mutableInterval34.getEndMillis();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267379637L, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        mutableInterval35.setDurationAfterStart((long) (byte) 1);
        boolean boolean40 = mutableInterval35.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Period period52 = mutableInterval49.toPeriod();
        mutableInterval35.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        boolean boolean74 = mutableInterval57.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period52, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        java.lang.Object obj82 = mutableInterval80.clone();
        java.lang.Object obj83 = mutableInterval80.clone();
        org.joda.time.MutableInterval mutableInterval84 = mutableInterval80.copy();
        java.lang.Object obj85 = mutableInterval84.clone();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(readableInstant86, readablePeriod87);
        mutableInterval88.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval91 = mutableInterval88.toMutableInterval();
        org.joda.time.Period period92 = mutableInterval88.toPeriod();
        mutableInterval84.setPeriodAfterStart((org.joda.time.ReadablePeriod) period92);
        mutableInterval76.setPeriodAfterStart((org.joda.time.ReadablePeriod) period92);
        org.joda.time.Period period95 = mutableInterval76.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    @Ignore
  public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean38 = mutableInterval7.isBefore(1606267312293L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(obj79, chronology80);
        org.joda.time.Duration duration82 = mutableInterval81.toDuration();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableDuration) duration82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration82, readableInstant84);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    @Ignore
  public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime17 = mutableInterval12.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.String str19 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z" + "'", str19, "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        java.lang.Object obj51 = mutableInterval49.clone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(obj51, chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutableInterval53.setPeriodBeforeEnd(readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        long long68 = interval67.getEndMillis();
        boolean boolean70 = interval67.isAfter((long) (byte) 100);
        boolean boolean71 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration72 = mutableInterval59.toDuration();
        boolean boolean73 = mutableInterval53.isBefore((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval59.toMutableInterval();
        java.lang.String str75 = mutableInterval74.toString();
        java.lang.String str76 = mutableInterval74.toString();
        boolean boolean77 = mutableInterval40.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = mutableInterval74.isAfter(readableInterval78);
        org.joda.time.Interval interval80 = mutableInterval74.toInterval();
        boolean boolean81 = mutableInterval74.isAfterNow();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str75, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str76, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setStartMillis(0L);
        org.joda.time.Chronology chronology48 = mutableInterval40.getChronology();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        org.joda.time.Duration duration24 = mutableInterval22.toDuration();
        org.joda.time.Interval interval25 = mutableInterval22.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    @Ignore
  public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        mutableInterval17.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval17.toMutableInterval();
        org.joda.time.Period period21 = mutableInterval17.toPeriod();
        mutableInterval17.setDurationBeforeEnd((long) '#');
        boolean boolean24 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean26 = mutableInterval2.contains(1606267380604L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        long long29 = interval28.getEndMillis();
        boolean boolean31 = interval28.isAfter((long) (byte) 100);
        boolean boolean32 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration33 = mutableInterval20.toDuration();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime54);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        boolean boolean60 = mutableInterval3.contains((long) (short) -1);
        org.joda.time.DateTime dateTime61 = mutableInterval3.getEnd();
        mutableInterval3.setDurationAfterStart(1606267312293L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    @Ignore
  public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        boolean boolean11 = mutableInterval3.contains(1606267296955L);
        org.joda.time.DateTime dateTime12 = mutableInterval3.getStart();
        java.lang.Object obj13 = mutableInterval3.clone();
        org.joda.time.Duration duration14 = mutableInterval3.toDuration();
        long long15 = mutableInterval3.getEndMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    @Ignore
  public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        mutableInterval3.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        mutableInterval12.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableInterval35.setPeriodAfterStart(readablePeriod36);
        org.joda.time.Period period38 = mutableInterval35.toPeriod();
        mutableInterval21.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        long long53 = interval52.getEndMillis();
        boolean boolean55 = interval52.isAfter((long) (byte) 100);
        boolean boolean56 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Duration duration57 = mutableInterval44.toDuration();
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        mutableInterval61.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval64 = mutableInterval61.toMutableInterval();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        long long69 = mutableInterval68.toDurationMillis();
        mutableInterval61.setInterval((org.joda.time.ReadableInterval) mutableInterval68);
        mutableInterval61.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        mutableInterval80.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        mutableInterval87.setDurationAfterStart((long) (byte) 1);
        boolean boolean92 = mutableInterval87.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology93 = mutableInterval87.getChronology();
        mutableInterval80.setChronology(chronology93);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology93);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology93);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval61, chronology93);
        org.joda.time.MutableInterval mutableInterval98 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology93);
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval98);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(chronology93);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(readableInstant13, readablePeriod14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        mutableInterval15.setInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.ReadableInterval readableInterval31 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setInterval(readableInterval31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Interval must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    @Ignore
  public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        mutableInterval44.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = mutableInterval44.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime55);
        mutableInterval69.setInterval(1606267373498L, 1606267380604L);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = mutableInterval69.toPeriod(periodType73);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    @Ignore
  public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.joda.time.MutableInterval mutableInterval3 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:33.694Z/2020-11-25T01:22:33.695Z");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        mutableInterval7.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology12 = mutableInterval7.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval7.toMutableInterval();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        long long20 = mutableInterval17.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readablePeriod22, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readablePeriod21, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean58 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        mutableInterval62.setDurationAfterStart((long) (byte) 1);
        boolean boolean67 = mutableInterval62.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        java.lang.Object obj73 = mutableInterval71.clone();
        mutableInterval71.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology76 = mutableInterval71.getChronology();
        mutableInterval62.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology76);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval13, chronology76);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((java.lang.Object) "2020-11-25T01:22:33.694Z/2020-11-25T01:22:33.695Z", chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(1606267389845L, 1L, chronology76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        mutableInterval2.setDurationBeforeEnd((long) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableInterval2.isBefore(readableInstant14);
        mutableInterval2.setDurationBeforeEnd(1606267382961L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267433371L + "'", long3 == 1606267433371L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    @Ignore
  public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267295546L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        long long21 = mutableInterval9.toDurationMillis();
        mutableInterval9.setDurationAfterStart(1606267341034L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        mutableInterval26.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        mutableInterval32.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology37 = mutableInterval32.getChronology();
        mutableInterval26.setChronology(chronology37);
        mutableInterval9.setChronology(chronology37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Interval interval46 = mutableInterval43.toInterval();
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = mutableInterval43.isBefore(readableInterval47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology51);
        boolean boolean53 = mutableInterval43.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        boolean boolean54 = mutableInterval52.isAfterNow();
        org.joda.time.Interval interval55 = mutableInterval52.toInterval();
        boolean boolean56 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) interval55);
        long long57 = interval55.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1606267295511L + "'", long21 == 1606267295511L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    @Ignore
  public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        java.lang.Object obj21 = mutableInterval19.clone();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267433661L + "'", long3 == 1606267433661L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean8 = mutableInterval5.contains((long) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = mutableInterval12.isBefore((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        mutableInterval43.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        long long52 = interval51.getEndMillis();
        boolean boolean54 = interval51.isAfter((long) (byte) 100);
        boolean boolean55 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration56 = mutableInterval43.toDuration();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        org.joda.time.DateTime dateTime77 = mutableInterval75.getStart();
        mutableInterval65.setInterval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration56);
        mutableInterval5.setEnd((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology83 = mutableInterval5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(1606267401822L, 1606267372486L, chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    @Ignore
  public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod30, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        boolean boolean56 = mutableInterval51.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(obj63, chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableInterval65.setPeriodAfterStart(readablePeriod66);
        org.joda.time.Period period68 = mutableInterval65.toPeriod();
        mutableInterval51.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) period68);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = mutableInterval3.toPeriod(periodType73);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    @Ignore
  public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval12.containsNow();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.DateTime dateTime21 = mutableInterval19.getStart();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        mutableInterval43.setDurationAfterStart((long) (byte) 1);
        boolean boolean48 = mutableInterval43.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        mutableInterval52.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology57 = mutableInterval52.getChronology();
        mutableInterval43.setChronology(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        mutableInterval61.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        java.lang.Object obj69 = mutableInterval67.clone();
        mutableInterval67.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology72 = mutableInterval67.getChronology();
        mutableInterval61.setChronology(chronology72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval43, chronology72);
        boolean boolean75 = mutableInterval38.contains((org.joda.time.ReadableInterval) mutableInterval74);
        org.joda.time.MutableInterval mutableInterval76 = mutableInterval74.toMutableInterval();
        boolean boolean77 = interval15.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        boolean boolean78 = mutableInterval74.containsNow();
        boolean boolean79 = mutableInterval74.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        boolean boolean6 = mutableInterval5.isBeforeNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    @Ignore
  public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        mutableInterval7.setDurationBeforeEnd((long) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean71 = mutableInterval69.isBefore((long) (byte) 1);
        boolean boolean72 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval69);
        long long73 = mutableInterval69.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
    }

    @Test
    @Ignore
  public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.String str8 = mutableInterval3.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str8, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }
}

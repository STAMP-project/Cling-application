import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    @Ignore
  public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Interval interval19 = mutableInterval16.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = mutableInterval16.isBefore(readableInterval20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        boolean boolean26 = mutableInterval16.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        boolean boolean33 = mutableInterval16.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime32);
        java.lang.Object obj35 = mutableInterval34.clone();
        org.joda.time.Chronology chronology36 = mutableInterval34.getChronology();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    @Ignore
  public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = mutableInterval3.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    @Ignore
  public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        long long16 = mutableInterval3.toDurationMillis();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableInterval20.setPeriodBeforeEnd(readablePeriod21);
        mutableInterval20.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableInstant25, readablePeriod26);
        long long28 = mutableInterval27.getEndMillis();
        boolean boolean29 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean30 = mutableInterval27.isAfterNow();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval33.toMutableInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval36.getEnd();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval36.toMutableInterval();
        boolean boolean39 = mutableInterval27.equals((java.lang.Object) mutableInterval36);
        org.joda.time.Period period40 = mutableInterval27.toPeriod();
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableInterval45.setDurationAfterStart(readableDuration48);
        boolean boolean50 = mutableInterval45.isAfterNow();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        boolean boolean59 = mutableInterval54.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(obj66, chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableInterval68.setPeriodAfterStart(readablePeriod69);
        org.joda.time.Period period71 = mutableInterval68.toPeriod();
        mutableInterval54.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period71);
        mutableInterval45.setPeriodAfterStart((org.joda.time.ReadablePeriod) period71);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Chronology chronology75 = mutableInterval3.getChronology();
        long long76 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1606267572545L + "'", long28 == 1606267572545L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 10, 1606267501910L);
    }

    @Test
    @Ignore
  public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableInterval7.contains(readableInstant10);
        mutableInterval7.setEndMillis(1606267513428L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:04.371Z/2020-11-25T01:22:04.372Z");
        org.joda.time.MutableInterval mutableInterval2 = mutableInterval1.toMutableInterval();
        boolean boolean4 = mutableInterval2.isAfter(1606267332057L);
        mutableInterval2.setEndMillis(1606267405912L);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        boolean boolean5 = mutableInterval3.isBefore((long) 10);
        org.joda.time.Period period6 = mutableInterval3.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    @Ignore
  public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        java.lang.Object obj8 = mutableInterval7.clone();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = mutableInterval12.isBefore(readableInterval16);
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval12.copy();
        boolean boolean20 = mutableInterval12.contains(1606267298802L);
        org.joda.time.DateTime dateTime21 = mutableInterval12.getStart();
        boolean boolean22 = mutableInterval7.equals((java.lang.Object) dateTime21);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setInterval(1606267511356L, 1606267450331L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    @Ignore
  public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.Duration duration26 = mutableInterval25.toDuration();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.DateTime dateTime39 = mutableInterval38.getEnd();
        boolean boolean40 = mutableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = mutableInterval27.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodBeforeEnd(readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        long long64 = interval63.getEndMillis();
        boolean boolean66 = interval63.isAfter((long) (byte) 100);
        boolean boolean67 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration68 = mutableInterval55.toDuration();
        boolean boolean69 = mutableInterval49.isBefore((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval77.setPeriodAfterStart(readablePeriod78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        java.lang.Object obj85 = mutableInterval83.clone();
        mutableInterval83.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology88 = mutableInterval83.getChronology();
        org.joda.time.MutableInterval mutableInterval89 = mutableInterval83.toMutableInterval();
        boolean boolean90 = mutableInterval77.isAfter((org.joda.time.ReadableInterval) mutableInterval89);
        mutableInterval55.setInterval((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.MutableInterval mutableInterval92 = mutableInterval55.copy();
        org.joda.time.Chronology chronology93 = mutableInterval55.getChronology();
        org.joda.time.MutableInterval mutableInterval94 = mutableInterval55.toMutableInterval();
        boolean boolean96 = mutableInterval55.isAfter(1606267389160L);
        boolean boolean97 = mutableInterval27.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.ReadableDuration readableDuration98 = null;
        mutableInterval55.setDurationAfterStart(readableDuration98);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(mutableInterval92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    @Ignore
  public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableInterval38.setPeriodBeforeEnd(readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        long long53 = interval52.getEndMillis();
        boolean boolean55 = interval52.isAfter((long) (byte) 100);
        boolean boolean56 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Duration duration57 = mutableInterval44.toDuration();
        boolean boolean58 = mutableInterval38.isBefore((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval44.toMutableInterval();
        java.lang.String str60 = mutableInterval59.toString();
        boolean boolean61 = mutableInterval59.containsNow();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(readableInstant68, readablePeriod69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        mutableInterval70.setInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime85 = mutableInterval84.getStart();
        boolean boolean86 = mutableInterval59.contains((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Chronology chronology87 = mutableInterval59.getChronology();
        mutableInterval12.setChronology(chronology87);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str60, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval4.getStart();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval7.toMutableInterval();
        boolean boolean9 = mutableInterval7.isBeforeNow();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    @Ignore
  public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.lang.Object obj0 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(readableInstant3, readablePeriod4);
        mutableInterval5.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval8.getEnd();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval8.toMutableInterval();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        mutableInterval14.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(obj31, chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableInterval33.setPeriodAfterStart(readablePeriod34);
        org.joda.time.Period period36 = mutableInterval33.toPeriod();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadablePeriod) period36);
        boolean boolean38 = mutableInterval14.isBefore((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean39 = mutableInterval10.contains((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology40 = mutableInterval10.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(1606267333465L, 1606267422700L, chronology40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(obj0, chronology40);
        org.joda.time.DateTime dateTime43 = mutableInterval42.getEnd();
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    @Ignore
  public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableInterval17.setDurationAfterStart(readableDuration20);
        boolean boolean22 = mutableInterval17.isAfterNow();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = mutableInterval46.getStart();
        boolean boolean49 = mutableInterval46.isBefore((long) (short) 10);
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.MutableInterval mutableInterval52 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        boolean boolean53 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Duration duration54 = mutableInterval52.toDuration();
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval52.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(mutableInterval55);
    }

    @Test
    @Ignore
  public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval2);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval2.toPeriod(periodType11);
        long long13 = mutableInterval2.getEndMillis();
        org.joda.time.Duration duration14 = mutableInterval2.toDuration();
        long long15 = mutableInterval2.getEndMillis();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(readableInstant22, readablePeriod23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        org.joda.time.DateTime dateTime30 = mutableInterval28.getStart();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readablePeriod21, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readablePeriod20, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableInstant40, readablePeriod41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        mutableInterval42.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime57 = mutableInterval56.getStart();
        mutableInterval56.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean61 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(obj67, chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutableInterval69.setPeriodBeforeEnd(readablePeriod70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        mutableInterval75.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        long long84 = interval83.getEndMillis();
        boolean boolean86 = interval83.isAfter((long) (byte) 100);
        boolean boolean87 = mutableInterval75.overlaps((org.joda.time.ReadableInterval) interval83);
        org.joda.time.Duration duration88 = mutableInterval75.toDuration();
        boolean boolean89 = mutableInterval69.isBefore((org.joda.time.ReadableInterval) mutableInterval75);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval75.toMutableInterval();
        java.lang.String str91 = mutableInterval90.toString();
        java.lang.String str92 = mutableInterval90.toString();
        boolean boolean93 = mutableInterval56.isBefore((org.joda.time.ReadableInterval) mutableInterval90);
        org.joda.time.ReadableInterval readableInterval94 = null;
        boolean boolean95 = mutableInterval90.isAfter(readableInterval94);
        org.joda.time.Interval interval96 = mutableInterval90.toInterval();
        boolean boolean97 = mutableInterval2.equals((java.lang.Object) interval96);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str91, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str92, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    @Ignore
  public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        java.lang.String str8 = mutableInterval7.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str8, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval11);
        mutableInterval7.setDurationAfterStart(1606267309894L);
        boolean boolean17 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        mutableInterval7.setDurationAfterStart(1606267510639L);
        org.joda.time.DateTime dateTime20 = mutableInterval7.getStart();
        org.joda.time.MutableInterval mutableInterval22 = org.joda.time.MutableInterval.parse("1919-02-06T22:38:22.994Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Period period23 = mutableInterval22.toPeriod();
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period23);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    @Ignore
  public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267297007L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        boolean boolean29 = mutableInterval24.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableInterval38.setPeriodAfterStart(readablePeriod39);
        org.joda.time.Period period41 = mutableInterval38.toPeriod();
        mutableInterval24.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        boolean boolean43 = mutableInterval24.isAfterNow();
        boolean boolean44 = mutableInterval9.equals((java.lang.Object) mutableInterval24);
        boolean boolean46 = mutableInterval24.equals((java.lang.Object) (-1.0d));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Interval interval53 = mutableInterval50.toInterval();
        mutableInterval50.setDurationBeforeEnd(0L);
        boolean boolean57 = mutableInterval50.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        mutableInterval60.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval60.toMutableInterval();
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.Duration duration65 = mutableInterval63.toDuration();
        mutableInterval24.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(1606267401264L, 1606267455198L);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval69.copy();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        java.lang.Object obj76 = mutableInterval74.clone();
        mutableInterval74.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology79 = mutableInterval74.getChronology();
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval74.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval81 = mutableInterval74.copy();
        org.joda.time.Duration duration82 = mutableInterval74.toDuration();
        mutableInterval70.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration82);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration82);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(mutableInterval81);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    @Ignore
  public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        java.lang.Object obj16 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        boolean boolean32 = mutableInterval27.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        mutableInterval20.setChronology(chronology33);
        mutableInterval20.setEndMillis((long) '#');
        org.joda.time.Duration duration37 = mutableInterval20.toDuration();
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        boolean boolean40 = mutableInterval9.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    @Ignore
  public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        java.lang.Object obj6 = mutableInterval4.clone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj6, chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableInterval8.setPeriodBeforeEnd(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        mutableInterval13.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Interval interval33 = mutableInterval30.toInterval();
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = mutableInterval30.isBefore(readableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology38);
        boolean boolean40 = mutableInterval30.isAfter((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        boolean boolean47 = mutableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime46);
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, readableDuration50);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        boolean boolean24 = mutableInterval19.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        mutableInterval12.setChronology(chronology25);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((java.lang.Object) interval6, chronology25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((long) (short) 1, 1606267534047L, chronology25);
        boolean boolean31 = mutableInterval29.isAfter(1606267493880L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    @Ignore
  public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Duration duration12 = mutableInterval3.toDuration();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval3.copy();
        long long14 = mutableInterval3.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Float");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        boolean boolean8 = mutableInterval3.isBefore(1606267320652L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(readableInstant9, readablePeriod10);
        mutableInterval11.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval11.toMutableInterval();
        org.joda.time.Period period15 = mutableInterval11.toPeriod();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Interval interval29 = mutableInterval26.toInterval();
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = mutableInterval26.isBefore(readableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology34);
        boolean boolean36 = mutableInterval26.isAfter((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        boolean boolean43 = mutableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = mutableInterval19.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(obj50, chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutableInterval52.setPeriodAfterStart(readablePeriod53);
        org.joda.time.Period period55 = mutableInterval52.toPeriod();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        mutableInterval52.setPeriodAfterStart((org.joda.time.ReadablePeriod) period66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadablePeriod) period66);
        boolean boolean69 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.Duration duration78 = mutableInterval77.toDuration();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration78);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean81 = mutableInterval3.isAfterNow();
        org.joda.time.Chronology chronology82 = mutableInterval3.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    @Ignore
  public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval9.getEnd();
        boolean boolean11 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableDuration12, readableInstant13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        java.lang.Object obj27 = mutableInterval25.clone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(obj27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableInterval29.setPeriodAfterStart(readablePeriod30);
        org.joda.time.Period period32 = mutableInterval29.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        mutableInterval37.setInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readablePeriod34, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(readablePeriod33, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        org.joda.time.DateTime dateTime67 = mutableInterval65.getStart();
        mutableInterval55.setInterval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateTime61);
        mutableInterval14.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Duration duration73 = mutableInterval2.toDuration();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267574738L + "'", long3 == 1606267574738L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(duration73);
    }

    @Test
    @Ignore
  public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(obj52, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod55);
        org.joda.time.Period period57 = mutableInterval54.toPeriod();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(obj64, chronology65);
        org.joda.time.Duration duration67 = mutableInterval66.toDuration();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Interval interval76 = mutableInterval73.toInterval();
        org.joda.time.ReadableInterval readableInterval77 = null;
        boolean boolean78 = mutableInterval73.isBefore(readableInterval77);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology81);
        boolean boolean83 = mutableInterval73.isAfter((org.joda.time.ReadableInterval) mutableInterval82);
        org.joda.time.Interval interval84 = mutableInterval73.toInterval();
        org.joda.time.Period period85 = mutableInterval73.toPeriod();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadablePeriod) period85);
        mutableInterval86.setEndMillis(1606267437558L);
        long long89 = mutableInterval86.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/2020-11-25T01:26:02.623Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        mutableInterval7.setEndMillis(1606267298802L);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval7.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval23);
    }

    @Test
    @Ignore
  public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        java.lang.Object obj8 = mutableInterval6.clone();
        mutableInterval6.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology11 = mutableInterval6.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval6.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval6.copy();
        org.joda.time.Duration duration14 = mutableInterval6.toDuration();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        mutableInterval19.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval19.toMutableInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        long long27 = mutableInterval26.toDurationMillis();
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        mutableInterval19.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        mutableInterval38.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        mutableInterval45.setDurationAfterStart((long) (byte) 1);
        boolean boolean50 = mutableInterval45.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        mutableInterval38.setChronology(chronology51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology51);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology51);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval19, chronology51);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology51);
        mutableInterval6.setChronology(chronology51);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology51);
        org.joda.time.Chronology chronology59 = mutableInterval58.getChronology();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(obj0, chronology59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(obj72, chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutableInterval74.setPeriodAfterStart(readablePeriod75);
        org.joda.time.Period period77 = mutableInterval74.toPeriod();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadablePeriod) period77);
        mutableInterval60.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period77);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    @Ignore
  public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.DateTime dateTime18 = mutableInterval16.getStart();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        org.joda.time.DateTime dateTime24 = mutableInterval22.getStart();
        mutableInterval12.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        java.lang.Object obj31 = mutableInterval29.clone();
        org.joda.time.Interval interval32 = mutableInterval29.toInterval();
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = mutableInterval29.isBefore(readableInterval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology37);
        boolean boolean39 = mutableInterval29.isAfter((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        boolean boolean46 = mutableInterval29.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        mutableInterval50.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval50.toMutableInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        long long58 = mutableInterval57.toDurationMillis();
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Duration duration60 = mutableInterval57.toDuration();
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration62 = mutableInterval7.toDuration();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    @Ignore
  public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        long long6 = mutableInterval3.getEndMillis();
        boolean boolean8 = mutableInterval3.isBefore(1606267322610L);
        org.joda.time.Duration duration9 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Interval interval16 = mutableInterval13.toInterval();
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = mutableInterval13.isBefore(readableInterval17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology21);
        boolean boolean23 = mutableInterval13.isAfter((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        boolean boolean38 = interval35.isAfter((long) (byte) 100);
        boolean boolean39 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) interval35);
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) interval35);
        mutableInterval22.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval22.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableInterval22.setPeriodBeforeEnd(readablePeriod44);
        boolean boolean46 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval47 = mutableInterval3.toInterval();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval47);
    }

    @Test
    @Ignore
  public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        java.lang.Object obj1 = mutableInterval0.clone();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        boolean boolean32 = mutableInterval27.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        mutableInterval36.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology41 = mutableInterval36.getChronology();
        mutableInterval27.setChronology(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        mutableInterval45.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        mutableInterval51.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology56 = mutableInterval51.getChronology();
        mutableInterval45.setChronology(chronology56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval27, chronology56);
        boolean boolean59 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.Duration duration60 = mutableInterval22.toDuration();
        org.joda.time.MutableInterval mutableInterval61 = mutableInterval22.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(mutableInterval61);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.DateTime dateTime78 = mutableInterval76.getStart();
        org.joda.time.DateTime dateTime79 = mutableInterval76.getStart();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval76.setInterval(1606267420273L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    @Ignore
  public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Duration duration28 = mutableInterval25.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        java.lang.Object obj44 = mutableInterval42.clone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(obj44, chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableInterval46.setPeriodAfterStart(readablePeriod47);
        org.joda.time.Period period49 = mutableInterval46.toPeriod();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) period49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(obj56, chronology57);
        org.joda.time.Duration duration59 = mutableInterval58.toDuration();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) dateTime38);
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.Duration duration68 = mutableInterval66.toDuration();
        boolean boolean69 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval66);
        long long70 = mutableInterval3.getStartMillis();
        boolean boolean72 = mutableInterval3.contains(1606267518437L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    @Ignore
  public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval4.isAfterNow();
        java.lang.String str7 = mutableInterval4.toString();
        org.joda.time.Chronology chronology8 = mutableInterval4.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(obj0, chronology8);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodAfterStart(readablePeriod19);
        org.joda.time.Period period21 = mutableInterval18.toPeriod();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        boolean boolean37 = mutableInterval32.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval25.setChronology(chronology38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        java.lang.Object obj45 = mutableInterval43.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(obj45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableInterval47.setPeriodAfterStart(readablePeriod48);
        org.joda.time.Period period50 = mutableInterval47.toPeriod();
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval47.copy();
        boolean boolean52 = mutableInterval25.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        boolean boolean53 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        org.joda.time.Interval interval60 = mutableInterval57.toInterval();
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = mutableInterval57.isBefore(readableInterval61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology65);
        boolean boolean67 = mutableInterval57.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.Interval interval68 = mutableInterval57.toInterval();
        org.joda.time.Period period69 = mutableInterval57.toPeriod();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        mutableInterval75.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        mutableInterval82.setDurationAfterStart((long) (byte) 1);
        boolean boolean87 = mutableInterval82.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology88 = mutableInterval82.getChronology();
        mutableInterval75.setChronology(chronology88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology88);
        mutableInterval57.setChronology(chronology88);
        mutableInterval18.setChronology(chronology88);
        boolean boolean93 = mutableInterval10.equals((java.lang.Object) mutableInterval18);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str7, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    @Ignore
  public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        long long20 = mutableInterval17.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readablePeriod22, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readablePeriod21, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean58 = mutableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        mutableInterval62.setDurationAfterStart((long) (byte) 1);
        boolean boolean67 = mutableInterval62.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        java.lang.Object obj73 = mutableInterval71.clone();
        mutableInterval71.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology76 = mutableInterval71.getChronology();
        mutableInterval62.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17, chronology76);
        mutableInterval3.setChronology(chronology76);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        org.joda.time.Interval interval89 = mutableInterval86.toInterval();
        boolean boolean90 = mutableInterval82.isAfter((org.joda.time.ReadableInterval) mutableInterval86);
        boolean boolean91 = mutableInterval86.isAfterNow();
        mutableInterval86.setDurationAfterStart(1606267347470L);
        boolean boolean94 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval86);
        org.joda.time.MutableInterval mutableInterval95 = mutableInterval3.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(mutableInterval95);
    }

    @Test
    @Ignore
  public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:15.562Z/2020-11-25T01:22:15.562Z");
        mutableInterval1.setInterval((long) (short) 1, 1606267381018L);
        org.joda.time.DateTime dateTime5 = mutableInterval1.getEnd();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval1.toMutableInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableInterval10.setPeriodBeforeEnd(readablePeriod11);
        mutableInterval10.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        long long18 = mutableInterval17.getEndMillis();
        boolean boolean19 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean20 = mutableInterval17.isAfterNow();
        boolean boolean22 = mutableInterval17.isBefore((long) (byte) 10);
        mutableInterval17.setStartMillis(1606267400463L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        long long30 = interval29.getEndMillis();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval33.toMutableInterval();
        boolean boolean37 = interval29.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Period period38 = interval29.toPeriod();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        java.lang.Object obj44 = mutableInterval42.clone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(obj44, chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableInterval46.setPeriodAfterStart(readablePeriod47);
        org.joda.time.Period period49 = mutableInterval46.toPeriod();
        org.joda.time.MutableInterval mutableInterval50 = mutableInterval46.copy();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readableInstant57, readablePeriod58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        mutableInterval59.setInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = mutableInterval50.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period38, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean76 = mutableInterval17.isAfter((org.joda.time.ReadableInstant) dateTime71);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval1.setEnd((org.joda.time.ReadableInstant) dateTime71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableInterval6);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1606267576534L + "'", long18 == 1606267576534L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    @Ignore
  public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        mutableInterval7.setDurationBeforeEnd(1L);
        boolean boolean10 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTime dateTime60 = mutableInterval24.getEnd();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        java.lang.Object obj68 = mutableInterval65.clone();
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval65.copy();
        org.joda.time.Duration duration70 = mutableInterval65.toDuration();
        mutableInterval61.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        mutableInterval61.setDurationAfterStart(0L);
        boolean boolean75 = mutableInterval61.contains(1606267415524L);
        org.joda.time.Chronology chronology76 = mutableInterval61.getChronology();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    @Ignore
  public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        mutableInterval2.setDurationAfterStart(1606267383467L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval8.isAfterNow();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        org.joda.time.DateTime dateTime12 = mutableInterval8.getStart();
        boolean boolean13 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration30 = mutableInterval17.toDuration();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(0L, 1L, chronology66);
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval67.getStart();
        mutableInterval57.setInterval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readableInstant72, readablePeriod73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        org.joda.time.DateTime dateTime80 = mutableInterval78.getStart();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        mutableInterval74.setInterval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime86);
        java.lang.String str89 = mutableInterval88.toString();
        boolean boolean90 = mutableInterval2.isAfter((org.joda.time.ReadableInterval) mutableInterval88);
        org.joda.time.ReadableInstant readableInstant91 = null;
        mutableInterval88.setEnd(readableInstant91);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z" + "'", str89, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    @Ignore
  public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Duration duration12 = mutableInterval3.toDuration();
        boolean boolean14 = mutableInterval3.isBefore(0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Chronology chronology43 = mutableInterval40.getChronology();
        long long44 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.DateTime dateTime46 = mutableInterval45.getEnd();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getEnd();
        mutableInterval45.setDurationBeforeEnd((long) (byte) 100);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    @Ignore
  public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        java.lang.Object obj8 = mutableInterval6.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(obj8, chronology9);
        org.joda.time.DateTime dateTime11 = mutableInterval10.getEnd();
        boolean boolean12 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        mutableInterval16.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology21 = mutableInterval16.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval16.toMutableInterval();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        java.lang.Object obj29 = mutableInterval26.clone();
        org.joda.time.MutableInterval mutableInterval30 = mutableInterval26.copy();
        org.joda.time.Duration duration31 = mutableInterval26.toDuration();
        boolean boolean32 = mutableInterval22.contains((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean33 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        long long63 = interval62.getEndMillis();
        boolean boolean65 = interval62.isAfter((long) (byte) 100);
        boolean boolean66 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) interval62);
        org.joda.time.Duration duration67 = mutableInterval54.toDuration();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readableInstant74, readablePeriod75);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, 1L, chronology79);
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        org.joda.time.DateTime dateTime82 = mutableInterval80.getStart();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        mutableInterval76.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval();
        boolean boolean96 = mutableInterval94.isBefore((long) '4');
        org.joda.time.Chronology chronology97 = mutableInterval94.getChronology();
        mutableInterval2.setChronology(chronology97);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    @Ignore
  public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        java.lang.Object obj6 = mutableInterval4.clone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj6, chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableInterval8.setPeriodBeforeEnd(readablePeriod9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        boolean boolean28 = mutableInterval8.isBefore((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval14.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod30, (org.joda.time.ReadableInstant) dateTime39);
        mutableInterval14.setEnd((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        mutableInterval52.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        long long61 = interval60.getEndMillis();
        boolean boolean63 = interval60.isAfter((long) (byte) 100);
        boolean boolean64 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) interval60);
        boolean boolean65 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        boolean boolean72 = mutableInterval14.contains((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        mutableInterval76.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology81 = mutableInterval76.getChronology();
        mutableInterval14.setChronology(chronology81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        java.lang.Object obj88 = mutableInterval86.clone();
        org.joda.time.ReadableDuration readableDuration89 = null;
        mutableInterval86.setDurationAfterStart(readableDuration89);
        boolean boolean91 = mutableInterval86.isAfterNow();
        boolean boolean92 = mutableInterval14.contains((org.joda.time.ReadableInterval) mutableInterval86);
        org.joda.time.Interval interval93 = mutableInterval86.toInterval();
        boolean boolean95 = mutableInterval86.isBefore(1606267298802L);
        org.joda.time.DateTime dateTime96 = mutableInterval86.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableInstant) dateTime96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    @Ignore
  public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        java.lang.String str7 = interval6.toString();
        boolean boolean9 = interval6.isBefore((long) '#');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval13.getStart();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        mutableInterval22.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval22.toMutableInterval();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        long long30 = mutableInterval29.toDurationMillis();
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) mutableInterval29);
        mutableInterval22.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        mutableInterval41.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        boolean boolean53 = mutableInterval48.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology54 = mutableInterval48.getChronology();
        mutableInterval41.setChronology(chronology54);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology54);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology54);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval22, chronology54);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology54);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(1606267335470L, 1606267335562L, chronology54);
        mutableInterval13.setChronology(chronology54);
        boolean boolean62 = interval6.equals((java.lang.Object) chronology54);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str7, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    @Ignore
  public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.Period period18 = mutableInterval9.toPeriod();
        mutableInterval9.setEndMillis(1606267438274L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    @Ignore
  public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        boolean boolean22 = mutableInterval17.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        mutableInterval10.setChronology(chronology23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        java.lang.Object obj30 = mutableInterval28.clone();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(obj30, chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutableInterval32.setPeriodAfterStart(readablePeriod33);
        org.joda.time.Period period35 = mutableInterval32.toPeriod();
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval32.copy();
        boolean boolean37 = mutableInterval10.isAfter((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval3.setChronology(chronology38);
        org.joda.time.DateTime dateTime40 = mutableInterval3.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = mutableInterval2.toPeriod(periodType14);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    @Ignore
  public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodBeforeEnd(readablePeriod31);
        mutableInterval30.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        long long38 = mutableInterval37.getEndMillis();
        boolean boolean39 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean40 = mutableInterval37.isAfterNow();
        boolean boolean42 = mutableInterval37.isBefore((long) (byte) 10);
        mutableInterval37.setStartMillis(1606267400463L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        long long50 = interval49.getEndMillis();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        mutableInterval53.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval53.toMutableInterval();
        boolean boolean57 = interval49.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.Period period58 = interval49.toPeriod();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(obj64, chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        mutableInterval66.setPeriodAfterStart(readablePeriod67);
        org.joda.time.Period period69 = mutableInterval66.toPeriod();
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval66.copy();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval74.getStart();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(readableInstant77, readablePeriod78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval(0L, 1L, chronology88);
        org.joda.time.Interval interval90 = mutableInterval89.toInterval();
        org.joda.time.DateTime dateTime91 = mutableInterval89.getStart();
        mutableInterval79.setInterval((org.joda.time.ReadableInstant) dateTime85, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime91);
        boolean boolean94 = mutableInterval70.isBefore((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime91);
        boolean boolean96 = mutableInterval37.isAfter((org.joda.time.ReadableInstant) dateTime91);
        mutableInterval22.setEnd((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1606267577502L + "'", long38 == 1606267577502L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    @Ignore
  public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval25.toPeriod(periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval40);
        boolean boolean42 = mutableInterval40.isBeforeNow();
        boolean boolean44 = mutableInterval40.isAfter(0L);
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval40.copy();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267577681L + "'", long31 == 1606267577681L);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertNotNull(interval46);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        mutableInterval36.setInterval(1606267408626L, 1606267499326L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    @Ignore
  public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        mutableInterval37.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval37.toMutableInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        long long45 = mutableInterval44.toDurationMillis();
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Duration duration47 = mutableInterval44.toDuration();
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(obj54, chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutableInterval56.setPeriodAfterStart(readablePeriod57);
        org.joda.time.Period period59 = mutableInterval56.toPeriod();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        mutableInterval63.setDurationAfterStart((long) (byte) 1);
        boolean boolean68 = mutableInterval63.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval77.setPeriodAfterStart(readablePeriod78);
        org.joda.time.Period period80 = mutableInterval77.toPeriod();
        mutableInterval63.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period80);
        boolean boolean82 = mutableInterval63.isAfterNow();
        boolean boolean83 = mutableInterval56.contains((org.joda.time.ReadableInterval) mutableInterval63);
        boolean boolean84 = mutableInterval33.isAfter((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.Period period85 = mutableInterval56.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    @Ignore
  public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        long long10 = mutableInterval3.getStartMillis();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        long long24 = interval23.getEndMillis();
        boolean boolean26 = interval23.isAfter((long) (byte) 100);
        boolean boolean27 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = mutableInterval15.toDuration();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        mutableInterval33.setInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readablePeriod30, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        boolean boolean56 = mutableInterval51.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        java.lang.Object obj63 = mutableInterval61.clone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(obj63, chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableInterval65.setPeriodAfterStart(readablePeriod66);
        org.joda.time.Period period68 = mutableInterval65.toPeriod();
        mutableInterval51.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) period68);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = mutableInterval3.toPeriod(periodType73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readableInstant75, readablePeriod76);
        long long78 = mutableInterval77.getEndMillis();
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval77.copy();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(readableDuration80, readableInstant81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = mutableInterval82.toPeriod(periodType83);
        mutableInterval77.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period84);
        org.joda.time.DateTime dateTime86 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        boolean boolean93 = mutableInterval90.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval94 = mutableInterval90.copy();
        boolean boolean95 = mutableInterval77.equals((java.lang.Object) mutableInterval94);
        org.joda.time.ReadableDuration readableDuration96 = null;
        mutableInterval77.setDurationBeforeEnd(readableDuration96);
        org.joda.time.Duration duration98 = mutableInterval77.toDuration();
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration98);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period74);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1606267577963L + "'", long78 == 1606267577963L);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    @Ignore
  public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        long long27 = interval26.getEndMillis();
        boolean boolean29 = interval26.isAfter((long) (byte) 100);
        boolean boolean30 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration31 = mutableInterval18.toDuration();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime52);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        mutableInterval62.setInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readablePeriod59, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readablePeriod58, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean78 = mutableInterval9.contains((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period79 = mutableInterval9.toPeriod();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(period79);
    }

    @Test
    @Ignore
  public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        mutableInterval12.setStartMillis((long) 1);
        org.joda.time.DateTime dateTime17 = mutableInterval12.getStart();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval3.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableInterval19);
    }

    @Test
    @Ignore
  public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        long long21 = interval20.getEndMillis();
        boolean boolean23 = interval20.isAfter((long) (byte) 100);
        boolean boolean24 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        mutableInterval34.setInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodAfterStart(readablePeriod50);
        org.joda.time.Chronology chronology52 = mutableInterval49.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7, chronology52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        java.lang.Object obj59 = mutableInterval57.clone();
        mutableInterval57.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology62 = mutableInterval57.getChronology();
        org.joda.time.MutableInterval mutableInterval63 = mutableInterval57.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval64 = mutableInterval57.copy();
        org.joda.time.Duration duration65 = mutableInterval57.toDuration();
        org.joda.time.DateTime dateTime66 = mutableInterval57.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        mutableInterval70.setPeriodAfterStart(readablePeriod71);
        org.joda.time.MutableInterval mutableInterval73 = mutableInterval70.toMutableInterval();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval77.copy();
        org.joda.time.Period period80 = mutableInterval77.toPeriod();
        mutableInterval70.setPeriodAfterStart((org.joda.time.ReadablePeriod) period80);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadablePeriod) period80);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval53.setEnd((org.joda.time.ReadableInstant) dateTime66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    @Ignore
  public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval2.setDurationAfterStart(100L);
        mutableInterval2.setDurationBeforeEnd(1606267381018L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.DateTime dateTime28 = mutableInterval18.getEnd();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        long long41 = interval40.getEndMillis();
        boolean boolean43 = interval40.isAfter((long) (byte) 100);
        boolean boolean44 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = mutableInterval32.toDuration();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(readableInstant46, readablePeriod47);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        org.joda.time.DateTime dateTime54 = mutableInterval52.getStart();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        mutableInterval48.setInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(obj72, chronology73);
        org.joda.time.DateTime dateTime75 = mutableInterval74.getEnd();
        boolean boolean76 = mutableInterval66.isBefore((org.joda.time.ReadableInstant) dateTime75);
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.ReadableInterval readableInterval83 = null;
        boolean boolean84 = mutableInterval81.isAfter(readableInterval83);
        org.joda.time.Duration duration85 = mutableInterval81.toDuration();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration85);
        boolean boolean87 = mutableInterval86.isAfterNow();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    @Ignore
  public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        java.lang.Object obj12 = mutableInterval10.clone();
        boolean boolean13 = interval6.isBefore((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean15 = mutableInterval10.isAfter((long) (short) 1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableInterval10.setDurationAfterStart(readableDuration16);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    @Ignore
  public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:22:38.784Z/2020-11-25T01:22:38.785Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        java.lang.Object obj17 = mutableInterval15.clone();
        long long18 = mutableInterval15.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableInstant21, readablePeriod22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        org.joda.time.DateTime dateTime29 = mutableInterval27.getStart();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        mutableInterval23.setInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readablePeriod20, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(readablePeriod19, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readableInstant39, readablePeriod40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        mutableInterval41.setInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean56 = mutableInterval15.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        mutableInterval60.setDurationAfterStart((long) (byte) 1);
        boolean boolean65 = mutableInterval60.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        java.lang.Object obj71 = mutableInterval69.clone();
        mutableInterval69.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology74 = mutableInterval69.getChronology();
        mutableInterval60.setChronology(chronology74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval15, chronology74);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval11, chronology74);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval((java.lang.Object) "2020-11-25T01:22:38.784Z/2020-11-25T01:22:38.785Z", chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((java.lang.Object) chronology74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval3.setStartMillis(1606267456564L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        java.lang.String str3 = mutableInterval2.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2020-11-25T01:26:18.973Z/2020-11-25T01:26:18.973Z" + "'", str3, "2020-11-25T01:26:18.973Z/2020-11-25T01:26:18.973Z");
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setDurationBeforeEnd((long) (byte) 1);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        mutableInterval2.setDurationAfterStart(1606267309894L);
        boolean boolean13 = mutableInterval2.isAfter(1606267534047L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    @Ignore
  public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        org.joda.time.DateTime dateTime8 = mutableInterval6.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        org.joda.time.Duration duration21 = mutableInterval19.toDuration();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Interval interval29 = mutableInterval26.toInterval();
        mutableInterval26.setDurationBeforeEnd(0L);
        boolean boolean33 = mutableInterval26.contains((long) (short) 0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        long long46 = interval45.getEndMillis();
        boolean boolean48 = interval45.isAfter((long) (byte) 100);
        boolean boolean49 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration50 = mutableInterval37.toDuration();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        org.joda.time.DateTime dateTime56 = mutableInterval54.getStart();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(readableInstant57, readablePeriod58);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        org.joda.time.DateTime dateTime71 = mutableInterval69.getStart();
        mutableInterval59.setInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readableInstant75, readablePeriod76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        org.joda.time.DateTime dateTime83 = mutableInterval81.getStart();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval(0L, 1L, chronology86);
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        org.joda.time.DateTime dateTime89 = mutableInterval87.getStart();
        mutableInterval77.setInterval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime83);
        mutableInterval26.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval94 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.032Z/1970-01-01T00:00:00.100Z");
        org.joda.time.DateTime dateTime95 = mutableInterval94.getStart();
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime95);
        mutableInterval22.setEnd((org.joda.time.ReadableInstant) dateTime95);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval8.copy();
        org.joda.time.DateTime dateTime10 = mutableInterval9.getStart();
        boolean boolean11 = interval4.isAfter((org.joda.time.ReadableInterval) mutableInterval9);
        boolean boolean13 = interval4.contains(1606267411208L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    @Ignore
  public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        boolean boolean20 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period21 = mutableInterval3.toPeriod();
        boolean boolean23 = mutableInterval3.contains(1606267390241L);
        java.lang.Object obj24 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        long long5 = interval4.getEndMillis();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        mutableInterval8.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval8.toMutableInterval();
        boolean boolean12 = interval4.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        long long30 = interval29.getEndMillis();
        boolean boolean32 = interval29.isAfter((long) (byte) 100);
        boolean boolean33 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration34 = mutableInterval21.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime55);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readablePeriod60, (org.joda.time.ReadableInstant) dateTime66);
        mutableInterval16.setStart((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableInterval8.setDurationAfterStart(readableDuration70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((java.lang.Object) readableDuration70);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    @Ignore
  public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.copy();
        org.joda.time.Duration duration11 = mutableInterval3.toDuration();
        org.joda.time.Duration duration12 = mutableInterval3.toDuration();
        org.joda.time.MutableInterval mutableInterval13 = mutableInterval3.copy();
        org.joda.time.DateTime dateTime14 = mutableInterval13.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    @Ignore
  public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        mutableInterval3.setEnd(readableInstant7);
        mutableInterval3.setEndMillis((long) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = mutableInterval33.getStart();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getEnd();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        mutableInterval39.setDurationAfterStart((long) (byte) 1);
        boolean boolean44 = mutableInterval39.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        java.lang.Object obj50 = mutableInterval48.clone();
        mutableInterval48.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology53 = mutableInterval48.getChronology();
        mutableInterval39.setChronology(chronology53);
        mutableInterval33.setChronology(chronology53);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3, chronology53);
        org.joda.time.Chronology chronology57 = mutableInterval3.getChronology();
        mutableInterval3.setDurationBeforeEnd(1606267347470L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval57.setDurationBeforeEnd(1606267517854L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    @Ignore
  public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        boolean boolean11 = mutableInterval3.contains(1606267298802L);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = mutableInterval14.toPeriod(periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        long long20 = mutableInterval19.getEndMillis();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableInstant21, readablePeriod22);
        mutableInterval23.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval23.toMutableInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval26.getEnd();
        boolean boolean28 = mutableInterval19.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(obj35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableInterval37.setPeriodAfterStart(readablePeriod38);
        org.joda.time.Period period40 = mutableInterval37.toPeriod();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        java.lang.Object obj46 = mutableInterval44.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(obj46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableInterval48.setPeriodAfterStart(readablePeriod49);
        org.joda.time.Period period51 = mutableInterval48.toPeriod();
        mutableInterval37.setPeriodAfterStart((org.joda.time.ReadablePeriod) period51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period51);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableDuration54, readableInstant55);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = mutableInterval56.toPeriod(periodType57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(readableInstant59, readablePeriod60);
        long long62 = mutableInterval61.getEndMillis();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readableInstant63, readablePeriod64);
        mutableInterval65.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval65.toMutableInterval();
        org.joda.time.DateTime dateTime69 = mutableInterval68.getEnd();
        boolean boolean70 = mutableInterval61.isAfter((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(obj77, chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableInterval79.setPeriodAfterStart(readablePeriod80);
        org.joda.time.Period period82 = mutableInterval79.toPeriod();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        java.lang.Object obj88 = mutableInterval86.clone();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(obj88, chronology89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        mutableInterval90.setPeriodAfterStart(readablePeriod91);
        org.joda.time.Period period93 = mutableInterval90.toPeriod();
        mutableInterval79.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        org.joda.time.MutableInterval mutableInterval95 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadablePeriod) period93);
        mutableInterval3.setInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime97 = mutableInterval3.getEnd();
        org.joda.time.ReadableInstant readableInstant98 = null;
        org.joda.time.MutableInterval mutableInterval99 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime97, readableInstant98);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period16);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1606267579878L + "'", long20 == 1606267579878L);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period58);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1606267579878L + "'", long62 == 1606267579878L);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readablePeriod26, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(readablePeriod25, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime62 = mutableInterval61.getStart();
        mutableInterval61.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean66 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(readablePeriod67, (org.joda.time.ReadableInstant) dateTime73);
        mutableInterval61.setStart((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period77 = mutableInterval76.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean84 = mutableInterval81.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval85 = mutableInterval81.copy();
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(readableDuration89, readableInstant90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = mutableInterval91.toPeriod(periodType92);
        mutableInterval88.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period93);
        mutableInterval85.setPeriodAfterStart((org.joda.time.ReadablePeriod) period93);
        boolean boolean96 = mutableInterval76.isBefore((org.joda.time.ReadableInterval) mutableInterval85);
        long long97 = mutableInterval85.getStartMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval85.setStartMillis(1606267502451L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = mutableInterval2.getStart();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean18 = mutableInterval15.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval15.copy();
        boolean boolean20 = mutableInterval2.equals((java.lang.Object) mutableInterval19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readableDuration21, readableInstant22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableInterval27.setPeriodBeforeEnd(readablePeriod28);
        mutableInterval23.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        mutableInterval23.setDurationAfterStart(1606267309894L);
        boolean boolean33 = mutableInterval23.containsNow();
        long long34 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval23.toMutableInterval();
        mutableInterval23.setDurationBeforeEnd(1606267470521L);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.Chronology chronology39 = mutableInterval19.getChronology();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267580237L + "'", long3 == 1606267580237L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1606267309894L + "'", long34 == 1606267309894L);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    @Ignore
  public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        mutableInterval3.setEndMillis((long) '#');
        org.joda.time.Duration duration20 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Interval interval44 = mutableInterval41.toInterval();
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = mutableInterval41.isBefore(readableInterval45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology49);
        boolean boolean51 = mutableInterval41.isAfter((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        boolean boolean58 = mutableInterval41.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean62 = mutableInterval60.isBefore(1606267512177L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    @Ignore
  public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        boolean boolean18 = mutableInterval17.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    @Ignore
  public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.Period period18 = mutableInterval9.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((java.lang.Object) period18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    @Ignore
  public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(obj70, chronology71);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        boolean boolean75 = mutableInterval13.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    @Ignore
  public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267375022L, 1606267526152L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        mutableInterval6.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        long long15 = interval14.getEndMillis();
        boolean boolean17 = interval14.isAfter((long) (byte) 100);
        boolean boolean18 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        mutableInterval21.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval24 = mutableInterval21.toMutableInterval();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(0L, 1L, chronology27);
        long long29 = mutableInterval28.toDurationMillis();
        mutableInterval21.setInterval((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.Duration duration31 = mutableInterval28.toDuration();
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        java.lang.Object obj38 = mutableInterval36.clone();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(obj38, chronology39);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getEnd();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval42.copy();
        boolean boolean44 = mutableInterval2.equals((java.lang.Object) mutableInterval42);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    @Ignore
  public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = mutableInterval3.isAfter(readableInterval5);
        mutableInterval3.setEndMillis(1606267320652L);
        org.joda.time.DateTime dateTime9 = mutableInterval3.getEnd();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        mutableInterval12.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval12.toMutableInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        long long20 = mutableInterval19.toDurationMillis();
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Duration duration22 = mutableInterval19.toDuration();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Interval interval29 = mutableInterval26.toInterval();
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = mutableInterval26.isBefore(readableInterval30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology34);
        boolean boolean36 = mutableInterval26.isAfter((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        boolean boolean43 = mutableInterval26.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableDuration48, readableInstant49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = mutableInterval50.toPeriod(periodType51);
        mutableInterval47.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        mutableInterval57.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        long long66 = interval65.getEndMillis();
        boolean boolean68 = interval65.isAfter((long) (byte) 100);
        boolean boolean69 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Duration duration70 = mutableInterval57.toDuration();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period52, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval3.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    @Ignore
  public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval17.copy();
        long long22 = mutableInterval17.getEndMillis();
        boolean boolean23 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.String str24 = mutableInterval7.toString();
        boolean boolean25 = mutableInterval7.isAfterNow();
        org.joda.time.MutableInterval mutableInterval26 = mutableInterval7.toMutableInterval();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(obj32, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableInterval34.setPeriodAfterStart(readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(obj42, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodAfterStart(readablePeriod45);
        org.joda.time.Period period47 = mutableInterval44.toPeriod();
        org.joda.time.MutableInterval mutableInterval48 = mutableInterval44.copy();
        long long49 = mutableInterval44.getEndMillis();
        boolean boolean50 = mutableInterval34.isAfter((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(readableInstant51, readablePeriod52);
        mutableInterval53.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval53.toMutableInterval();
        org.joda.time.Period period57 = mutableInterval53.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        org.joda.time.DateTime dateTime74 = mutableInterval72.getStart();
        mutableInterval62.setInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(readablePeriod59, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(readablePeriod58, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(readableInstant78, readablePeriod79);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        org.joda.time.DateTime dateTime92 = mutableInterval90.getStart();
        mutableInterval80.setInterval((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime86);
        boolean boolean95 = mutableInterval53.isAfter((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean96 = mutableInterval34.contains((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean97 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str24, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    @Ignore
  public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean38 = mutableInterval7.isBefore(1606267314186L);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        java.lang.Object obj79 = mutableInterval77.clone();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(obj79, chronology80);
        org.joda.time.Duration duration82 = mutableInterval81.toDuration();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableDuration) duration82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration82, readableInstant84);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        mutableInterval88.setDurationAfterStart(1606267383467L);
        org.joda.time.DateTime dateTime91 = mutableInterval88.getStart();
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration82, (org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    @Ignore
  public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        mutableInterval34.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        long long43 = interval42.getEndMillis();
        boolean boolean45 = interval42.isAfter((long) (byte) 100);
        boolean boolean46 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Duration duration47 = mutableInterval34.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration64 = mutableInterval51.toDuration();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime85);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration64);
        java.lang.Object obj91 = mutableInterval12.clone();
        java.lang.Class<?> wildcardClass92 = mutableInterval12.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    @Ignore
  public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        boolean boolean13 = mutableInterval8.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        java.lang.Object obj19 = mutableInterval17.clone();
        mutableInterval17.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology22 = mutableInterval17.getChronology();
        mutableInterval8.setChronology(chronology22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        java.lang.Object obj29 = mutableInterval27.clone();
        org.joda.time.Interval interval30 = mutableInterval27.toInterval();
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = mutableInterval27.isBefore(readableInterval31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology35);
        boolean boolean37 = mutableInterval27.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Interval interval38 = mutableInterval27.toInterval();
        org.joda.time.Period period39 = mutableInterval27.toPeriod();
        mutableInterval8.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval59.getStart();
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(readablePeriod46, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(readablePeriod45, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant65, readablePeriod66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        org.joda.time.DateTime dateTime73 = mutableInterval71.getStart();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        mutableInterval67.setInterval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime82 = mutableInterval81.getStart();
        mutableInterval81.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean86 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(0L, 1L, chronology90);
        org.joda.time.Interval interval92 = mutableInterval91.toInterval();
        org.joda.time.DateTime dateTime93 = mutableInterval91.getStart();
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval(readablePeriod87, (org.joda.time.ReadableInstant) dateTime93);
        mutableInterval81.setStart((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period39, (org.joda.time.ReadableInstant) dateTime93);
        boolean boolean97 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime98 = mutableInterval2.getStart();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    @Ignore
  public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = mutableInterval33.toPeriod(periodType34);
        mutableInterval30.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        mutableInterval40.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        long long49 = interval48.getEndMillis();
        boolean boolean51 = interval48.isAfter((long) (byte) 100);
        boolean boolean52 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Duration duration53 = mutableInterval40.toDuration();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(readableInstant54, readablePeriod55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        org.joda.time.DateTime dateTime68 = mutableInterval66.getStart();
        mutableInterval56.setInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period35, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, 1L, chronology80);
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        java.lang.Object obj83 = mutableInterval81.clone();
        java.lang.Object obj84 = mutableInterval81.clone();
        boolean boolean85 = mutableInterval75.equals((java.lang.Object) mutableInterval81);
        org.joda.time.Interval interval86 = mutableInterval81.toInterval();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval(0L, 1L, chronology89);
        org.joda.time.Interval interval91 = mutableInterval90.toInterval();
        java.lang.Object obj92 = mutableInterval90.clone();
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval(obj92, chronology93);
        org.joda.time.DateTime dateTime95 = mutableInterval94.getEnd();
        boolean boolean96 = interval86.contains((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period35, (org.joda.time.ReadableInstant) dateTime95);
        mutableInterval13.setStart((org.joda.time.ReadableInstant) dateTime95);
        long long99 = mutableInterval13.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    @Ignore
  public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(readableInstant1, readablePeriod2);
        mutableInterval3.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.Period period7 = mutableInterval3.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        java.lang.Object obj20 = mutableInterval18.clone();
        org.joda.time.Interval interval21 = mutableInterval18.toInterval();
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = mutableInterval18.isBefore(readableInterval22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology26);
        boolean boolean28 = mutableInterval18.isAfter((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        boolean boolean35 = mutableInterval18.isBefore((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean36 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        java.lang.Object obj42 = mutableInterval40.clone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(obj42, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodAfterStart(readablePeriod45);
        org.joda.time.Period period47 = mutableInterval44.toPeriod();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(obj53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableInterval55.setPeriodAfterStart(readablePeriod56);
        org.joda.time.Period period58 = mutableInterval55.toPeriod();
        mutableInterval44.setPeriodAfterStart((org.joda.time.ReadablePeriod) period58);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) period58);
        boolean boolean61 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(obj67, chronology68);
        org.joda.time.Duration duration70 = mutableInterval69.toDuration();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration70);
        mutableInterval71.setStartMillis((-1L));
        org.joda.time.DateTime dateTime74 = mutableInterval71.getEnd();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime74);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    @Ignore
  public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval11);
        mutableInterval7.setDurationAfterStart(1606267309894L);
        boolean boolean17 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodBeforeEnd(readablePeriod26);
        mutableInterval25.setDurationBeforeEnd((long) 100);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval25.setDurationAfterStart(1606267456564L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        long long16 = mutableInterval3.toDurationMillis();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableInterval20.setPeriodBeforeEnd(readablePeriod21);
        mutableInterval20.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableInstant25, readablePeriod26);
        long long28 = mutableInterval27.getEndMillis();
        boolean boolean29 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean30 = mutableInterval27.isAfterNow();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval33.toMutableInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval36.getEnd();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval36.toMutableInterval();
        boolean boolean39 = mutableInterval27.equals((java.lang.Object) mutableInterval36);
        org.joda.time.Period period40 = mutableInterval27.toPeriod();
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableInterval45.setDurationAfterStart(readableDuration48);
        boolean boolean50 = mutableInterval45.isAfterNow();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        mutableInterval54.setDurationAfterStart((long) (byte) 1);
        boolean boolean59 = mutableInterval54.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        java.lang.Object obj66 = mutableInterval64.clone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(obj66, chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableInterval68.setPeriodAfterStart(readablePeriod69);
        org.joda.time.Period period71 = mutableInterval68.toPeriod();
        mutableInterval54.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period71);
        mutableInterval45.setPeriodAfterStart((org.joda.time.ReadablePeriod) period71);
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Chronology chronology75 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(1606267383350L, 1606267385209L);
        boolean boolean79 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval78);
        boolean boolean81 = mutableInterval78.isBefore(1606267418063L);
        java.lang.String str82 = mutableInterval78.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1606267582126L + "'", long28 == 1606267582126L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2020-11-25T01:23:03.350Z/2020-11-25T01:23:05.209Z" + "'", str82, "2020-11-25T01:23:03.350Z/2020-11-25T01:23:05.209Z");
    }

    @Test
    @Ignore
  public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTime dateTime15 = mutableInterval7.getStart();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7);
        mutableInterval16.setEndMillis(1606267402322L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readableInstant25, readablePeriod26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        mutableInterval27.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(readablePeriod24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readablePeriod23, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant43, readablePeriod44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        mutableInterval45.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime60 = mutableInterval59.getStart();
        mutableInterval59.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean64 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(obj70, chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        mutableInterval72.setPeriodBeforeEnd(readablePeriod73);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval(0L, 1L, chronology77);
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        mutableInterval78.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        long long87 = interval86.getEndMillis();
        boolean boolean89 = interval86.isAfter((long) (byte) 100);
        boolean boolean90 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) interval86);
        org.joda.time.Duration duration91 = mutableInterval78.toDuration();
        boolean boolean92 = mutableInterval72.isBefore((org.joda.time.ReadableInterval) mutableInterval78);
        org.joda.time.MutableInterval mutableInterval93 = mutableInterval78.toMutableInterval();
        java.lang.String str94 = mutableInterval93.toString();
        java.lang.String str95 = mutableInterval93.toString();
        boolean boolean96 = mutableInterval59.isBefore((org.joda.time.ReadableInterval) mutableInterval93);
        org.joda.time.Period period97 = mutableInterval59.toPeriod();
        mutableInterval16.setPeriodAfterStart((org.joda.time.ReadablePeriod) period97);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(mutableInterval93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str94, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str95, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(period97);
    }

    @Test
    @Ignore
  public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableInterval75.setDurationBeforeEnd(readableDuration76);
        boolean boolean78 = mutableInterval75.isBeforeNow();
        java.lang.Object obj79 = mutableInterval75.clone();
        org.joda.time.DateTime dateTime80 = mutableInterval75.getStart();
        boolean boolean81 = mutableInterval13.isBefore((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    @Ignore
  public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (byte) 10, 1606267407247L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, 1L, chronology5);
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        mutableInterval6.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        long long15 = interval14.getEndMillis();
        boolean boolean17 = interval14.isAfter((long) (byte) 100);
        boolean boolean18 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration19 = mutableInterval6.toDuration();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readableInstant26, readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        org.joda.time.DateTime dateTime40 = mutableInterval38.getStart();
        mutableInterval28.setInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(obj55, chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableInterval57.setPeriodAfterStart(readablePeriod58);
        org.joda.time.Period period60 = mutableInterval57.toPeriod();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadablePeriod) period60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(obj67, chronology68);
        org.joda.time.Duration duration70 = mutableInterval69.toDuration();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        org.joda.time.Interval interval79 = mutableInterval76.toInterval();
        org.joda.time.ReadableInterval readableInterval80 = null;
        boolean boolean81 = mutableInterval76.isBefore(readableInterval80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology84);
        boolean boolean86 = mutableInterval76.isAfter((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.Interval interval87 = mutableInterval76.toInterval();
        org.joda.time.Period period88 = mutableInterval76.toPeriod();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadablePeriod) period88);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period88);
        mutableInterval2.setDurationBeforeEnd(1606267568173L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:24:03.083Z/2020-11-25T01:24:03.093Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267297007L);
        org.joda.time.Interval interval20 = mutableInterval9.toInterval();
        mutableInterval9.setEndMillis(1606267388669L);
        java.lang.String str23 = mutableInterval9.toString();
        org.joda.time.Interval interval24 = mutableInterval9.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.035Z/2020-11-25T01:23:08.669Z" + "'", str23, "1970-01-01T00:00:00.035Z/2020-11-25T01:23:08.669Z");
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    @Ignore
  public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Interval interval11 = mutableInterval7.toInterval();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableInterval7.setDurationBeforeEnd(readableDuration12);
        boolean boolean14 = mutableInterval7.isBeforeNow();
        java.lang.Class<?> wildcardClass15 = mutableInterval7.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    @Ignore
  public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        long long6 = mutableInterval2.toDurationMillis();
        boolean boolean8 = mutableInterval2.contains((long) 100);
        boolean boolean10 = mutableInterval2.isAfter(1606267455941L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        boolean boolean19 = mutableInterval14.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        java.lang.Object obj26 = mutableInterval24.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(obj26, chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval28.setPeriodAfterStart(readablePeriod29);
        org.joda.time.Period period31 = mutableInterval28.toPeriod();
        mutableInterval14.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval14.toMutableInterval();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        mutableInterval37.setEndMillis((long) '#');
        org.joda.time.Duration duration54 = mutableInterval37.toDuration();
        org.joda.time.Duration duration55 = mutableInterval37.toDuration();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Interval interval62 = mutableInterval59.toInterval();
        boolean boolean64 = interval62.contains(1606267346472L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(readableInstant71, readablePeriod72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(0L, 1L, chronology76);
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        org.joda.time.DateTime dateTime79 = mutableInterval77.getStart();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        org.joda.time.DateTime dateTime85 = mutableInterval83.getStart();
        mutableInterval73.setInterval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime88 = mutableInterval87.getStart();
        org.joda.time.DateTime dateTime89 = mutableInterval87.getEnd();
        boolean boolean90 = interval62.contains((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime89);
        mutableInterval14.setStart((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean93 = mutableInterval2.isBefore((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    @Ignore
  public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        long long18 = mutableInterval3.getStartMillis();
        java.lang.Object obj19 = mutableInterval3.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        boolean boolean3 = mutableInterval1.isAfter(100L);
        boolean boolean5 = mutableInterval1.isBefore(1606267373303L);
        long long6 = mutableInterval1.getEndMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) long6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    @Ignore
  public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        org.joda.time.Period period9 = mutableInterval3.toPeriod();
        org.joda.time.MutableInterval mutableInterval10 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        long long21 = mutableInterval20.toDurationMillis();
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTime dateTime23 = mutableInterval13.getEnd();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        long long36 = interval35.getEndMillis();
        boolean boolean38 = interval35.isAfter((long) (byte) 100);
        boolean boolean39 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = mutableInterval27.toDuration();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration40);
        mutableInterval10.setEnd((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        org.joda.time.DateTime dateTime65 = mutableInterval63.getStart();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(0L, 1L, chronology68);
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        java.lang.Object obj71 = mutableInterval69.clone();
        org.joda.time.Interval interval72 = mutableInterval69.toInterval();
        org.joda.time.ReadableInterval readableInterval73 = null;
        boolean boolean74 = mutableInterval69.isBefore(readableInterval73);
        org.joda.time.MutableInterval mutableInterval75 = mutableInterval69.copy();
        boolean boolean76 = mutableInterval63.contains((org.joda.time.ReadableInterval) mutableInterval69);
        mutableInterval69.setInterval((long) '#', 1606267297007L);
        org.joda.time.Chronology chronology80 = mutableInterval69.getChronology();
        boolean boolean81 = mutableInterval69.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(readableInstant82, readablePeriod83);
        mutableInterval84.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval87 = mutableInterval84.toMutableInterval();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutableInterval mutableInterval91 = new org.joda.time.MutableInterval(0L, 1L, chronology90);
        long long92 = mutableInterval91.toDurationMillis();
        mutableInterval84.setInterval((org.joda.time.ReadableInterval) mutableInterval91);
        boolean boolean94 = mutableInterval69.isBefore((org.joda.time.ReadableInterval) mutableInterval91);
        org.joda.time.Duration duration95 = mutableInterval91.toDuration();
        mutableInterval10.setDurationAfterStart((org.joda.time.ReadableDuration) duration95);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval10.setStartMillis(1606267373383L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(duration95);
    }

    @Test
    @Ignore
  public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        java.lang.Object obj52 = mutableInterval50.clone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(obj52, chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod55);
        org.joda.time.Period period57 = mutableInterval54.toPeriod();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(obj64, chronology65);
        org.joda.time.Duration duration67 = mutableInterval66.toDuration();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(readableInstant70, readablePeriod71);
        mutableInterval72.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval75 = mutableInterval72.toMutableInterval();
        org.joda.time.DateTime dateTime76 = mutableInterval75.getEnd();
        boolean boolean77 = mutableInterval69.contains((org.joda.time.ReadableInstant) dateTime76);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    @Ignore
  public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        mutableInterval3.setStartMillis((-1L));
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    @Ignore
  public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        long long6 = mutableInterval2.toDurationMillis();
        boolean boolean8 = mutableInterval2.contains((long) 100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        mutableInterval19.setDurationAfterStart((long) (byte) 1);
        boolean boolean24 = mutableInterval19.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        mutableInterval12.setChronology(chronology25);
        mutableInterval12.setEndMillis((long) '#');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(obj34, chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableInterval36.setPeriodBeforeEnd(readablePeriod37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        mutableInterval42.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        long long51 = interval50.getEndMillis();
        boolean boolean53 = interval50.isAfter((long) (byte) 100);
        boolean boolean54 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Duration duration55 = mutableInterval42.toDuration();
        boolean boolean56 = mutableInterval36.isBefore((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval42.toMutableInterval();
        java.lang.String str58 = mutableInterval57.toString();
        java.lang.String str59 = mutableInterval57.toString();
        boolean boolean60 = mutableInterval12.isAfter((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Interval interval61 = mutableInterval57.toInterval();
        boolean boolean62 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) interval61);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str58, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str59, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) ' ', 1606267298802L);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.Interval interval4 = mutableInterval2.toInterval();
        long long5 = interval4.getStartMillis();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267298802L + "'", long3 == 1606267298802L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
    }

    @Test
    @Ignore
  public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval1.copy();
        mutableInterval1.setEndMillis(1606267397646L);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
    }

    @Test
    @Ignore
  public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(obj9, chronology10);
        org.joda.time.Duration duration12 = mutableInterval11.toDuration();
        mutableInterval2.setDurationAfterStart((org.joda.time.ReadableDuration) duration12);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267583819L + "'", long3 == 1606267583819L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration12);
    }

    @Test
    @Ignore
  public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        mutableInterval13.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology18 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = mutableInterval13.toMutableInterval();
        boolean boolean20 = mutableInterval7.isAfter((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval7.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableInterval21);
    }

    @Test
    @Ignore
  public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.DateTime dateTime8 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodAfterStart(readablePeriod27);
        org.joda.time.Period period29 = mutableInterval26.toPeriod();
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval31.copy();
        boolean boolean33 = mutableInterval31.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    @Ignore
  public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutableInterval10.setDurationAfterStart((long) (byte) 1);
        boolean boolean15 = mutableInterval10.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        mutableInterval3.setChronology(chronology16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodAfterStart(readablePeriod26);
        org.joda.time.Period period28 = mutableInterval25.toPeriod();
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval25.copy();
        boolean boolean30 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        boolean boolean39 = mutableInterval3.equals((java.lang.Object) mutableInterval38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod40);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    @Ignore
  public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.Chronology chronology31 = mutableInterval30.getChronology();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readablePeriod37, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readablePeriod36, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(readableInstant56, readablePeriod57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        org.joda.time.DateTime dateTime64 = mutableInterval62.getStart();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime73 = mutableInterval72.getStart();
        mutableInterval72.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean77 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval(0L, 1L, chronology81);
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        org.joda.time.DateTime dateTime84 = mutableInterval82.getStart();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(readablePeriod78, (org.joda.time.ReadableInstant) dateTime84);
        mutableInterval72.setStart((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.ReadableDuration readableDuration87 = null;
        mutableInterval72.setDurationBeforeEnd(readableDuration87);
        org.joda.time.Chronology chronology89 = mutableInterval72.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval90 = new org.joda.time.MutableInterval((java.lang.Object) chronology31, chronology89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology89);
    }

    @Test
    @Ignore
  public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(obj14, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableInterval16.setPeriodBeforeEnd(readablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        mutableInterval22.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        long long31 = interval30.getEndMillis();
        boolean boolean33 = interval30.isAfter((long) (byte) 100);
        boolean boolean34 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Duration duration35 = mutableInterval22.toDuration();
        boolean boolean36 = mutableInterval16.isBefore((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval22.toMutableInterval();
        boolean boolean38 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        boolean boolean40 = mutableInterval37.contains(1606267320652L);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableInterval44.setPeriodBeforeEnd(readablePeriod45);
        mutableInterval44.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        long long52 = mutableInterval51.getEndMillis();
        boolean boolean53 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        boolean boolean54 = mutableInterval51.isAfterNow();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readableInstant55, readablePeriod56);
        mutableInterval57.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval57.toMutableInterval();
        org.joda.time.DateTime dateTime61 = mutableInterval60.getEnd();
        org.joda.time.MutableInterval mutableInterval62 = mutableInterval60.toMutableInterval();
        boolean boolean63 = mutableInterval51.equals((java.lang.Object) mutableInterval60);
        org.joda.time.Period period64 = mutableInterval51.toPeriod();
        mutableInterval37.setPeriodAfterStart((org.joda.time.ReadablePeriod) period64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = mutableInterval37.toPeriod(periodType66);
        org.joda.time.DateTime dateTime68 = mutableInterval37.getEnd();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1606267584190L + "'", long52 == 1606267584190L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        mutableInterval12.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval12.toMutableInterval();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        long long20 = mutableInterval19.toDurationMillis();
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        mutableInterval12.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        mutableInterval31.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(0L, 1L, chronology37);
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        mutableInterval38.setDurationAfterStart((long) (byte) 1);
        boolean boolean43 = mutableInterval38.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        mutableInterval31.setChronology(chronology44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology44);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology44);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval12, chronology44);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology44);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(1606267335470L, 1606267335562L, chronology44);
        mutableInterval3.setChronology(chronology44);
        boolean boolean52 = mutableInterval3.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2020-11-25T01:24:59.326Z/2020-11-25T01:24:59.326Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval5.getStart();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        mutableInterval10.setInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = mutableInterval24.getStart();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getEnd();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableInterval30.setDurationBeforeEnd(readableDuration31);
        long long33 = mutableInterval30.getEndMillis();
        org.joda.time.Interval interval34 = mutableInterval30.toInterval();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        long long38 = mutableInterval37.getEndMillis();
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval37.copy();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(readableDuration40, readableInstant41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = mutableInterval42.toPeriod(periodType43);
        mutableInterval37.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = mutableInterval37.getStart();
        mutableInterval37.setDurationBeforeEnd((long) (short) 10);
        boolean boolean49 = mutableInterval30.isAfter((org.joda.time.ReadableInterval) mutableInterval37);
        long long50 = mutableInterval37.getStartMillis();
        org.joda.time.MutableInterval mutableInterval51 = mutableInterval37.toMutableInterval();
        org.joda.time.Duration duration52 = mutableInterval51.toDuration();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval53);
        boolean boolean55 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval53);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(interval34);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1606267584462L + "'", long38 == 1606267584462L);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1606267584452L + "'", long50 == 1606267584452L);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        org.joda.time.DateTime dateTime26 = mutableInterval22.getEnd();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval22);
        boolean boolean28 = mutableInterval22.isAfterNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    @Ignore
  public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodAfterStart(readablePeriod25);
        org.joda.time.Period period27 = mutableInterval24.toPeriod();
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval24.copy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        java.lang.Object obj34 = mutableInterval32.clone();
        mutableInterval32.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology37 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval38 = mutableInterval32.toMutableInterval();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        mutableInterval47.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        long long56 = interval55.getEndMillis();
        boolean boolean58 = interval55.isAfter((long) (byte) 100);
        boolean boolean59 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration60 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval(readableInstant67, readablePeriod68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        org.joda.time.DateTime dateTime75 = mutableInterval73.getStart();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval(0L, 1L, chronology78);
        org.joda.time.Interval interval80 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime81 = mutableInterval79.getStart();
        mutableInterval69.setInterval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime81);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        boolean boolean87 = mutableInterval24.contains((org.joda.time.ReadableInterval) mutableInterval38);
        boolean boolean88 = mutableInterval9.isBefore((org.joda.time.ReadableInterval) mutableInterval38);
        boolean boolean90 = mutableInterval9.isBefore(1606267407247L);
        long long91 = mutableInterval9.getStartMillis();
        java.lang.Class<?> wildcardClass92 = mutableInterval9.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    @Ignore
  public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodAfterStart(readablePeriod8);
        org.joda.time.Period period10 = mutableInterval7.toPeriod();
        org.joda.time.Interval interval11 = mutableInterval7.toInterval();
        boolean boolean13 = mutableInterval7.contains(1606267391858L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        mutableInterval17.setEnd(readableInstant21);
        mutableInterval17.setDurationBeforeEnd(0L);
        long long25 = mutableInterval17.toDurationMillis();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        java.lang.Object obj37 = mutableInterval35.clone();
        org.joda.time.Interval interval38 = mutableInterval35.toInterval();
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = mutableInterval35.isBefore(readableInterval39);
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval35.copy();
        boolean boolean42 = mutableInterval29.contains((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(obj48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableInterval50.setPeriodBeforeEnd(readablePeriod51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval(0L, 1L, chronology55);
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        mutableInterval56.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(0L, 1L, chronology62);
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        long long65 = interval64.getEndMillis();
        boolean boolean67 = interval64.isAfter((long) (byte) 100);
        boolean boolean68 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Duration duration69 = mutableInterval56.toDuration();
        boolean boolean70 = mutableInterval50.isBefore((org.joda.time.ReadableInterval) mutableInterval56);
        org.joda.time.MutableInterval mutableInterval71 = mutableInterval56.toMutableInterval();
        mutableInterval29.setInterval((org.joda.time.ReadableInterval) mutableInterval71);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        boolean boolean79 = mutableInterval76.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval76.copy();
        org.joda.time.Duration duration81 = mutableInterval76.toDuration();
        mutableInterval71.setDurationAfterStart((org.joda.time.ReadableDuration) duration81);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration81);
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval17);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) mutableInterval84);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(duration81);
    }

    @Test
    @Ignore
  public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) interval25);
        mutableInterval12.setDurationAfterStart((long) 1);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readableInstant35, readablePeriod36);
        mutableInterval37.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval37.toMutableInterval();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        long long45 = mutableInterval44.toDurationMillis();
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.Duration duration47 = mutableInterval44.toDuration();
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        java.lang.Object obj49 = mutableInterval33.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 1, 1606267383467L);
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.Period period4 = interval3.toPeriod();
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    @Ignore
  public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj6);
        java.lang.Class<?> wildcardClass8 = mutableInterval7.getClass();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    @Ignore
  public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) mutableInterval16);
        org.joda.time.Duration duration18 = mutableInterval16.toDuration();
        boolean boolean20 = mutableInterval16.contains(1606267432648L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    @Ignore
  public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        mutableInterval5.setDurationAfterStart((long) (byte) 1);
        boolean boolean9 = mutableInterval5.isAfterNow();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.DateTime dateTime15 = mutableInterval13.getStart();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(0L, 1L, chronology18);
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        java.lang.Object obj21 = mutableInterval19.clone();
        org.joda.time.Interval interval22 = mutableInterval19.toInterval();
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = mutableInterval19.isBefore(readableInterval23);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval19.copy();
        boolean boolean26 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        mutableInterval30.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        java.lang.Object obj39 = mutableInterval37.clone();
        org.joda.time.Interval interval40 = mutableInterval37.toInterval();
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = mutableInterval37.isBefore(readableInterval41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology45);
        boolean boolean47 = mutableInterval37.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        boolean boolean54 = mutableInterval37.isBefore((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval(obj61, chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableInterval63.setPeriodAfterStart(readablePeriod64);
        org.joda.time.Period period66 = mutableInterval63.toPeriod();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        java.lang.Object obj72 = mutableInterval70.clone();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(obj72, chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutableInterval74.setPeriodAfterStart(readablePeriod75);
        org.joda.time.Period period77 = mutableInterval74.toPeriod();
        mutableInterval63.setPeriodAfterStart((org.joda.time.ReadablePeriod) period77);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadablePeriod) period77);
        boolean boolean80 = mutableInterval13.equals((java.lang.Object) mutableInterval79);
        org.joda.time.Duration duration81 = mutableInterval13.toDuration();
        org.joda.time.Interval interval82 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology83 = interval82.getChronology();
        mutableInterval5.setChronology(chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(1606267504803L, 1606267386522L, chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readableInstant17, readablePeriod18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        mutableInterval19.setInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval33.copy();
        org.joda.time.MutableInterval mutableInterval35 = mutableInterval33.copy();
        long long36 = mutableInterval33.toDurationMillis();
        long long37 = mutableInterval33.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    }

    @Test
    @Ignore
  public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology8 = mutableInterval3.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.toMutableInterval();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        mutableInterval18.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        long long27 = interval26.getEndMillis();
        boolean boolean29 = interval26.isAfter((long) (byte) 100);
        boolean boolean30 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Duration duration31 = mutableInterval18.toDuration();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime52);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, readableInstant58);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        mutableInterval5.setDurationAfterStart(1606267297007L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readablePeriod5, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(readablePeriod4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        org.joda.time.DateTime dateTime32 = mutableInterval30.getStart();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime41 = mutableInterval40.getStart();
        mutableInterval40.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean45 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        mutableInterval40.setStartMillis(0L);
        org.joda.time.Period period48 = mutableInterval40.toPeriod();
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval40.toMutableInterval();
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(mutableInterval49);
    }

    @Test
    @Ignore
  public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        long long9 = mutableInterval3.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableInstant10, readablePeriod11);
        mutableInterval12.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval12.toMutableInterval();
        org.joda.time.Period period16 = mutableInterval12.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(readableInstant19, readablePeriod20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        mutableInterval21.setInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(readablePeriod18, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readablePeriod17, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean54 = mutableInterval12.isAfter((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean55 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        mutableInterval59.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        mutableInterval66.setDurationAfterStart((long) (byte) 1);
        boolean boolean71 = mutableInterval66.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology72 = mutableInterval66.getChronology();
        mutableInterval59.setChronology(chronology72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = mutableInterval59.toPeriod(periodType74);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period75);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    @Ignore
  public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.Duration duration13 = mutableInterval5.toDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval18, chronology50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology50);
        mutableInterval5.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology50);
        org.joda.time.Chronology chronology58 = mutableInterval57.getChronology();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        java.lang.Object obj64 = mutableInterval62.clone();
        mutableInterval62.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology67 = mutableInterval62.getChronology();
        boolean boolean68 = mutableInterval57.equals((java.lang.Object) mutableInterval62);
        org.joda.time.Period period69 = mutableInterval62.toPeriod();
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval62.copy();
        mutableInterval70.setInterval((long) (short) 100, 1606267551258L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval70.setStartMillis(1606267568173L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(mutableInterval70);
    }

    @Test
    @Ignore
  public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        mutableInterval5.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology10 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval12 = mutableInterval5.copy();
        org.joda.time.Duration duration13 = mutableInterval5.toDuration();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readableInstant16, readablePeriod17);
        mutableInterval18.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval21 = mutableInterval18.toMutableInterval();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        long long26 = mutableInterval25.toDurationMillis();
        mutableInterval18.setInterval((org.joda.time.ReadableInterval) mutableInterval25);
        mutableInterval18.setDurationAfterStart(100L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(0L, 1L, chronology36);
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        mutableInterval37.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        mutableInterval37.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((long) (-1), (long) '4', chronology50);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((long) (short) 1, (long) 100, chronology50);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval18, chronology50);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) (short) 1, (long) ' ', chronology50);
        mutableInterval5.setChronology(chronology50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) ' ', (long) (short) 100, chronology50);
        boolean boolean58 = mutableInterval57.isAfterNow();
        org.joda.time.Duration duration59 = mutableInterval57.toDuration();
        boolean boolean61 = mutableInterval57.isBefore((long) (byte) 10);
        mutableInterval57.setDurationBeforeEnd(1606267338158L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    @Ignore
  public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(obj11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableInterval13.setPeriodAfterStart(readablePeriod14);
        org.joda.time.Period period16 = mutableInterval13.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(obj23, chronology24);
        org.joda.time.Duration duration26 = mutableInterval25.toDuration();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        java.lang.Object obj36 = mutableInterval34.clone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval(obj36, chronology37);
        org.joda.time.DateTime dateTime39 = mutableInterval38.getEnd();
        boolean boolean40 = mutableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = mutableInterval27.isBefore((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        java.lang.Object obj47 = mutableInterval45.clone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(obj47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableInterval49.setPeriodBeforeEnd(readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1L, chronology61);
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        long long64 = interval63.getEndMillis();
        boolean boolean66 = interval63.isAfter((long) (byte) 100);
        boolean boolean67 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration68 = mutableInterval55.toDuration();
        boolean boolean69 = mutableInterval49.isBefore((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval(0L, 1L, chronology72);
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        java.lang.Object obj75 = mutableInterval73.clone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval(obj75, chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        mutableInterval77.setPeriodAfterStart(readablePeriod78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval(0L, 1L, chronology82);
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        java.lang.Object obj85 = mutableInterval83.clone();
        mutableInterval83.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology88 = mutableInterval83.getChronology();
        org.joda.time.MutableInterval mutableInterval89 = mutableInterval83.toMutableInterval();
        boolean boolean90 = mutableInterval77.isAfter((org.joda.time.ReadableInterval) mutableInterval89);
        mutableInterval55.setInterval((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.MutableInterval mutableInterval92 = mutableInterval55.copy();
        org.joda.time.Chronology chronology93 = mutableInterval55.getChronology();
        org.joda.time.MutableInterval mutableInterval94 = mutableInterval55.toMutableInterval();
        boolean boolean96 = mutableInterval55.isAfter(1606267389160L);
        boolean boolean97 = mutableInterval27.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj98 = mutableInterval27.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(mutableInterval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(mutableInterval92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(mutableInterval94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(obj98);
        org.junit.Assert.assertEquals(obj98.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj98), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj98), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = mutableInterval3.isBefore(readableInterval7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology11);
        boolean boolean13 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean14 = mutableInterval12.containsNow();
        org.joda.time.Interval interval15 = mutableInterval12.toInterval();
        boolean boolean17 = mutableInterval12.isAfter(1606267429198L);
        boolean boolean18 = mutableInterval12.isAfterNow();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(obj24, chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableInterval26.setPeriodBeforeEnd(readablePeriod27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        long long41 = interval40.getEndMillis();
        boolean boolean43 = interval40.isAfter((long) (byte) 100);
        boolean boolean44 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = mutableInterval32.toDuration();
        boolean boolean46 = mutableInterval26.isBefore((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval32.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(readableInstant49, readablePeriod50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        org.joda.time.DateTime dateTime57 = mutableInterval55.getStart();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval(0L, 1L, chronology60);
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        org.joda.time.DateTime dateTime63 = mutableInterval61.getStart();
        mutableInterval51.setInterval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(readablePeriod48, (org.joda.time.ReadableInstant) dateTime57);
        mutableInterval32.setEnd((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime67 = mutableInterval32.getEnd();
        org.joda.time.Interval interval68 = mutableInterval32.toInterval();
        org.joda.time.Duration duration69 = mutableInterval32.toDuration();
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration69);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableInterval40.setPeriodAfterStart(readablePeriod41);
        org.joda.time.Duration duration43 = mutableInterval40.toDuration();
        boolean boolean44 = mutableInterval40.containsNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    @Ignore
  public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod6);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.DateTime dateTime9 = mutableInterval3.getStart();
        long long10 = mutableInterval3.getStartMillis();
        long long11 = mutableInterval3.getEndMillis();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval15.copy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(readableInstant24, readablePeriod25);
        mutableInterval26.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval29 = mutableInterval26.toMutableInterval();
        boolean boolean30 = interval22.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Period period31 = interval22.toPeriod();
        mutableInterval15.setPeriodAfterStart((org.joda.time.ReadablePeriod) period31);
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period31);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    @Ignore
  public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.DateTime dateTime6 = mutableInterval5.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval5.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        mutableInterval11.setDurationAfterStart((long) (byte) 1);
        mutableInterval11.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        java.lang.Object obj28 = mutableInterval26.clone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(obj28, chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableInterval30.setPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = mutableInterval30.toPeriod();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) period33);
        boolean boolean35 = mutableInterval11.isBefore((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean36 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean38 = mutableInterval7.isBefore(1606267314186L);
        org.joda.time.Duration duration39 = mutableInterval7.toDuration();
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    @Ignore
  public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        long long8 = mutableInterval7.getEndMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.copy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = mutableInterval12.toPeriod(periodType13);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = mutableInterval7.getStart();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodBeforeEnd(readablePeriod25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(readableInstant27, readablePeriod28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.DateTime dateTime35 = mutableInterval33.getStart();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        org.joda.time.DateTime dateTime41 = mutableInterval39.getStart();
        mutableInterval29.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        java.lang.Object obj48 = mutableInterval46.clone();
        org.joda.time.Interval interval49 = mutableInterval46.toInterval();
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = mutableInterval46.isBefore(readableInterval50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology54);
        boolean boolean56 = mutableInterval46.isAfter((org.joda.time.ReadableInterval) mutableInterval55);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(0L, 1L, chronology59);
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        org.joda.time.DateTime dateTime62 = mutableInterval60.getStart();
        boolean boolean63 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime62);
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean66 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean68 = mutableInterval2.isBefore(1606267478777L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1606267586544L + "'", long8 == 1606267586544L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(readableInstant2, readablePeriod3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval8.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        org.joda.time.DateTime dateTime16 = mutableInterval14.getStart();
        mutableInterval4.setInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(readablePeriod1, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime37 = mutableInterval36.getStart();
        org.joda.time.Period period38 = mutableInterval36.toPeriod();
        long long39 = mutableInterval36.toDurationMillis();
        mutableInterval36.setDurationAfterStart(1606267407118L);
        long long42 = mutableInterval36.getEndMillis();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1606267407118L + "'", long42 == 1606267407118L);
    }

    @Test
    @Ignore
  public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval(0L, 1L, chronology3);
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        java.lang.Object obj6 = mutableInterval4.clone();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj6, chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableInterval8.setPeriodBeforeEnd(readablePeriod9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        mutableInterval13.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Interval interval33 = mutableInterval30.toInterval();
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = mutableInterval30.isBefore(readableInterval34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology38);
        boolean boolean40 = mutableInterval30.isAfter((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        boolean boolean47 = mutableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime46);
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        java.lang.Object obj56 = mutableInterval53.clone();
        org.joda.time.MutableInterval mutableInterval57 = mutableInterval53.copy();
        org.joda.time.Duration duration58 = mutableInterval53.toDuration();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime dateTime60 = mutableInterval59.getStart();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    @Ignore
  public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267297007L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.Chronology chronology22 = mutableInterval9.getChronology();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    @Ignore
  public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.joda.time.ReadableInstant readableInstant0 = null;
        java.lang.Object obj1 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(readableInstant4, readablePeriod5);
        mutableInterval6.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval6.toMutableInterval();
        org.joda.time.DateTime dateTime10 = mutableInterval9.getEnd();
        org.joda.time.MutableInterval mutableInterval11 = mutableInterval9.toMutableInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        mutableInterval15.setDurationAfterStart((long) (byte) 1);
        mutableInterval15.setDurationAfterStart((long) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        org.joda.time.DateTime dateTime26 = mutableInterval24.getStart();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(obj32, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableInterval34.setPeriodAfterStart(readablePeriod35);
        org.joda.time.Period period37 = mutableInterval34.toPeriod();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) period37);
        boolean boolean39 = mutableInterval15.isBefore((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean40 = mutableInterval11.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology41 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(1606267333465L, 1606267422700L, chronology41);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(obj1, chronology41);
        org.joda.time.Duration duration44 = mutableInterval43.toDuration();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration44);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(duration44);
    }

    @Test
    @Ignore
  public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval3.copy();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableInterval3.setPeriodAfterStart(readablePeriod6);
        java.lang.Object obj8 = mutableInterval3.clone();
        boolean boolean10 = mutableInterval3.isBefore(1606267383908L);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        mutableInterval13.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval16 = mutableInterval13.toMutableInterval();
        org.joda.time.Period period17 = mutableInterval13.toPeriod();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(readableInstant20, readablePeriod21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.DateTime dateTime34 = mutableInterval32.getStart();
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readablePeriod19, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval(readablePeriod18, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        org.joda.time.DateTime dateTime46 = mutableInterval44.getStart();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        org.joda.time.DateTime dateTime52 = mutableInterval50.getStart();
        mutableInterval40.setInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean55 = mutableInterval13.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, readableInstant56);
        boolean boolean58 = mutableInterval3.contains(readableInstant56);
        boolean boolean59 = mutableInterval3.isAfterNow();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        mutableInterval72.setDurationAfterStart((long) (byte) 1);
        boolean boolean77 = mutableInterval72.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        mutableInterval65.setChronology(chronology78);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((long) '4', (long) 'a', chronology78);
        boolean boolean81 = mutableInterval80.isBeforeNow();
        boolean boolean82 = mutableInterval80.containsNow();
        boolean boolean83 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval80);
        java.lang.Object obj84 = mutableInterval3.clone();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutableInterval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        java.lang.Object obj14 = mutableInterval12.clone();
        boolean boolean15 = interval8.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean16 = mutableInterval1.isAfter((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval12.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval17.toMutableInterval();
        java.lang.String str19 = mutableInterval17.toString();
        long long20 = mutableInterval17.toDurationMillis();
        org.joda.time.DateTime dateTime21 = mutableInterval17.getEnd();
        boolean boolean23 = mutableInterval17.isAfter((long) '4');
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str19, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    @Ignore
  public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        boolean boolean4 = mutableInterval2.isAfterNow();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(readableInstant11, readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        org.joda.time.DateTime dateTime19 = mutableInterval17.getStart();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval(0L, 1L, chronology22);
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        org.joda.time.DateTime dateTime25 = mutableInterval23.getStart();
        mutableInterval13.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(readablePeriod10, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval(readablePeriod9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(readableInstant29, readablePeriod30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        org.joda.time.DateTime dateTime43 = mutableInterval41.getStart();
        mutableInterval31.setInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime46 = mutableInterval45.getStart();
        mutableInterval45.setInterval((long) (byte) 1, (long) (short) 1);
        boolean boolean50 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(obj56, chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableInterval58.setPeriodBeforeEnd(readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        mutableInterval64.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval(0L, 1L, chronology70);
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        long long73 = interval72.getEndMillis();
        boolean boolean75 = interval72.isAfter((long) (byte) 100);
        boolean boolean76 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Duration duration77 = mutableInterval64.toDuration();
        boolean boolean78 = mutableInterval58.isBefore((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval64.toMutableInterval();
        java.lang.String str80 = mutableInterval79.toString();
        java.lang.String str81 = mutableInterval79.toString();
        boolean boolean82 = mutableInterval45.isBefore((org.joda.time.ReadableInterval) mutableInterval79);
        org.joda.time.ReadableInterval readableInterval83 = null;
        boolean boolean84 = mutableInterval79.isAfter(readableInterval83);
        org.joda.time.Interval interval85 = mutableInterval79.toInterval();
        org.joda.time.Interval interval86 = mutableInterval79.toInterval();
        org.joda.time.DateTime dateTime87 = mutableInterval79.getStart();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval79);
        long long89 = mutableInterval2.getStartMillis();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str80, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str81, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    @Ignore
  public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        boolean boolean25 = mutableInterval22.isBefore((long) (short) 10);
        org.joda.time.Interval interval26 = mutableInterval22.toInterval();
        boolean boolean27 = interval26.isAfterNow();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Interval interval34 = mutableInterval31.toInterval();
        mutableInterval31.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval31.copy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        java.lang.Object obj44 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval(0L, 1L, chronology47);
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        mutableInterval48.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(0L, 1L, chronology54);
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        mutableInterval55.setDurationAfterStart((long) (byte) 1);
        boolean boolean60 = mutableInterval55.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology61 = mutableInterval55.getChronology();
        mutableInterval48.setChronology(chronology61);
        mutableInterval48.setEndMillis((long) '#');
        org.joda.time.Duration duration65 = mutableInterval48.toDuration();
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.MutableInterval mutableInterval68 = mutableInterval37.copy();
        org.joda.time.Interval interval69 = mutableInterval37.toInterval();
        boolean boolean70 = interval26.isAfter((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Duration duration71 = interval26.toDuration();
        org.joda.time.Interval interval72 = interval26.toInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    @Ignore
  public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        org.joda.time.DateTime dateTime70 = mutableInterval68.getStart();
        boolean boolean71 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval(0L, 1L, chronology74);
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        java.lang.Object obj77 = mutableInterval75.clone();
        mutableInterval75.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology80 = mutableInterval75.getChronology();
        mutableInterval13.setChronology(chronology80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval(0L, 1L, chronology84);
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        java.lang.Object obj87 = mutableInterval85.clone();
        org.joda.time.ReadableDuration readableDuration88 = null;
        mutableInterval85.setDurationAfterStart(readableDuration88);
        boolean boolean90 = mutableInterval85.isAfterNow();
        boolean boolean91 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval85);
        org.joda.time.MutableInterval mutableInterval92 = mutableInterval85.toMutableInterval();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(mutableInterval92);
    }

    @Test
    @Ignore
  public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        long long17 = interval16.getEndMillis();
        boolean boolean19 = interval16.isAfter((long) (byte) 100);
        boolean boolean20 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration21 = mutableInterval8.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        org.joda.time.DateTime dateTime27 = mutableInterval25.getStart();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime42);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutableInterval mutableInterval48 = org.joda.time.MutableInterval.parse("1969-12-31T23:59:59.999Z/1969-12-31T23:59:59.999Z");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(0L, 1L, chronology51);
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        java.lang.Object obj54 = mutableInterval52.clone();
        mutableInterval52.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology57 = mutableInterval52.getChronology();
        org.joda.time.MutableInterval mutableInterval58 = mutableInterval52.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval59 = mutableInterval52.copy();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval52.toMutableInterval();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableInterval64.setDurationBeforeEnd(readableDuration65);
        long long67 = mutableInterval64.getEndMillis();
        boolean boolean68 = mutableInterval60.equals((java.lang.Object) long67);
        mutableInterval48.setInterval((org.joda.time.ReadableInterval) mutableInterval60);
        boolean boolean70 = mutableInterval3.isAfter((org.joda.time.ReadableInterval) mutableInterval60);
        mutableInterval60.setInterval(1606267335626L, 1606267389160L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    @Ignore
  public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        long long3 = mutableInterval2.getEndMillis();
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval2.copy();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = mutableInterval7.toPeriod(periodType8);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        java.lang.Object obj23 = mutableInterval20.clone();
        boolean boolean24 = mutableInterval14.equals((java.lang.Object) mutableInterval20);
        mutableInterval20.setDurationAfterStart(1606267373383L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        mutableInterval30.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology35 = mutableInterval30.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval30.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval30.copy();
        org.joda.time.Duration duration38 = mutableInterval30.toDuration();
        boolean boolean39 = mutableInterval20.equals((java.lang.Object) duration38);
        mutableInterval2.setDurationAfterStart((org.joda.time.ReadableDuration) duration38);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1606267587917L + "'", long3 == 1606267587917L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    @Ignore
  public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        java.lang.Object obj10 = mutableInterval8.clone();
        mutableInterval8.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology13 = mutableInterval8.getChronology();
        mutableInterval2.setChronology(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(readableInstant15, readablePeriod16);
        mutableInterval17.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval17.toMutableInterval();
        org.joda.time.Period period21 = mutableInterval17.toPeriod();
        mutableInterval17.setDurationBeforeEnd((long) '#');
        boolean boolean24 = mutableInterval2.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        boolean boolean25 = mutableInterval2.containsNow();
        boolean boolean27 = mutableInterval2.contains(1606267503636L);
        java.lang.Object obj28 = mutableInterval2.clone();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "2020-11-25T01:26:28.084Z/2020-11-25T01:26:28.085Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "2020-11-25T01:26:28.084Z/2020-11-25T01:26:28.085Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "2020-11-25T01:26:28.084Z/2020-11-25T01:26:28.085Z");
    }

    @Test
    @Ignore
  public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        boolean boolean30 = mutableInterval28.containsNow();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableInstant37, readablePeriod38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(0L, 1L, chronology42);
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        org.joda.time.DateTime dateTime45 = mutableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = mutableInterval53.getStart();
        boolean boolean55 = mutableInterval28.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology56 = mutableInterval28.getChronology();
        java.lang.Object obj57 = mutableInterval28.clone();
        long long58 = mutableInterval28.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
    }

    @Test
    @Ignore
  public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.copy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(obj9, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        mutableInterval16.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(0L, 1L, chronology32);
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        java.lang.Object obj35 = mutableInterval33.clone();
        org.joda.time.Interval interval36 = mutableInterval33.toInterval();
        org.joda.time.ReadableInterval readableInterval37 = null;
        boolean boolean38 = mutableInterval33.isBefore(readableInterval37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology41);
        boolean boolean43 = mutableInterval33.isAfter((org.joda.time.ReadableInterval) mutableInterval42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        boolean boolean50 = mutableInterval33.isBefore((org.joda.time.ReadableInstant) dateTime49);
        mutableInterval11.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = mutableInterval3.isBefore((org.joda.time.ReadableInstant) dateTime49);
        mutableInterval3.setInterval(1606267378710L, 1606267396805L);
        mutableInterval3.setDurationBeforeEnd(1606267499102L);
        long long58 = mutableInterval3.getStartMillis();
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-102297L) + "'", long58 == (-102297L));
    }

    @Test
    @Ignore
  public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        mutableInterval7.setDurationBeforeEnd(1L);
        boolean boolean10 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTime dateTime60 = mutableInterval24.getEnd();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        java.lang.Object obj67 = mutableInterval65.clone();
        java.lang.Object obj68 = mutableInterval65.clone();
        org.joda.time.MutableInterval mutableInterval69 = mutableInterval65.copy();
        org.joda.time.Duration duration70 = mutableInterval65.toDuration();
        mutableInterval61.setDurationAfterStart((org.joda.time.ReadableDuration) duration70);
        long long72 = mutableInterval61.toDurationMillis();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(0L, 1L, chronology75);
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        java.lang.Object obj78 = mutableInterval76.clone();
        java.lang.Object obj79 = mutableInterval76.clone();
        org.joda.time.MutableInterval mutableInterval80 = mutableInterval76.copy();
        org.joda.time.DateTime dateTime81 = mutableInterval76.getStart();
        boolean boolean82 = mutableInterval61.contains((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval61.isBefore(1606267569016L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    @Ignore
  public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(obj15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableInterval17.setPeriodAfterStart(readablePeriod18);
        org.joda.time.Period period20 = mutableInterval17.toPeriod();
        mutableInterval3.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableInterval mutableInterval22 = mutableInterval3.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = mutableInterval25.toPeriod(periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        long long31 = mutableInterval30.getEndMillis();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(readableInstant32, readablePeriod33);
        mutableInterval34.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval34.toMutableInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval37.getEnd();
        boolean boolean39 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval40);
        boolean boolean42 = mutableInterval40.isBeforeNow();
        boolean boolean43 = mutableInterval40.isBeforeNow();
        boolean boolean45 = mutableInterval40.contains(1606267407387L);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(0L, 1L, chronology49);
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        mutableInterval50.setDurationAfterStart((long) (byte) 1);
        boolean boolean55 = mutableInterval50.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval(0L, 1L, chronology58);
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        java.lang.Object obj61 = mutableInterval59.clone();
        mutableInterval59.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology64 = mutableInterval59.getChronology();
        mutableInterval50.setChronology(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(readableInstant66, readablePeriod67);
        mutableInterval68.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval(0L, 1L, chronology73);
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        java.lang.Object obj76 = mutableInterval74.clone();
        mutableInterval74.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology79 = mutableInterval74.getChronology();
        mutableInterval68.setChronology(chronology79);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval50, chronology79);
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval46, chronology79);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(period27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1606267588529L + "'", long31 == 1606267588529L);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    @Ignore
  public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        org.joda.time.Interval interval12 = mutableInterval9.toInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = mutableInterval9.isBefore(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval9.copy();
        boolean boolean16 = mutableInterval3.contains((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval9.setInterval((long) '#', 1606267297007L);
        org.joda.time.Chronology chronology20 = mutableInterval9.getChronology();
        boolean boolean21 = mutableInterval9.isBeforeNow();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableInterval25.setPeriodBeforeEnd(readablePeriod26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(readableInstant28, readablePeriod29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(0L, 1L, chronology33);
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.DateTime dateTime36 = mutableInterval34.getStart();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        mutableInterval30.setInterval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = mutableInterval25.isAfter((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = mutableInterval68.getStart();
        org.joda.time.Duration duration70 = mutableInterval68.toDuration();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration70);
        boolean boolean72 = mutableInterval71.isAfterNow();
        java.lang.String str73 = mutableInterval71.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str73, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    @Ignore
  public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.MutableInterval mutableInterval3 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(0L, 1L, chronology6);
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        java.lang.Object obj9 = mutableInterval7.clone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(obj9, chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableInterval11.setPeriodBeforeEnd(readablePeriod12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(0L, 1L, chronology16);
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        mutableInterval17.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        long long26 = interval25.getEndMillis();
        boolean boolean28 = interval25.isAfter((long) (byte) 100);
        boolean boolean29 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Duration duration30 = mutableInterval17.toDuration();
        boolean boolean31 = mutableInterval11.isBefore((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval17.toMutableInterval();
        java.lang.String str33 = mutableInterval32.toString();
        boolean boolean34 = mutableInterval32.containsNow();
        org.joda.time.Duration duration35 = mutableInterval32.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(readableDuration37, readableInstant38);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval39.toMutableInterval();
        org.joda.time.Interval interval41 = mutableInterval39.toInterval();
        org.joda.time.Duration duration42 = interval41.toDuration();
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str33, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(duration42);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.DateTime dateTime5 = mutableInterval3.getStart();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(readableInstant6, readablePeriod7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        org.joda.time.DateTime dateTime14 = mutableInterval12.getStart();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(0L, 1L, chronology17);
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        org.joda.time.DateTime dateTime20 = mutableInterval18.getStart();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = mutableInterval22.getStart();
        mutableInterval22.setDurationAfterStart((long) 10);
        long long26 = mutableInterval22.getEndMillis();
        mutableInterval22.setDurationAfterStart(1606267391858L);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableInterval22.setPeriodAfterStart(readablePeriod29);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
    }

    @Test
    @Ignore
  public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        mutableInterval3.setStartMillis((long) 1);
        org.joda.time.Period period8 = mutableInterval3.toPeriod();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval(0L, 1L, chronology11);
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        mutableInterval12.setDurationAfterStart((long) (byte) 1);
        boolean boolean17 = mutableInterval12.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        long long19 = mutableInterval12.getStartMillis();
        org.joda.time.Duration duration20 = mutableInterval12.toDuration();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableInterval42.setPeriodBeforeEnd(readablePeriod43);
        mutableInterval42.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(readableInstant47, readablePeriod48);
        long long50 = mutableInterval49.getEndMillis();
        boolean boolean51 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        boolean boolean52 = mutableInterval49.isAfterNow();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(readableInstant53, readablePeriod54);
        mutableInterval55.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval58 = mutableInterval55.toMutableInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval58.getEnd();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval58.toMutableInterval();
        boolean boolean61 = mutableInterval49.equals((java.lang.Object) mutableInterval58);
        boolean boolean62 = mutableInterval24.equals((java.lang.Object) mutableInterval49);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval(0L, 1L, chronology65);
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        java.lang.Object obj68 = mutableInterval66.clone();
        mutableInterval66.setEndMillis((long) '4');
        mutableInterval66.setInterval(35L, 1606267384848L);
        boolean boolean74 = mutableInterval24.isBefore((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.DateTime dateTime75 = mutableInterval66.getEnd();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = mutableInterval76.toPeriod(periodType77);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1606267589078L + "'", long50 == 1606267589078L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    @Ignore
  public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        java.lang.String str29 = mutableInterval28.toString();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((java.lang.Object) str29);
        org.joda.time.MutableInterval mutableInterval31 = mutableInterval30.copy();
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval30.copy();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str29, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
    }

    @Test
    @Ignore
  public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableInterval6.setPeriodBeforeEnd(readablePeriod7);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval6);
        mutableInterval2.setDurationAfterStart(1606267309894L);
        boolean boolean12 = mutableInterval2.containsNow();
        long long13 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval2.toMutableInterval();
        mutableInterval2.setDurationBeforeEnd(1606267470521L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(obj22, chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableInterval24.setPeriodAfterStart(readablePeriod25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(0L, 1L, chronology29);
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        java.lang.Object obj32 = mutableInterval30.clone();
        mutableInterval30.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology35 = mutableInterval30.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval30.toMutableInterval();
        boolean boolean37 = mutableInterval24.isAfter((org.joda.time.ReadableInterval) mutableInterval36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval(0L, 1L, chronology40);
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        java.lang.Object obj43 = mutableInterval41.clone();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(obj43, chronology44);
        org.joda.time.Duration duration46 = mutableInterval45.toDuration();
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval(readableInstant48, readablePeriod49);
        mutableInterval50.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval53 = mutableInterval50.toMutableInterval();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        long long58 = mutableInterval57.toDurationMillis();
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Duration duration60 = mutableInterval57.toDuration();
        boolean boolean61 = mutableInterval36.equals((java.lang.Object) duration60);
        mutableInterval36.setInterval(1606267383350L, 1606267429495L);
        org.joda.time.Duration duration65 = mutableInterval36.toDuration();
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration67 = mutableInterval2.toDuration();
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1606267309894L + "'", long13 == 1606267309894L);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
    }

    @Test
    @Ignore
  public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(obj5, chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval7.setPeriodBeforeEnd(readablePeriod8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        mutableInterval13.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        long long22 = interval21.getEndMillis();
        boolean boolean24 = interval21.isAfter((long) (byte) 100);
        boolean boolean25 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = mutableInterval13.toDuration();
        boolean boolean27 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval28 = mutableInterval13.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(readableInstant30, readablePeriod31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(0L, 1L, chronology35);
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        org.joda.time.DateTime dateTime38 = mutableInterval36.getStart();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(readablePeriod29, (org.joda.time.ReadableInstant) dateTime38);
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        mutableInterval51.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        long long60 = interval59.getEndMillis();
        boolean boolean62 = interval59.isAfter((long) (byte) 100);
        boolean boolean63 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = mutableInterval13.contains((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(obj70, chronology71);
        org.joda.time.Duration duration73 = mutableInterval72.toDuration();
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        mutableInterval13.setEndMillis(1L);
        boolean boolean78 = mutableInterval13.isBefore(1606267389614L);
        boolean boolean79 = mutableInterval13.isAfterNow();
        java.lang.Object obj80 = mutableInterval13.clone();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval(readableInstant58, readablePeriod59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval(0L, 1L, chronology69);
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        org.joda.time.DateTime dateTime72 = mutableInterval70.getStart();
        mutableInterval60.setInterval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime72);
        java.lang.String str75 = mutableInterval74.toString();
        boolean boolean76 = mutableInterval74.isAfterNow();
        boolean boolean77 = mutableInterval74.containsNow();
        org.joda.time.DateTime dateTime78 = mutableInterval74.getStart();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z" + "'", str75, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    @Ignore
  public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval9 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        org.joda.time.Interval interval16 = mutableInterval13.toInterval();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        java.lang.Object obj22 = mutableInterval20.clone();
        boolean boolean23 = interval16.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        boolean boolean24 = mutableInterval9.isAfter((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.MutableInterval mutableInterval25 = mutableInterval20.toMutableInterval();
        boolean boolean26 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Chronology chronology27 = null;
        mutableInterval7.setChronology(chronology27);
        long long29 = mutableInterval7.getStartMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1606267457040L, 1606267527805L);
    }

    @Test
    @Ignore
  public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval5 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        long long10 = mutableInterval9.toDurationMillis();
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(0L, 1L, chronology15);
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        java.lang.Object obj18 = mutableInterval16.clone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval(0L, 1L, chronology21);
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        java.lang.Object obj24 = mutableInterval22.clone();
        java.lang.Object obj25 = mutableInterval22.clone();
        boolean boolean26 = mutableInterval16.equals((java.lang.Object) mutableInterval22);
        org.joda.time.Interval interval27 = mutableInterval22.toInterval();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        java.lang.Object obj33 = mutableInterval31.clone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(obj33, chronology34);
        org.joda.time.DateTime dateTime36 = mutableInterval35.getEnd();
        boolean boolean37 = interval27.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period39 = mutableInterval38.toPeriod();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = mutableInterval38.toPeriod(periodType40);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    @Ignore
  public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        boolean boolean6 = mutableInterval3.isBeforeNow();
        java.lang.Object obj7 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(obj7);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval(0L, 1L, chronology8);
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        java.lang.Object obj11 = mutableInterval9.clone();
        java.lang.Object obj12 = mutableInterval9.clone();
        boolean boolean13 = mutableInterval3.equals((java.lang.Object) mutableInterval9);
        org.joda.time.Interval interval14 = mutableInterval9.toInterval();
        boolean boolean16 = mutableInterval9.isBefore((long) (byte) -1);
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval9.toMutableInterval();
        org.joda.time.Chronology chronology18 = mutableInterval17.getChronology();
        boolean boolean20 = mutableInterval17.isBefore(1606267574088L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    @Ignore
  public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        boolean boolean8 = mutableInterval3.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        mutableInterval3.setStartMillis((long) (byte) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        org.joda.time.DateTime dateTime17 = mutableInterval15.getStart();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        java.lang.Object obj23 = mutableInterval21.clone();
        org.joda.time.Interval interval24 = mutableInterval21.toInterval();
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = mutableInterval21.isBefore(readableInterval25);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval21.copy();
        boolean boolean28 = mutableInterval15.contains((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        mutableInterval32.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval(0L, 1L, chronology38);
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        long long41 = interval40.getEndMillis();
        boolean boolean43 = interval40.isAfter((long) (byte) 100);
        boolean boolean44 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = mutableInterval32.toDuration();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval(0L, 1L, chronology48);
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        org.joda.time.DateTime dateTime51 = mutableInterval49.getStart();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        mutableInterval69.setPeriodAfterStart(readablePeriod70);
        org.joda.time.Chronology chronology72 = mutableInterval69.getChronology();
        long long73 = mutableInterval69.getStartMillis();
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval69.copy();
        org.joda.time.DateTime dateTime75 = mutableInterval74.getEnd();
        mutableInterval15.setStart((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((long) (-1), (long) (byte) 100);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval(0L, 1L, chronology83);
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        org.joda.time.DateTime dateTime86 = mutableInterval84.getStart();
        org.joda.time.Interval interval87 = mutableInterval84.toInterval();
        boolean boolean88 = mutableInterval80.isAfter((org.joda.time.ReadableInterval) mutableInterval84);
        boolean boolean89 = mutableInterval3.isBefore((org.joda.time.ReadableInterval) mutableInterval80);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableInterval3.setDurationBeforeEnd(readableDuration4);
        long long6 = mutableInterval3.getEndMillis();
        org.joda.time.Interval interval7 = mutableInterval3.toInterval();
        boolean boolean9 = mutableInterval3.contains(1606267465215L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.000Z/2020-11-25T01:22:43.001Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    @Ignore
  public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) ' ', 1606267298802L);
        java.lang.Object obj3 = mutableInterval2.clone();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "1970-01-01T00:00:00.032Z/2020-11-25T01:21:38.802Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "1970-01-01T00:00:00.032Z/2020-11-25T01:21:38.802Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "1970-01-01T00:00:00.032Z/2020-11-25T01:21:38.802Z");
    }

    @Test
    @Ignore
  public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Period period4 = mutableInterval2.toPeriod(periodType3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(readableInstant5, readablePeriod6);
        mutableInterval7.setDurationBeforeEnd(1L);
        boolean boolean10 = mutableInterval7.isAfterNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        java.lang.Object obj16 = mutableInterval14.clone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval(obj16, chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        mutableInterval18.setPeriodBeforeEnd(readablePeriod19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval(0L, 1L, chronology23);
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        mutableInterval24.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        long long33 = interval32.getEndMillis();
        boolean boolean35 = interval32.isAfter((long) (byte) 100);
        boolean boolean36 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = mutableInterval24.toDuration();
        boolean boolean38 = mutableInterval18.isBefore((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval24.toMutableInterval();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval(readableInstant41, readablePeriod42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        org.joda.time.DateTime dateTime49 = mutableInterval47.getStart();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        org.joda.time.DateTime dateTime55 = mutableInterval53.getStart();
        mutableInterval43.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(readablePeriod40, (org.joda.time.ReadableInstant) dateTime49);
        mutableInterval24.setEnd((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean59 = mutableInterval7.contains((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTime dateTime60 = mutableInterval24.getEnd();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period4, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval61);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    @Ignore
  public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        boolean boolean10 = mutableInterval3.contains((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        long long23 = interval22.getEndMillis();
        boolean boolean25 = interval22.isAfter((long) (byte) 100);
        boolean boolean26 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Duration duration27 = mutableInterval14.toDuration();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval(0L, 1L, chronology30);
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        org.joda.time.DateTime dateTime33 = mutableInterval31.getStart();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval(readableInstant34, readablePeriod35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(0L, 1L, chronology39);
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        org.joda.time.DateTime dateTime42 = mutableInterval40.getStart();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval(0L, 1L, chronology45);
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        org.joda.time.DateTime dateTime48 = mutableInterval46.getStart();
        mutableInterval36.setInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(readableInstant52, readablePeriod53);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval(0L, 1L, chronology57);
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        org.joda.time.DateTime dateTime60 = mutableInterval58.getStart();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval(0L, 1L, chronology63);
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        org.joda.time.DateTime dateTime66 = mutableInterval64.getStart();
        mutableInterval54.setInterval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime60);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        org.joda.time.MutableInterval mutableInterval71 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.032Z/1970-01-01T00:00:00.100Z");
        org.joda.time.DateTime dateTime72 = mutableInterval71.getStart();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime72);
        boolean boolean75 = mutableInterval73.equals((java.lang.Object) "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(mutableInterval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    @Ignore
  public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Duration duration8 = mutableInterval3.toDuration();
        mutableInterval3.setDurationAfterStart(1606267414417L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    @Ignore
  public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean6 = mutableInterval3.contains((long) ' ');
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        java.lang.Object obj13 = mutableInterval11.clone();
        mutableInterval11.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology16 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval17 = mutableInterval11.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval18 = mutableInterval11.copy();
        org.joda.time.Duration duration19 = mutableInterval11.toDuration();
        org.joda.time.DateTime dateTime20 = mutableInterval11.getStart();
        mutableInterval3.setStart((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = mutableInterval3.toPeriod(periodType22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = mutableInterval3.toPeriod(periodType24);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    @Ignore
  public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readablePeriod1);
        mutableInterval2.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval(0L, 1L, chronology7);
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        mutableInterval8.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(0L, 1L, chronology14);
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        long long17 = interval16.getEndMillis();
        boolean boolean19 = interval16.isAfter((long) (byte) 100);
        boolean boolean20 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration21 = mutableInterval8.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(0L, 1L, chronology24);
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        mutableInterval25.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(0L, 1L, chronology31);
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        long long34 = interval33.getEndMillis();
        boolean boolean36 = interval33.isAfter((long) (byte) 100);
        boolean boolean37 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration38 = mutableInterval25.toDuration();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval(0L, 1L, chronology41);
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime44 = mutableInterval42.getStart();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(readableInstant45, readablePeriod46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        org.joda.time.DateTime dateTime53 = mutableInterval51.getStart();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval(0L, 1L, chronology56);
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        org.joda.time.DateTime dateTime59 = mutableInterval57.getStart();
        mutableInterval47.setInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime59);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) mutableInterval8);
        boolean boolean66 = mutableInterval8.contains(1606267443526L);
        long long67 = mutableInterval8.toDurationMillis();
        java.lang.String str68 = mutableInterval8.toString();
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str68, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval(0L, 1L, chronology4);
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.Interval interval8 = mutableInterval5.toInterval();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = mutableInterval5.isBefore(readableInterval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(0L, 1L, chronology13);
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        mutableInterval14.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(0L, 1L, chronology20);
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        mutableInterval21.setDurationAfterStart((long) (byte) 1);
        boolean boolean26 = mutableInterval21.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        mutableInterval14.setChronology(chronology27);
        mutableInterval5.setChronology(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval(1606267393224L, 1606267389160L, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    @Ignore
  public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        java.lang.Object obj6 = mutableInterval3.clone();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval3.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(0L, 1L, chronology10);
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.DateTime dateTime13 = mutableInterval11.getStart();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval(readableInstant14, readablePeriod15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(0L, 1L, chronology25);
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        org.joda.time.DateTime dateTime28 = mutableInterval26.getStart();
        mutableInterval16.setInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval(readableInstant31, readablePeriod32);
        mutableInterval33.setDurationBeforeEnd(1L);
        boolean boolean36 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval33);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant38, readablePeriod39);
        mutableInterval40.setDurationBeforeEnd(1L);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval40.toMutableInterval();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval(0L, 1L, chronology46);
        long long48 = mutableInterval47.toDurationMillis();
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Duration duration50 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval(0L, 1L, chronology53);
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        java.lang.Object obj56 = mutableInterval54.clone();
        org.joda.time.Interval interval57 = mutableInterval54.toInterval();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        mutableInterval54.setPeriodAfterStart(readablePeriod58);
        mutableInterval54.setEndMillis((long) 100);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval(0L, 1L, chronology64);
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        mutableInterval65.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval(0L, 1L, chronology71);
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        java.lang.Object obj74 = mutableInterval72.clone();
        org.joda.time.Interval interval75 = mutableInterval72.toInterval();
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = mutableInterval72.isBefore(readableInterval76);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology80);
        boolean boolean82 = mutableInterval72.isAfter((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval(0L, 1L, chronology85);
        org.joda.time.Interval interval87 = mutableInterval86.toInterval();
        org.joda.time.DateTime dateTime88 = mutableInterval86.getStart();
        boolean boolean89 = mutableInterval72.isBefore((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = mutableInterval65.contains((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean91 = mutableInterval54.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime88);
        mutableInterval37.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        java.lang.String str95 = mutableInterval7.toString();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str95, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
    }

    @Test
    @Ignore
  public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, (long) (short) 100, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableInterval3.setPeriodBeforeEnd(readablePeriod4);
        mutableInterval3.setStartMillis((-1L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableInstant8, readablePeriod9);
        long long11 = mutableInterval10.getEndMillis();
        boolean boolean12 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        boolean boolean13 = mutableInterval10.isAfterNow();
        boolean boolean15 = mutableInterval10.isBefore((long) (byte) 10);
        org.joda.time.Period period16 = mutableInterval10.toPeriod();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = mutableInterval39.getStart();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(0L, 1L, chronology43);
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        mutableInterval44.setDurationAfterStart((long) (byte) 1);
        boolean boolean49 = mutableInterval44.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval(0L, 1L, chronology52);
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        java.lang.Object obj55 = mutableInterval53.clone();
        mutableInterval53.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology58 = mutableInterval53.getChronology();
        mutableInterval44.setChronology(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant60, readablePeriod61);
        mutableInterval62.setDurationBeforeEnd(1L);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval(0L, 1L, chronology67);
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        java.lang.Object obj70 = mutableInterval68.clone();
        mutableInterval68.setStartMillis((long) (short) -1);
        org.joda.time.Chronology chronology73 = mutableInterval68.getChronology();
        mutableInterval62.setChronology(chronology73);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval44, chronology73);
        boolean boolean76 = mutableInterval39.contains((org.joda.time.ReadableInterval) mutableInterval75);
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval75.toMutableInterval();
        boolean boolean78 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj79 = mutableInterval10.clone();
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1606267592043L + "'", long11 == 1606267592043L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(obj79);
// flaky:         org.junit.Assert.assertEquals(obj79.toString(), "2020-11-25T01:26:32.043Z/2020-11-25T01:26:32.043Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "2020-11-25T01:26:32.043Z/2020-11-25T01:26:32.043Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "2020-11-25T01:26:32.043Z/2020-11-25T01:26:32.043Z");
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(10L, (long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = mutableInterval10.toPeriod(periodType11);
        mutableInterval7.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        boolean boolean14 = interval4.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTime dateTime15 = mutableInterval7.getStart();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval7);
        mutableInterval16.setEndMillis(1606267402322L);
        org.joda.time.DateTime dateTime19 = mutableInterval16.getEnd();
        boolean boolean21 = mutableInterval16.contains(1606267457040L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    @Ignore
  public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval3.isAfterNow();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval3.toMutableInterval();
        org.joda.time.DateTime dateTime7 = mutableInterval3.getStart();
        java.lang.String str8 = mutableInterval3.toString();
        boolean boolean9 = mutableInterval3.isBeforeNow();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z" + "'", str8, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    @Ignore
  public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        java.lang.Object obj5 = mutableInterval3.clone();
        org.joda.time.Interval interval6 = mutableInterval3.toInterval();
        mutableInterval3.setDurationBeforeEnd(0L);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval3.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval(0L, 1L, chronology12);
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        java.lang.Object obj15 = mutableInterval13.clone();
        java.lang.Object obj16 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        mutableInterval20.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval(0L, 1L, chronology26);
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        mutableInterval27.setDurationAfterStart((long) (byte) 1);
        boolean boolean32 = mutableInterval27.equals((java.lang.Object) 0);
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        mutableInterval20.setChronology(chronology33);
        mutableInterval20.setEndMillis((long) '#');
        org.joda.time.Duration duration37 = mutableInterval20.toDuration();
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval9.copy();
        org.joda.time.Interval interval41 = mutableInterval9.toInterval();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(0L, 1L, chronology44);
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval(0L, 1L, chronology50);
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        java.lang.Object obj53 = mutableInterval51.clone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval(obj53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableInterval55.setPeriodAfterStart(readablePeriod56);
        org.joda.time.Period period58 = mutableInterval55.toPeriod();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology60 = mutableInterval59.getChronology();
        mutableInterval9.setChronology(chronology60);
        mutableInterval9.setDurationAfterStart(1606267504803L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval(0L, 1L, chronology2);
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        mutableInterval3.setDurationAfterStart((long) (byte) 1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval(0L, 1L, chronology9);
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        long long12 = interval11.getEndMillis();
        boolean boolean14 = interval11.isAfter((long) (byte) 100);
        boolean boolean15 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration16 = mutableInterval3.toDuration();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(0L, 1L, chronology19);
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        org.joda.time.DateTime dateTime22 = mutableInterval20.getStart();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval(readableInstant23, readablePeriod24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval(0L, 1L, chronology28);
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval(0L, 1L, chronology34);
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        org.joda.time.DateTime dateTime37 = mutableInterval35.getStart();
        mutableInterval25.setInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime37);
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Period period42 = mutableInterval40.toPeriod();
        boolean boolean44 = mutableInterval40.isBefore(1606267335562L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }
}

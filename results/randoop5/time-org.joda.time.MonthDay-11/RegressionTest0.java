import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField5 = monthDay3.getField((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("hi!", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay6 = monthDay4.withMonthOfYear((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay5 = monthDay3.withMonthOfYear((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay6 = monthDay4.withDayOfMonth((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = monthDay1.withField(dateTimeFieldType17, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay6 = monthDay1.withFieldAdded(durationFieldType4, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((java.lang.Object) int11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.DurationFieldType durationFieldType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay4 = monthDay1.withFieldAdded(durationFieldType2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.now(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Zone must not be null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = property6.compareTo(readableInstant9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        int int0 = org.joda.time.MonthDay.DAY_OF_MONTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.fromDateFields(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property10.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay4 = monthDay1.withFieldAdded(durationFieldType2, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = monthDay16.withDayOfMonth((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = monthDay1.getField(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = monthDay10.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.ReadableInstant readableInstant13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = property10.compareTo(readableInstant13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("Property[dayOfMonth]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = monthDay24.withDayOfMonth((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = monthDay1.getField(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay13 = monthDay4.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = property10.compareTo(readableInstant24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay3.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology27 = monthDay26.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay((int) ' ', 0, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology36);
        org.joda.time.MonthDay monthDay38 = monthDay28.withChronologyRetainFields(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay((java.lang.Object) int24, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay38);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((java.lang.Object) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property14.setCopy("--01-01", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        int int0 = org.joda.time.MonthDay.MONTH_OF_YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay10 = property6.setCopy((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = monthDay26.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay((int) (short) 100, 2, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = monthDay1.minusMonths((int) (byte) -1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = monthDay1.compareTo(readablePartial6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay14 = monthDay3.withFieldAdded(durationFieldType12, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay19 = property10.setCopy("", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay19 = property10.setCopy("Jan");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        java.lang.String str11 = property6.getName();
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay28.dayOfMonth();
        org.joda.time.Chronology chronology34 = monthDay28.getChronology();
        org.joda.time.Chronology chronology35 = monthDay28.getChronology();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = monthDay28.toDateTime(readableInstant36);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = property10.compareTo(readableInstant36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay13.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = monthDay31.toString("Property[dayOfMonth]", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay13.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property11.setCopy(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        int int20 = monthDay4.get(dateTimeFieldType19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay((java.lang.Object) int20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = monthDay10.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("Jan");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Jan\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        int int41 = monthDay13.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (short) -1);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        int int8 = monthDay1.getDayOfMonth();
        boolean boolean10 = monthDay1.equals((java.lang.Object) "Jan");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = monthDay15.withFieldAdded(durationFieldType24, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay14 = property10.setCopy("hi!");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        java.util.Locale locale8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = monthDay6.toString("Jan", locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay32 = monthDay1.withFieldAdded(durationFieldType30, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = property6.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        java.lang.Class<?> wildcardClass2 = monthDay1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = property10.compareTo(readableInstant22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = monthDay1.toString("", locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.DurationField durationField11 = property6.getDurationField();
        java.lang.Class<?> wildcardClass12 = property6.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay10 = monthDay1.withPeriodAdded(readablePeriod8, 9);
        org.joda.time.DateTimeField dateTimeField12 = monthDay10.getField(1);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = monthDay10.withFieldAdded(durationFieldType13, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = monthDay13.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        java.lang.Class<?> wildcardClass8 = monthDay1.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property10.setCopy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = monthDay3.withDayOfMonth((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay3 = monthDay1.withMonthOfYear((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.ReadablePartial readablePartial16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = monthDay15.isAfter(readablePartial16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay18.dayOfMonth();
        org.joda.time.Chronology chronology24 = monthDay18.getChronology();
        org.joda.time.Chronology chronology25 = monthDay18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay((java.lang.Object) int16, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay((java.lang.Object) property10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay23 = property10.setCopy("dayOfMonth", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = monthDay3.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = monthDay21.getField((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.now(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay10 = monthDay8.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay8);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("dayOfMonth", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = monthDay13.toString("Property[dayOfMonth]", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = monthDay7.isSupported(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        int int37 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay.Property property38 = monthDay28.dayOfMonth();
        int int39 = monthDay28.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay28.plus(readablePeriod40);
        boolean boolean42 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        boolean boolean51 = monthDay44.isSupported(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay53 = monthDay24.withField(dateTimeFieldType50, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (byte) 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = monthDay1.toString("dayOfMonth", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = monthDay26.getField(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology14 = monthDay3.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = monthDay3.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        java.lang.Class<?> wildcardClass26 = monthDay24.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        int int94 = monthDay15.indexOf(dateTimeFieldType91);
        boolean boolean95 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay97 = monthDay15.withDayOfMonth((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("2", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = monthDay26.toString("Property[dayOfMonth]", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.MonthDay monthDay52 = monthDay49.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField54 = monthDay49.getField(1);
        boolean boolean55 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay49);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay43 = monthDay40.withField(dateTimeFieldType41, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay31.plus(readablePeriod36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        int int49 = property48.get();
        org.joda.time.MonthDay monthDay51 = property48.addWrapFieldToCopy((int) (short) 1);
        boolean boolean52 = monthDay31.isBefore((org.joda.time.ReadablePartial) monthDay51);
        org.joda.time.MonthDay monthDay54 = monthDay51.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay56 = monthDay54.plusMonths(1);
        int int57 = monthDay54.size();
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property68 = monthDay61.property(dateTimeFieldType67);
        int int69 = property68.get();
        org.joda.time.DurationField durationField70 = property68.getDurationField();
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = monthDay76.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property81 = monthDay74.property(dateTimeFieldType80);
        boolean boolean82 = property68.equals((java.lang.Object) monthDay74);
        int int83 = property68.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = property68.getFieldType();
        org.joda.time.MonthDay monthDay86 = monthDay54.withField(dateTimeFieldType84, (int) (byte) 1);
        int int87 = monthDay8.indexOf(dateTimeFieldType84);
        org.joda.time.MonthDay monthDay89 = monthDay6.withField(dateTimeFieldType84, 12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(monthDay89);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (byte) 0, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property14.setCopy("--09-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = monthDay14.withFieldAdded(durationFieldType15, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        org.joda.time.Chronology chronology13 = monthDay7.getChronology();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology13);
        org.joda.time.MonthDay monthDay15 = monthDay5.withChronologyRetainFields(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = new org.joda.time.MonthDay((int) (byte) 100, (int) (byte) 0, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = monthDay1.minusMonths(2);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay18 = property10.addToCopy((int) ' ');
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = property10.setCopy("dayOfMonth", locale20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        int int94 = monthDay15.indexOf(dateTimeFieldType91);
        boolean boolean95 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = null;
        java.lang.String str97 = monthDay13.toString(dateTimeFormatter96);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "--01-01" + "'", str97, "--01-01");
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        int int94 = monthDay15.indexOf(dateTimeFieldType91);
        boolean boolean95 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.MonthDay.Property property96 = monthDay13.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay((java.lang.Object) property23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = monthDay16.indexOf(dateTimeFieldType30);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.DurationField durationField59 = property57.getDurationField();
        java.util.Locale locale60 = null;
        int int61 = property57.getMaximumTextLength(locale60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property68 = monthDay63.dayOfMonth();
        org.joda.time.Chronology chronology69 = monthDay63.getChronology();
        org.joda.time.Chronology chronology70 = monthDay63.getChronology();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = monthDay63.toDateTime(readableInstant71);
        int int73 = property57.compareTo((org.joda.time.ReadableInstant) dateTime72);
        int int74 = property43.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = monthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        int int76 = property10.compareTo((org.joda.time.ReadableInstant) dateTime72);
        java.util.Locale locale78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay79 = property10.setCopy("--11-24", locale78);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay2.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        int int20 = property19.get();
        org.joda.time.MonthDay monthDay22 = property19.addWrapFieldToCopy((int) (short) 1);
        boolean boolean23 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        boolean boolean46 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay45);
        org.joda.time.MonthDay monthDay48 = monthDay45.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay50 = monthDay48.plusMonths(1);
        int int51 = monthDay48.size();
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay55.property(dateTimeFieldType61);
        int int63 = property62.get();
        org.joda.time.DurationField durationField64 = property62.getDurationField();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        boolean boolean76 = property62.equals((java.lang.Object) monthDay68);
        int int77 = property62.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property62.getFieldType();
        org.joda.time.MonthDay monthDay80 = monthDay48.withField(dateTimeFieldType78, (int) (byte) 1);
        int int81 = monthDay2.indexOf(dateTimeFieldType78);
        boolean boolean82 = monthDay0.isSupported(dateTimeFieldType78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getDayOfMonth();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.Chronology chronology33 = monthDay27.getChronology();
        org.joda.time.Chronology chronology34 = monthDay27.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = monthDay27.toDateTime(readableInstant35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay38.getFieldType(0);
        int int62 = monthDay27.get(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay24.property(dateTimeFieldType61);
        java.lang.String str64 = monthDay24.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "--09-02" + "'", str64, "--09-02");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay1.getFieldType(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = monthDay1.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) 100, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        java.lang.Class<?> wildcardClass39 = property38.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay3.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology27 = monthDay26.getChronology();
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay((int) 'a', 2, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = monthDay9.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay10 = monthDay1.withPeriodAdded(readablePeriod8, 9);
        org.joda.time.DateTimeField dateTimeField12 = monthDay10.getField(1);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = monthDay10.withFieldAdded(durationFieldType13, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        int[] intArray24 = monthDay23.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 1]");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((java.lang.Object) chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        java.util.Locale locale27 = null;
        int int28 = property24.getMaximumTextLength(locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.Chronology chronology37 = monthDay30.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = monthDay30.toDateTime(readableInstant38);
        int int40 = property24.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int41 = property10.compareTo((org.joda.time.ReadableInstant) dateTime39);
        java.lang.Class<?> wildcardClass42 = dateTime39.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = monthDay14.withFieldAdded(durationFieldType15, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property10.setCopy((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        int int27 = monthDay21.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((java.lang.Object) 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Double");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy((int) (short) -1);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = monthDay13.toString("", locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        java.lang.String str13 = property12.getAsText();
        org.joda.time.MonthDay monthDay15 = property12.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.plus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusMonths(1);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        boolean boolean53 = monthDay46.isSupported(dateTimeFieldType52);
        boolean boolean54 = monthDay42.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology55 = monthDay42.getChronology();
        org.joda.time.MonthDay monthDay56 = monthDay17.withChronologyRetainFields(chronology55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay57 = new org.joda.time.MonthDay((int) '4', (int) (short) 1, chronology55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(monthDay56);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("1");
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = monthDay1.toString("Property[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        int[] intArray16 = monthDay13.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 2]");
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        int int31 = monthDay3.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.withChronologyRetainFields(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = monthDay4.getFieldType((int) (byte) 1);
        boolean boolean9 = monthDay2.isSupported(dateTimeFieldType8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay13 = monthDay11.minusDays((int) '#');
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = monthDay15.toDateTime(readableInstant23);
        org.joda.time.MonthDay monthDay26 = monthDay15.plusMonths((int) ' ');
        boolean boolean27 = monthDay11.isAfter((org.joda.time.ReadablePartial) monthDay26);
        boolean boolean28 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay26);
        org.joda.time.Chronology chronology29 = monthDay26.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay((java.lang.Object) 0.0d, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Double");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.lang.String str27 = property10.getAsShortText();
        int int28 = property10.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay30 = property10.setCopy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay monthDay34 = property32.addWrapFieldToCopy(1);
        boolean boolean35 = monthDay16.isEqual((org.joda.time.ReadablePartial) monthDay34);
        java.lang.Class<?> wildcardClass36 = monthDay16.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumShortTextLength(locale11);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property6.setCopy("--11-24", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay5 = monthDay3.withDayOfMonth((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"dayOfMonth\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology14 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.MonthDay monthDay36 = property33.addWrapFieldToCopy((int) (short) 1);
        boolean boolean37 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.MonthDay monthDay39 = monthDay36.minusMonths((int) (byte) 100);
        int int40 = monthDay39.getDayOfMonth();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay42.dayOfMonth();
        org.joda.time.Chronology chronology48 = monthDay42.getChronology();
        org.joda.time.Chronology chronology49 = monthDay42.getChronology();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = monthDay42.toDateTime(readableInstant50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay53.plus(readablePeriod58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property70 = monthDay63.property(dateTimeFieldType69);
        int int71 = property70.get();
        org.joda.time.MonthDay monthDay73 = property70.addWrapFieldToCopy((int) (short) 1);
        boolean boolean74 = monthDay53.isBefore((org.joda.time.ReadablePartial) monthDay73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay53.getFieldType(0);
        int int77 = monthDay42.get(dateTimeFieldType76);
        org.joda.time.MonthDay.Property property78 = monthDay39.property(dateTimeFieldType76);
        boolean boolean79 = monthDay3.isSupported(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) -1, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        int[] intArray43 = monthDay42.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 3]");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumTextLength(locale24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay27 = property23.setCopy("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.MonthDay monthDay14 = property11.setCopy("1");
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay((-1L), chronology23);
        boolean boolean25 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = monthDay24.withFieldAdded(durationFieldType26, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.MonthDay.Property property20 = monthDay3.property(dateTimeFieldType19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = monthDay3.getField(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 12);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusDays((int) '#');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = monthDay12.withFieldAdded(durationFieldType13, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = monthDay1.plusDays((int) (short) -1);
        java.lang.Class<?> wildcardClass11 = monthDay1.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("Property[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[dayOfMonth]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay2.withPeriodAdded(readablePeriod3, 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        int int12 = monthDay5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.MonthDay monthDay36 = property33.addWrapFieldToCopy((int) (short) 1);
        boolean boolean37 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay16.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology40 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay14.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((long) 9, chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay((java.lang.Object) chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(monthDay41);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay26.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        int int14 = property10.getMinimumValue();
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property10.setCopy("Property[monthOfYear]", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        java.lang.String str16 = property10.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property10.setCopy((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        boolean boolean46 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay45);
        boolean boolean47 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField49 = monthDay45.getField((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        int[] intArray18 = monthDay1.getValues();
        org.joda.time.DurationFieldType durationFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = monthDay1.withFieldAdded(durationFieldType19, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 1]");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.DurationField durationField38 = property36.getDurationField();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        boolean boolean50 = property36.equals((java.lang.Object) monthDay42);
        int int51 = property36.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property36.getFieldType();
        org.joda.time.MonthDay monthDay54 = monthDay16.withField(dateTimeFieldType52, (int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay57 = monthDay16.withFieldAdded(durationFieldType55, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        int int17 = property10.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay19 = property10.setCopy("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(10L, chronology12);
        java.lang.String str16 = monthDay15.toString();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "--01-01" + "'", str16, "--01-01");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.toString();
        int int16 = property10.getMinimumValueOverall();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property10.getAsShortText(locale17);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        java.lang.String str15 = property11.getAsShortText();
        org.joda.time.MonthDay monthDay17 = property11.setCopy("2");
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay20 = monthDay17.withPeriodAdded(readablePeriod18, 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        java.util.Locale locale17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property14.setCopy("", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        java.lang.String str39 = property38.getAsText();
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay42 = property38.setCopy("Property[dayOfMonth]", locale41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[dayOfMonth]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay72.dayOfMonth();
        org.joda.time.Chronology chronology78 = monthDay72.getChronology();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay80 = monthDay70.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay81 = monthDay16.withChronologyRetainFields(chronology78);
        int[] intArray82 = monthDay16.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        int int37 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay.Property property38 = monthDay28.dayOfMonth();
        int int39 = monthDay28.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay28.plus(readablePeriod40);
        boolean boolean42 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay28);
        java.lang.String str43 = monthDay24.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "--01-01" + "'", str43, "--01-01");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[monthOfYear]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addWrapFieldToCopy((int) (short) 10);
        java.lang.Class<?> wildcardClass18 = property14.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        int int26 = property24.getMaximumValue();
        org.joda.time.MonthDay monthDay28 = property24.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay30.plus(readablePeriod35);
        int int37 = monthDay30.getDayOfMonth();
        int int38 = property24.compareTo((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = monthDay30.getFields();
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.DurationField durationField52 = property50.getDurationField();
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        boolean boolean64 = property50.equals((java.lang.Object) monthDay56);
        int int65 = property50.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property50.getFieldType();
        org.joda.time.MonthDay monthDay68 = monthDay30.withField(dateTimeFieldType66, (int) (short) 10);
        boolean boolean69 = monthDay13.isSupported(dateTimeFieldType66);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = monthDay13.getValue(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.util.Locale locale18 = null;
        java.lang.String str19 = property6.getAsText(locale18);
        java.util.Locale locale20 = null;
        int int21 = property6.getMaximumTextLength(locale20);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        int int26 = property10.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property10.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = monthDay1.toString("Property[dayOfMonth]", locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay43 = property41.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay30.plusDays((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = monthDay30.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = monthDay1.minusMonths((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay5.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = monthDay26.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--01-01");
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        java.lang.String str3 = monthDay1.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--01-01" + "'", str3, "--01-01");
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = property23.setCopy("--11-24", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property10.getAsShortText(locale12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay72.dayOfMonth();
        org.joda.time.Chronology chronology78 = monthDay72.getChronology();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay80 = monthDay70.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay81 = monthDay16.withChronologyRetainFields(chronology78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay16.getFieldType(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays((int) '#');
        boolean boolean29 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField31 = monthDay28.getField((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays((int) '#');
        boolean boolean29 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = monthDay28.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property14.setCopy("--09-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay6.plus(readablePeriod11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        int int24 = property23.get();
        org.joda.time.MonthDay monthDay26 = property23.addWrapFieldToCopy((int) (short) 1);
        boolean boolean27 = monthDay6.isBefore((org.joda.time.ReadablePartial) monthDay26);
        org.joda.time.MonthDay monthDay29 = monthDay26.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay31 = monthDay29.plusMonths(1);
        int int32 = monthDay29.size();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.DurationField durationField45 = property43.getDurationField();
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        boolean boolean57 = property43.equals((java.lang.Object) monthDay49);
        int int58 = property43.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property43.getFieldType();
        org.joda.time.MonthDay monthDay61 = monthDay29.withField(dateTimeFieldType59, (int) (byte) 1);
        boolean boolean62 = monthDay0.equals((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay3.withPeriodAdded(readablePeriod4, 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay3.plus(readablePeriod7);
        int int9 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = monthDay8.withDayOfMonth((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.DurationField durationField13 = property10.getDurationField();
        boolean boolean15 = property10.equals((java.lang.Object) "--11-24");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    @Ignore
  public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay.Property property27 = monthDay26.monthOfYear();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property27.getAsText(locale29);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "November" + "'", str30, "November");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        java.lang.Class<?> wildcardClass47 = property10.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        java.lang.String str19 = property14.getAsString();
        java.lang.Class<?> wildcardClass20 = property14.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = monthDay16.plusDays(0);
        int int44 = monthDay43.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(31, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay70 = monthDay26.minusMonths(10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        int int54 = monthDay53.getMonthOfYear();
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay58.property(dateTimeFieldType64);
        java.util.Locale locale66 = null;
        int int67 = property65.getMaximumTextLength(locale66);
        org.joda.time.MonthDay monthDay69 = property65.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.minus(readablePeriod70);
        boolean boolean72 = monthDay53.isAfter((org.joda.time.ReadablePartial) monthDay69);
        boolean boolean73 = monthDay1.equals((java.lang.Object) monthDay69);
        org.joda.time.MonthDay.Property property74 = monthDay1.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        java.lang.String str11 = property6.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay13 = property6.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    @Ignore
  public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = monthDay1.plusDays((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = monthDay10.toString(dateTimeFormatter11);
        java.lang.String str13 = monthDay10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay10.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--11-24" + "'", str12, "--11-24");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--11-24" + "'", str13, "--11-24");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addWrapFieldToCopy((int) (short) 1);
        boolean boolean47 = monthDay26.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = monthDay46.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay51 = monthDay49.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay49.minus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        org.joda.time.MonthDay.Property property65 = monthDay57.monthOfYear();
        org.joda.time.MonthDay monthDay67 = property65.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay77.property(dateTimeFieldType83);
        int int85 = monthDay69.indexOf(dateTimeFieldType83);
        int int86 = monthDay67.get(dateTimeFieldType83);
        int int87 = monthDay53.indexOf(dateTimeFieldType83);
        boolean boolean88 = monthDay21.isSupported(dateTimeFieldType83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField90 = monthDay21.getField(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("--01-01", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = monthDay1.minusMonths((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = monthDay1.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.MonthDay monthDay53 = property51.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay55 = property51.addWrapFieldToCopy(0);
        boolean boolean56 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = monthDay31.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        boolean boolean10 = monthDay3.isSupported(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        boolean boolean29 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.Chronology chronology30 = monthDay27.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((int) 'a', (-1), chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        java.lang.String str25 = monthDay24.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--02-02" + "'", str25, "--02-02");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property11.getAsText(locale13);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "January" + "'", str14, "January");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = property6.setCopy("", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = property10.compareTo(readablePartial17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay20.withPeriodAdded(readablePeriod21, 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        int int30 = monthDay23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay.Property property33 = monthDay32.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property33.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay37 = monthDay16.withField(dateTimeFieldType35, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        int int8 = monthDay1.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay10 = monthDay1.withMonthOfYear((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(10, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    @Ignore
  public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getDayOfMonth();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.Chronology chronology33 = monthDay27.getChronology();
        org.joda.time.Chronology chronology34 = monthDay27.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = monthDay27.toDateTime(readableInstant35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay38.getFieldType(0);
        int int62 = monthDay27.get(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay24.property(dateTimeFieldType61);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MonthDay monthDay68 = monthDay65.withPeriodAdded(readablePeriod66, 1);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        int int75 = monthDay68.indexOf(dateTimeFieldType74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay68.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.now();
        boolean boolean79 = monthDay77.isBefore((org.joda.time.ReadablePartial) monthDay78);
        boolean boolean80 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay78);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (short) 10);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("Property[monthOfYear]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        int int25 = property10.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property10.getFieldType();
        int int27 = property10.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = monthDay29.getFields();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay29.minus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = monthDay53.minusDays(31);
        int int56 = property10.compareTo((org.joda.time.ReadablePartial) monthDay53);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("November", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        int int25 = property10.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay27 = property10.setCopy("November");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"November\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = monthDay3.withMonthOfYear((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = monthDay25.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        boolean boolean46 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay45);
        boolean boolean47 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay45);
        int[] intArray48 = monthDay45.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay45.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 2]");
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        int int7 = property6.getMinimumValue();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay43 = property41.setCopy("Jan");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Jan\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay20 = property18.addToCopy((int) (short) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        java.util.Locale locale47 = null;
        int int48 = property46.getMaximumTextLength(locale47);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.plus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = monthDay17.indexOf(dateTimeFieldType31);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay37.property(dateTimeFieldType43);
        int int45 = property44.get();
        org.joda.time.MonthDay monthDay47 = property44.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay51.property(dateTimeFieldType57);
        int int59 = property58.get();
        org.joda.time.DurationField durationField60 = property58.getDurationField();
        java.util.Locale locale61 = null;
        int int62 = property58.getMaximumTextLength(locale61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property69 = monthDay64.dayOfMonth();
        org.joda.time.Chronology chronology70 = monthDay64.getChronology();
        org.joda.time.Chronology chronology71 = monthDay64.getChronology();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = monthDay64.toDateTime(readableInstant72);
        int int74 = property58.compareTo((org.joda.time.ReadableInstant) dateTime73);
        int int75 = property44.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime76 = monthDay17.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime77 = monthDay13.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = monthDay16.toString("January", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = monthDay14.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = monthDay16.indexOf(dateTimeFieldType30);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.DurationField durationField59 = property57.getDurationField();
        java.util.Locale locale60 = null;
        int int61 = property57.getMaximumTextLength(locale60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property68 = monthDay63.dayOfMonth();
        org.joda.time.Chronology chronology69 = monthDay63.getChronology();
        org.joda.time.Chronology chronology70 = monthDay63.getChronology();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = monthDay63.toDateTime(readableInstant71);
        int int73 = property57.compareTo((org.joda.time.ReadableInstant) dateTime72);
        int int74 = property43.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = monthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        int int76 = property10.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeField dateTimeField77 = property10.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay8 = monthDay5.withPeriodAdded(readablePeriod6, 1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        int int15 = monthDay8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        boolean boolean27 = monthDay8.isEqual((org.joda.time.ReadablePartial) monthDay19);
        boolean boolean28 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay8);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = monthDay1.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.util.Locale locale18 = null;
        java.lang.String str19 = property6.getAsText(locale18);
        int int20 = property6.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property10.setCopy("--11-24");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        int int32 = monthDay13.get(dateTimeFieldType29);
        org.joda.time.MonthDay.Property property33 = monthDay13.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay35 = property33.setCopy("--02-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--02-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = property18.setCopy("Property[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[dayOfMonth]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 9);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = monthDay16.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        int int28 = monthDay25.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        java.util.Locale locale19 = null;
        int int20 = property6.getMaximumTextLength(locale19);
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay23 = property6.setCopy("--02-02", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--02-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.plus(readablePeriod42);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.now(chronology52);
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay(0L, chronology52);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay58.property(dateTimeFieldType64);
        int int66 = property65.get();
        org.joda.time.DurationField durationField67 = property65.getDurationField();
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay71.property(dateTimeFieldType77);
        boolean boolean79 = property65.equals((java.lang.Object) monthDay71);
        org.joda.time.MonthDay monthDay80 = new org.joda.time.MonthDay((java.lang.Object) monthDay71);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.MonthDay monthDay85 = monthDay82.withPeriodAdded(readablePeriod83, 1);
        org.joda.time.MonthDay monthDay87 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MonthDay monthDay89 = monthDay87.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = monthDay87.getFieldType((int) (byte) 1);
        int int92 = monthDay85.indexOf(dateTimeFieldType91);
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.MonthDay monthDay94 = monthDay85.withChronologyRetainFields(chronology93);
        boolean boolean95 = monthDay80.isBefore((org.joda.time.ReadablePartial) monthDay94);
        int int96 = monthDay54.compareTo((org.joda.time.ReadablePartial) monthDay94);
        org.joda.time.MonthDay monthDay98 = monthDay54.withDayOfMonth(1);
        boolean boolean99 = monthDay41.equals((java.lang.Object) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(monthDay94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(monthDay98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = monthDay3.toString(dateTimeFormatter14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = monthDay3.withMonthOfYear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--01-01" + "'", str15, "--01-01");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.plus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.MonthDay monthDay37 = property34.addWrapFieldToCopy((int) (short) 1);
        boolean boolean38 = monthDay17.isBefore((org.joda.time.ReadablePartial) monthDay37);
        org.joda.time.MonthDay monthDay40 = monthDay37.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay42 = monthDay40.plusMonths(1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        boolean boolean51 = monthDay44.isSupported(dateTimeFieldType50);
        boolean boolean52 = monthDay40.isSupported(dateTimeFieldType50);
        org.joda.time.Chronology chronology53 = monthDay40.getChronology();
        org.joda.time.MonthDay monthDay54 = monthDay15.withChronologyRetainFields(chronology53);
        int[] intArray55 = monthDay15.getValues();
        java.lang.String str56 = monthDay15.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "--01-01" + "'", str56, "--01-01");
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.MonthDay monthDay44 = property41.getMonthDay();
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = monthDay44.toString("hi!", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(monthDay44);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        int int94 = monthDay15.indexOf(dateTimeFieldType91);
        boolean boolean95 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay97 = monthDay13.withMonthOfYear((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumShortTextLength(locale24);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.util.Locale locale18 = null;
        java.lang.String str19 = property6.getAsText(locale18);
        int int20 = property6.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        org.joda.time.MonthDay monthDay42 = property40.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = monthDay44.indexOf(dateTimeFieldType58);
        int int61 = monthDay42.get(dateTimeFieldType58);
        int int62 = monthDay28.indexOf(dateTimeFieldType58);
        java.lang.Class<?> wildcardClass63 = dateTimeFieldType58.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        java.lang.String str14 = monthDay13.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--01-01" + "'", str14, "--01-01");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((-1L));
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumTextLength(locale24);
        java.util.Locale locale26 = null;
        java.lang.String str27 = property23.getAsShortText(locale26);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Jan" + "'", str27, "Jan");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay4 = monthDay1.withDayOfMonth((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withDayOfMonth(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = monthDay31.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay37 = monthDay32.withFieldAdded(durationFieldType35, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.MonthDay monthDay25 = monthDay4.minusMonths(9);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = monthDay24.toString(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--02-02" + "'", str26, "--02-02");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.DurationField durationField13 = property10.getDurationField();
        java.util.Locale locale14 = null;
        int int15 = property10.getMaximumTextLength(locale14);
        java.lang.String str16 = property10.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay33.getFieldType(0);
        int int57 = monthDay28.indexOf(dateTimeFieldType56);
        int int58 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = monthDay28.minusDays((int) (short) 0);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay62.plus(readablePeriod67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = monthDay74.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property79 = monthDay72.property(dateTimeFieldType78);
        int int80 = property79.get();
        org.joda.time.MonthDay monthDay82 = property79.addWrapFieldToCopy((int) (short) 1);
        boolean boolean83 = monthDay62.isBefore((org.joda.time.ReadablePartial) monthDay82);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = monthDay62.getFieldType(0);
        boolean boolean86 = monthDay60.isSupported(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property10.getFieldType();
        java.lang.Class<?> wildcardClass17 = dateTimeFieldType16.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay24.size();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        boolean boolean52 = property38.equals((java.lang.Object) monthDay44);
        int int53 = property38.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property38.getFieldType();
        org.joda.time.MonthDay monthDay56 = monthDay24.withField(dateTimeFieldType54, (int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay59 = monthDay24.withPeriodAdded(readablePeriod57, 9);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay61.plus(readablePeriod66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay71.property(dateTimeFieldType77);
        int int79 = property78.get();
        org.joda.time.MonthDay monthDay81 = property78.addWrapFieldToCopy((int) (short) 1);
        boolean boolean82 = monthDay61.isBefore((org.joda.time.ReadablePartial) monthDay81);
        org.joda.time.MonthDay monthDay84 = monthDay81.minusMonths((int) (byte) 100);
        int int85 = monthDay84.getMonthOfYear();
        org.joda.time.MonthDay monthDay87 = monthDay84.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.MonthDay monthDay89 = monthDay84.plus(readablePeriod88);
        org.joda.time.MonthDay monthDay91 = monthDay89.withDayOfMonth(1);
        boolean boolean92 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay91);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.MonthDay monthDay94 = monthDay91.minus(readablePeriod93);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(monthDay94);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(dateTimeZone25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay29.dayOfMonth();
        org.joda.time.Chronology chronology35 = monthDay29.getChronology();
        org.joda.time.Chronology chronology36 = monthDay29.getChronology();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = monthDay29.toDateTime(readableInstant37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay40.plus(readablePeriod45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.MonthDay monthDay60 = property57.addWrapFieldToCopy((int) (short) 1);
        boolean boolean61 = monthDay40.isBefore((org.joda.time.ReadablePartial) monthDay60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay40.getFieldType(0);
        int int64 = monthDay29.get(dateTimeFieldType63);
        boolean boolean65 = monthDay26.isSupported(dateTimeFieldType63);
        org.joda.time.MonthDay.Property property66 = monthDay24.property(dateTimeFieldType63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay67 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        org.joda.time.LocalDate localDate3 = monthDay1.toLocalDate(10);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        int int17 = property10.getMinimumValue();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property10.getAsText(locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = property10.setCopy("--01-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("January");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"January\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        int int15 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("--11-24", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.Chronology chronology9 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.now(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay((int) 'a', 100, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        int int20 = monthDay4.get(dateTimeFieldType19);
        java.lang.String str21 = monthDay4.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "--01-01" + "'", str21, "--01-01");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.MonthDay.Property property20 = monthDay3.property(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay22.plus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        org.joda.time.MonthDay monthDay42 = property39.addWrapFieldToCopy((int) (short) 1);
        boolean boolean43 = monthDay22.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.MonthDay monthDay45 = monthDay42.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays(31);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay52 = monthDay49.withPeriodAdded(readablePeriod50, 1);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        int int59 = monthDay52.indexOf(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay52.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay63.plus(readablePeriod68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay73.property(dateTimeFieldType79);
        int int81 = property80.get();
        org.joda.time.MonthDay monthDay83 = property80.addWrapFieldToCopy((int) (short) 1);
        boolean boolean84 = monthDay63.isBefore((org.joda.time.ReadablePartial) monthDay83);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay63.withChronologyRetainFields(chronology85);
        org.joda.time.Chronology chronology87 = monthDay86.getChronology();
        org.joda.time.MonthDay monthDay88 = monthDay61.withChronologyRetainFields(chronology87);
        org.joda.time.MonthDay monthDay89 = monthDay47.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology90 = monthDay89.getChronology();
        org.joda.time.MonthDay monthDay91 = monthDay3.withChronologyRetainFields(chronology90);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = null;
        java.lang.String str93 = monthDay91.toString(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "--01-01" + "'", str93, "--01-01");
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.DurationFieldType durationFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay7 = monthDay4.withFieldAdded(durationFieldType5, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusDays(0);
        int int31 = monthDay30.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = monthDay1.getValue(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) '#');
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        int int20 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property10.getFieldType();
        java.lang.String str30 = property10.getAsString();
        int int31 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        org.joda.time.MonthDay monthDay14 = property6.setCopy((int) (byte) 1);
        org.joda.time.MonthDay monthDay15 = property6.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    @Ignore
  public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        java.lang.String str16 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.DurationField durationField29 = property27.getDurationField();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        boolean boolean41 = property27.equals((java.lang.Object) monthDay33);
        org.joda.time.DateTimeField dateTimeField42 = property27.getField();
        java.util.Locale locale43 = null;
        int int44 = property27.getMaximumShortTextLength(locale43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        org.joda.time.MonthDay.Property property56 = monthDay48.monthOfYear();
        int int57 = monthDay48.getDayOfMonth();
        org.joda.time.MonthDay.Property property58 = monthDay48.dayOfMonth();
        int int59 = monthDay48.getDayOfMonth();
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay61.dayOfMonth();
        org.joda.time.Chronology chronology67 = monthDay61.getChronology();
        org.joda.time.MonthDay monthDay68 = monthDay48.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay((java.lang.Object) locale43, chronology67);
        boolean boolean70 = property10.equals((java.lang.Object) monthDay69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = monthDay69.toString(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "--11-25" + "'", str72, "--11-25");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsText(locale7);
        int int9 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        int int39 = monthDay32.getDayOfMonth();
        int int40 = property26.compareTo((org.joda.time.ReadablePartial) monthDay32);
        boolean boolean41 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology42 = monthDay32.getChronology();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay47 = monthDay44.withPeriodAdded(readablePeriod45, 1);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        int int54 = monthDay47.indexOf(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay47.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        int int63 = monthDay47.get(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = monthDay47.isSupported(dateTimeFieldType64);
        int int66 = monthDay32.compareTo((org.joda.time.ReadablePartial) monthDay47);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.getAsString();
        int int13 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property41.getAsShortText();
        org.joda.time.DateTimeField dateTimeField45 = property41.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("Jan", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.DurationField durationField29 = property24.getDurationField();
        boolean boolean30 = property10.equals((java.lang.Object) durationField29);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay((java.lang.Object) monthDay68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        boolean boolean78 = monthDay71.isSupported(dateTimeFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay80 = monthDay68.withField(dateTimeFieldType77, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = monthDay1.getField(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hi!\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addWrapFieldToCopy((int) (short) 1);
        boolean boolean47 = monthDay26.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = monthDay46.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay51 = monthDay49.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay49.minus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        org.joda.time.MonthDay.Property property65 = monthDay57.monthOfYear();
        org.joda.time.MonthDay monthDay67 = property65.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay77.property(dateTimeFieldType83);
        int int85 = monthDay69.indexOf(dateTimeFieldType83);
        int int86 = monthDay67.get(dateTimeFieldType83);
        int int87 = monthDay53.indexOf(dateTimeFieldType83);
        boolean boolean88 = monthDay21.isSupported(dateTimeFieldType83);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.MonthDay monthDay91 = monthDay21.withPeriodAdded(readablePeriod89, 8);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(monthDay91);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        int int32 = monthDay13.get(dateTimeFieldType29);
        org.joda.time.MonthDay.Property property33 = monthDay13.dayOfMonth();
        int int34 = property33.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = monthDay24.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay39.dayOfMonth();
        org.joda.time.Chronology chronology45 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay((-1L), chronology45);
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay((java.lang.Object) monthDay46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay51 = monthDay49.minusDays((int) '#');
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay53.dayOfMonth();
        org.joda.time.Chronology chronology59 = monthDay53.getChronology();
        org.joda.time.Chronology chronology60 = monthDay53.getChronology();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = monthDay53.toDateTime(readableInstant61);
        org.joda.time.MonthDay monthDay64 = monthDay53.plusMonths((int) ' ');
        boolean boolean65 = monthDay49.isAfter((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property72 = monthDay67.dayOfMonth();
        org.joda.time.MonthDay monthDay74 = property72.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay76 = property72.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = monthDay78.minusMonths((int) (byte) -1);
        boolean boolean83 = property72.equals((java.lang.Object) monthDay82);
        int int84 = property72.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property72.getFieldType();
        org.joda.time.MonthDay.Property property86 = monthDay64.property(dateTimeFieldType85);
        int int87 = monthDay47.indexOf(dateTimeFieldType85);
        org.joda.time.MonthDay.Property property88 = monthDay8.property(dateTimeFieldType85);
        java.lang.String str89 = property88.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 31 + "'", int84 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2" + "'", str89, "2");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        java.lang.String str35 = monthDay33.toString();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = monthDay33.toDateTime(readableInstant36);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = property6.compareTo(readableInstant36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "--01-01" + "'", str35, "--01-01");
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay.Property property27 = monthDay26.monthOfYear();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.MonthDay monthDay52 = monthDay49.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay54 = monthDay52.plusMonths(1);
        int int55 = monthDay54.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray56 = monthDay54.getFields();
        org.joda.time.MonthDay monthDay58 = monthDay54.withMonthOfYear((int) (byte) 1);
        boolean boolean59 = monthDay26.isAfter((org.joda.time.ReadablePartial) monthDay58);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay30 = monthDay26.withMonthOfYear(12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        int int19 = property14.getMinimumValue();
        int int20 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        boolean boolean68 = monthDay61.isSupported(dateTimeFieldType67);
        boolean boolean69 = monthDay57.isSupported(dateTimeFieldType67);
        org.joda.time.Chronology chronology70 = monthDay57.getChronology();
        org.joda.time.MonthDay monthDay71 = monthDay32.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay73.dayOfMonth();
        org.joda.time.Chronology chronology79 = monthDay73.getChronology();
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MonthDay monthDay83 = monthDay81.withChronologyRetainFields(chronology82);
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = monthDay85.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property90 = monthDay83.property(dateTimeFieldType89);
        boolean boolean91 = monthDay73.isSupported(dateTimeFieldType89);
        int int92 = monthDay71.get(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.getMaximumValue();
        java.lang.String str19 = property6.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(31, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.MonthDay monthDay31 = property28.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.DurationField durationField44 = property42.getDurationField();
        java.util.Locale locale45 = null;
        int int46 = property42.getMaximumTextLength(locale45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.Chronology chronology55 = monthDay48.getChronology();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = monthDay48.toDateTime(readableInstant56);
        int int58 = property42.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = property28.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MonthDay monthDay62 = monthDay1.plusDays((int) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(monthDay62);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        java.util.Locale locale14 = null;
        org.joda.time.MonthDay monthDay15 = property11.setCopy("2", locale14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.MonthDay monthDay37 = property34.addWrapFieldToCopy((int) (short) 1);
        boolean boolean38 = monthDay17.isBefore((org.joda.time.ReadablePartial) monthDay37);
        org.joda.time.MonthDay monthDay40 = monthDay37.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay42 = monthDay40.plusMonths(1);
        int int43 = monthDay40.size();
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        int int55 = property54.get();
        org.joda.time.DurationField durationField56 = property54.getDurationField();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        boolean boolean68 = property54.equals((java.lang.Object) monthDay60);
        int int69 = property54.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property54.getFieldType();
        org.joda.time.MonthDay monthDay72 = monthDay40.withField(dateTimeFieldType70, (int) (byte) 1);
        int int73 = monthDay15.indexOf(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.plus(readablePeriod31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay((java.lang.Object) monthDay32, chronology33);
        int int35 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay32);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = monthDay32.toString("Property[dayOfMonth]", locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        java.lang.String str21 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "dayOfMonth" + "'", str21, "dayOfMonth");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = monthDay1.getFields();
        int int6 = monthDay1.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        org.joda.time.DateTimeField dateTimeField27 = property10.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = monthDay12.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = monthDay12.getField(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay30.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays(31);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay33.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.plus(readablePeriod49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.MonthDay monthDay64 = property61.addWrapFieldToCopy((int) (short) 1);
        boolean boolean65 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay44.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology68 = monthDay67.getChronology();
        org.joda.time.MonthDay monthDay69 = monthDay42.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay70 = monthDay28.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology71 = monthDay70.getChronology();
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.now(chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay73 = new org.joda.time.MonthDay(0, (int) (byte) 100, chronology71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(monthDay72);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay1.getFieldType(0);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay26.withPeriodAdded(readablePeriod33, 9);
        org.joda.time.DateTimeField dateTimeField37 = monthDay35.getField(1);
        boolean boolean38 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay40 = monthDay1.withDayOfMonth(9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = monthDay40.toString("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) -1, 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addWrapFieldToCopy((int) (short) 1);
        boolean boolean47 = monthDay26.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = monthDay46.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay51 = monthDay49.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay49.minus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MonthDay monthDay58 = monthDay55.withPeriodAdded(readablePeriod56, 1);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        int int65 = monthDay58.indexOf(dateTimeFieldType64);
        org.joda.time.MonthDay.Property property66 = monthDay53.property(dateTimeFieldType64);
        int int67 = monthDay16.indexOf(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    @Ignore
  public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = monthDay1.plusDays((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = monthDay10.toString(dateTimeFormatter11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        int int38 = monthDay37.getDayOfMonth();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay40.dayOfMonth();
        org.joda.time.Chronology chronology46 = monthDay40.getChronology();
        org.joda.time.Chronology chronology47 = monthDay40.getChronology();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = monthDay40.toDateTime(readableInstant48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay51.plus(readablePeriod56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property68 = monthDay61.property(dateTimeFieldType67);
        int int69 = property68.get();
        org.joda.time.MonthDay monthDay71 = property68.addWrapFieldToCopy((int) (short) 1);
        boolean boolean72 = monthDay51.isBefore((org.joda.time.ReadablePartial) monthDay71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay51.getFieldType(0);
        int int75 = monthDay40.get(dateTimeFieldType74);
        org.joda.time.MonthDay.Property property76 = monthDay37.property(dateTimeFieldType74);
        int int77 = monthDay10.indexOf(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--11-24" + "'", str12, "--11-24");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        java.lang.String str29 = property10.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay10 = monthDay1.withPeriodAdded(readablePeriod8, 9);
        org.joda.time.DateTimeField dateTimeField12 = monthDay10.getField(1);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay17 = monthDay14.withPeriodAdded(readablePeriod15, 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        int int24 = monthDay17.indexOf(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay17.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay.Property property27 = monthDay26.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        int int29 = monthDay10.indexOf(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay12.getFieldType(0);
        int int36 = monthDay1.get(dateTimeFieldType35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        java.util.Locale locale48 = null;
        int int49 = property47.getMaximumTextLength(locale48);
        java.util.Locale locale50 = null;
        int int51 = property47.getMaximumShortTextLength(locale50);
        org.joda.time.DateTimeField dateTimeField52 = property47.getField();
        int int53 = property47.getMaximumValue();
        int int54 = property47.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property47.getFieldType();
        boolean boolean56 = monthDay1.isSupported(dateTimeFieldType55);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = monthDay1.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = property11.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = monthDay13.getFields();
        org.joda.time.MonthDay monthDay16 = monthDay13.minusDays((int) (short) -1);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = monthDay13.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        java.lang.Class<?> wildcardClass32 = monthDay30.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.minus(readablePeriod17);
        int[] intArray19 = monthDay16.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[12, 1]");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay(dateTimeZone7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = monthDay8.getFields();
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay11.plus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.MonthDay monthDay31 = property28.addWrapFieldToCopy((int) (short) 1);
        boolean boolean32 = monthDay11.isBefore((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        int int60 = monthDay57.size();
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        org.joda.time.DurationField durationField73 = property71.getDurationField();
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay77.property(dateTimeFieldType83);
        boolean boolean85 = property71.equals((java.lang.Object) monthDay77);
        int int86 = property71.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property71.getFieldType();
        org.joda.time.MonthDay monthDay89 = monthDay57.withField(dateTimeFieldType87, (int) (byte) 1);
        int int90 = monthDay11.indexOf(dateTimeFieldType87);
        int int91 = monthDay8.indexOf(dateTimeFieldType87);
        org.joda.time.MonthDay monthDay93 = monthDay1.withField(dateTimeFieldType87, 9);
        org.joda.time.MonthDay monthDay95 = monthDay93.minusDays((int) '#');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(monthDay95);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay29 = property10.setCopy("--01-09", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-09\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--01-01");
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        java.lang.Class<?> wildcardClass3 = monthDay1.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.plusMonths(1);
        int int50 = monthDay47.size();
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.DurationField durationField63 = property61.getDurationField();
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        boolean boolean75 = property61.equals((java.lang.Object) monthDay67);
        int int76 = property61.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property61.getFieldType();
        org.joda.time.MonthDay monthDay79 = monthDay47.withField(dateTimeFieldType77, (int) (byte) 1);
        int int80 = monthDay1.indexOf(dateTimeFieldType77);
        org.joda.time.MonthDay monthDay82 = monthDay1.minusMonths((int) ' ');
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((java.lang.Object) monthDay82);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(monthDay82);
    }

    @Test
    @Ignore
  public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        int int3 = property2.getMaximumValue();
        java.lang.String str4 = property2.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25" + "'", str4, "25");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay18 = property10.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValue();
        org.joda.time.MonthDay monthDay12 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay17 = monthDay14.withPeriodAdded(readablePeriod15, 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        int int24 = monthDay17.indexOf(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay17.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay.Property property27 = monthDay26.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property27.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property27.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = monthDay12.withField(dateTimeFieldType29, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = monthDay26.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay(100, 12, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (byte) -1);
        org.joda.time.LocalDate localDate3 = monthDay1.toLocalDate(100);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay7 = monthDay5.minusDays((int) '#');
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = monthDay9.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property14 = monthDay9.dayOfMonth();
        org.joda.time.Chronology chronology15 = monthDay9.getChronology();
        org.joda.time.Chronology chronology16 = monthDay9.getChronology();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = monthDay9.toDateTime(readableInstant17);
        org.joda.time.MonthDay monthDay20 = monthDay9.plusMonths((int) ' ');
        boolean boolean21 = monthDay5.isAfter((org.joda.time.ReadablePartial) monthDay20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = localDate3.isBefore((org.joda.time.ReadablePartial) monthDay20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.lang.String str15 = property10.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        java.lang.String str15 = property14.toString();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = monthDay17.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay27 = monthDay17.plusDays(31);
        int int28 = property14.compareTo((org.joda.time.ReadablePartial) monthDay27);
        java.util.Locale locale30 = null;
        java.lang.String str31 = monthDay27.toString("--02-02", locale30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "--02-02" + "'", str31, "--02-02");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        int int26 = monthDay16.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        org.joda.time.MonthDay.Property property39 = monthDay31.monthOfYear();
        int int40 = monthDay31.getDayOfMonth();
        org.joda.time.MonthDay.Property property41 = monthDay31.dayOfMonth();
        int int42 = monthDay31.getDayOfMonth();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay44.dayOfMonth();
        org.joda.time.Chronology chronology50 = monthDay44.getChronology();
        org.joda.time.MonthDay monthDay51 = monthDay31.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay((java.lang.Object) locale26, chronology50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay((java.lang.Object) monthDay52, chronology53);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(monthDay51);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        int int32 = monthDay31.getMonthOfYear();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        java.util.Locale locale44 = null;
        int int45 = property43.getMaximumTextLength(locale44);
        org.joda.time.MonthDay monthDay47 = property43.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.minus(readablePeriod48);
        boolean boolean50 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay47);
        boolean boolean51 = monthDay4.equals((java.lang.Object) monthDay31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay53 = monthDay31.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays(31);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay33.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.plus(readablePeriod49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.MonthDay monthDay64 = property61.addWrapFieldToCopy((int) (short) 1);
        boolean boolean65 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay44.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology68 = monthDay67.getChronology();
        org.joda.time.MonthDay monthDay69 = monthDay42.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay70 = monthDay28.withChronologyRetainFields(chronology68);
        org.joda.time.Chronology chronology71 = monthDay70.getChronology();
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.now(chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay73 = new org.joda.time.MonthDay(0, (int) (byte) -1, chronology71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(monthDay72);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        java.lang.String str11 = property6.getName();
        java.lang.String str12 = property6.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.toString();
        int int16 = property10.getMinimumValueOverall();
        int int17 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        java.util.Locale locale39 = null;
        int int40 = property38.getMaximumTextLength(locale39);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--02-02");
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.minus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = monthDay16.minusMonths(31);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str27 = property10.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay29 = property10.setCopy("--09-02");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[dayOfMonth]" + "'", str27, "Property[dayOfMonth]");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((java.lang.Object) monthDay9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = monthDay9.getFieldTypes();
        org.joda.time.MonthDay monthDay13 = monthDay9.minusDays((int) '#');
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay24.size();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        boolean boolean52 = property38.equals((java.lang.Object) monthDay44);
        int int53 = property38.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property38.getFieldType();
        org.joda.time.MonthDay monthDay56 = monthDay24.withField(dateTimeFieldType54, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay56.getFieldType(0);
        org.joda.time.DateTimeField dateTimeField60 = monthDay56.getField(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        org.joda.time.MonthDay monthDay42 = property40.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = monthDay44.indexOf(dateTimeFieldType58);
        int int61 = monthDay42.get(dateTimeFieldType58);
        int int62 = monthDay28.indexOf(dateTimeFieldType58);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        java.util.Locale locale74 = null;
        int int75 = property73.getMaximumTextLength(locale74);
        java.util.Locale locale76 = null;
        int int77 = property73.getMaximumShortTextLength(locale76);
        org.joda.time.DateTimeField dateTimeField78 = property73.getField();
        int int79 = property73.getMaximumValue();
        int int80 = property73.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property73.getFieldType();
        org.joda.time.MonthDay.Property property82 = monthDay28.property(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 31 + "'", int79 == 31);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        boolean boolean39 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay.Property property40 = monthDay18.monthOfYear();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        boolean boolean64 = monthDay18.isAfter((org.joda.time.ReadablePartial) monthDay62);
        int[] intArray65 = monthDay62.getValues();
        boolean boolean66 = property10.equals((java.lang.Object) intArray65);
        java.util.Locale locale67 = null;
        int int68 = property10.getMaximumTextLength(locale67);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 2]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(3, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(100, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay1.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay28.plus(readablePeriod33);
        int int35 = monthDay34.getMonthOfYear();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        java.util.Locale locale47 = null;
        int int48 = property46.getMaximumTextLength(locale47);
        org.joda.time.MonthDay monthDay50 = property46.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.minus(readablePeriod51);
        boolean boolean53 = monthDay34.isAfter((org.joda.time.ReadablePartial) monthDay50);
        boolean boolean54 = monthDay21.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay56 = monthDay21.plusDays((int) (short) -1);
        java.lang.String str57 = monthDay56.toString();
        org.joda.time.DurationFieldType durationFieldType58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay60 = monthDay56.withFieldAdded(durationFieldType58, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "--01-01" + "'", str57, "--01-01");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = monthDay24.minusMonths(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay((java.lang.Object) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = monthDay18.getField(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay30 = monthDay26.withMonthOfYear((int) (byte) 1);
        org.joda.time.Chronology chronology31 = monthDay30.getChronology();
        java.lang.Class<?> wildcardClass32 = monthDay30.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        int int32 = monthDay31.getMonthOfYear();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        java.util.Locale locale44 = null;
        int int45 = property43.getMaximumTextLength(locale44);
        org.joda.time.MonthDay monthDay47 = property43.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.minus(readablePeriod48);
        boolean boolean50 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay47);
        boolean boolean51 = monthDay4.equals((java.lang.Object) monthDay31);
        org.joda.time.MonthDay monthDay53 = monthDay4.withMonthOfYear((int) (short) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(10, (int) (short) 1);
        org.joda.time.MonthDay monthDay4 = monthDay2.withDayOfMonth((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay7 = monthDay4.withFieldAdded(durationFieldType5, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        int int25 = property10.getMaximumValueOverall();
        java.lang.String str26 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay32.dayOfMonth();
        org.joda.time.Chronology chronology38 = monthDay32.getChronology();
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.now(chronology38);
        org.joda.time.MonthDay monthDay40 = monthDay30.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology41 = monthDay30.getChronology();
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((java.lang.Object) monthDay30);
        int int43 = property10.compareTo((org.joda.time.ReadablePartial) monthDay42);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        boolean boolean19 = monthDay12.isSupported(dateTimeFieldType18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay23 = monthDay21.minusDays((int) '#');
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay25.dayOfMonth();
        org.joda.time.Chronology chronology31 = monthDay25.getChronology();
        org.joda.time.Chronology chronology32 = monthDay25.getChronology();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = monthDay25.toDateTime(readableInstant33);
        org.joda.time.MonthDay monthDay36 = monthDay25.plusMonths((int) ' ');
        boolean boolean37 = monthDay21.isAfter((org.joda.time.ReadablePartial) monthDay36);
        boolean boolean38 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.Chronology chronology39 = monthDay36.getChronology();
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay60.dayOfMonth();
        org.joda.time.MonthDay monthDay67 = property65.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay69 = property65.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = monthDay71.minusMonths((int) (byte) -1);
        boolean boolean76 = property65.equals((java.lang.Object) monthDay75);
        int int77 = property65.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property65.getFieldType();
        org.joda.time.MonthDay.Property property79 = monthDay57.property(dateTimeFieldType78);
        boolean boolean80 = monthDay40.isSupported(dateTimeFieldType78);
        int int81 = monthDay10.get(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 31 + "'", int77 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        int int43 = monthDay13.compareTo((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay45.plus(readablePeriod50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay55.property(dateTimeFieldType61);
        int int63 = property62.get();
        org.joda.time.MonthDay monthDay65 = property62.addWrapFieldToCopy((int) (short) 1);
        boolean boolean66 = monthDay45.isBefore((org.joda.time.ReadablePartial) monthDay65);
        org.joda.time.MonthDay monthDay68 = monthDay65.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay70 = monthDay68.minusDays(31);
        org.joda.time.MonthDay monthDay72 = monthDay70.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay74 = monthDay70.minusDays(0);
        org.joda.time.MonthDay monthDay76 = monthDay74.plusDays(0);
        int int77 = monthDay38.compareTo((org.joda.time.ReadablePartial) monthDay76);
        java.util.Locale locale79 = null;
        java.lang.String str80 = monthDay38.toString("--01-09", locale79);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "--01-09" + "'", str80, "--01-09");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = monthDay1.getFields();
        org.joda.time.MonthDay.Property property25 = monthDay1.monthOfYear();
        org.joda.time.ReadablePartial readablePartial26 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = monthDay1.isAfter(readablePartial26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology69 = monthDay68.getChronology();
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.now(chronology69);
        int int71 = monthDay70.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property41.getAsShortText();
        java.util.Locale locale45 = null;
        int int46 = property41.getMaximumTextLength(locale45);
        org.joda.time.DurationField durationField47 = property41.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        java.util.Locale locale27 = null;
        int int28 = property24.getMaximumTextLength(locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.Chronology chronology37 = monthDay30.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = monthDay30.toDateTime(readableInstant38);
        int int40 = property24.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int41 = property10.compareTo((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale42 = null;
        int int43 = property10.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay19 = monthDay16.withPeriodAdded(readablePeriod17, 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        int int26 = monthDay19.indexOf(dateTimeFieldType25);
        boolean boolean27 = monthDay14.isSupported(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = monthDay14.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        int[] intArray17 = monthDay16.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = monthDay16.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 1]");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay12.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology36 = monthDay35.getChronology();
        java.lang.String str37 = monthDay35.toString();
        int int38 = property6.compareTo((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay40 = monthDay35.plusDays((int) (byte) 0);
        int int42 = monthDay40.getValue(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--01-01" + "'", str37, "--01-01");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.DurationField durationField30 = property28.getDurationField();
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        boolean boolean42 = property28.equals((java.lang.Object) monthDay34);
        org.joda.time.MonthDay.Property property43 = monthDay34.dayOfMonth();
        org.joda.time.MonthDay.Property property44 = monthDay34.monthOfYear();
        boolean boolean45 = property11.equals((java.lang.Object) property44);
        java.lang.String str46 = property11.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Jan" + "'", str46, "Jan");
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        org.joda.time.MonthDay monthDay44 = monthDay42.minusMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("November");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"November\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay20 = property18.addWrapFieldToCopy((int) 'a');
        org.joda.time.MonthDay monthDay22 = monthDay20.plusMonths(10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        int int14 = property10.getMinimumValue();
        int int15 = property10.getMaximumValueOverall();
        int int16 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        int int14 = monthDay13.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = monthDay13.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays(100);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay8 = monthDay5.withPeriodAdded(readablePeriod6, 1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        int int15 = monthDay8.indexOf(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        boolean boolean27 = monthDay8.isEqual((org.joda.time.ReadablePartial) monthDay19);
        boolean boolean28 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay8);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay30.plus(readablePeriod35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        int int48 = property47.get();
        org.joda.time.MonthDay monthDay50 = property47.addWrapFieldToCopy((int) (short) 1);
        boolean boolean51 = monthDay30.isBefore((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay53 = monthDay50.minusMonths((int) (byte) 100);
        int int54 = monthDay53.getDayOfMonth();
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay56.dayOfMonth();
        org.joda.time.Chronology chronology62 = monthDay56.getChronology();
        org.joda.time.Chronology chronology63 = monthDay56.getChronology();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = monthDay56.toDateTime(readableInstant64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay67.plus(readablePeriod72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay77.property(dateTimeFieldType83);
        int int85 = property84.get();
        org.joda.time.MonthDay monthDay87 = property84.addWrapFieldToCopy((int) (short) 1);
        boolean boolean88 = monthDay67.isBefore((org.joda.time.ReadablePartial) monthDay87);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = monthDay67.getFieldType(0);
        int int91 = monthDay56.get(dateTimeFieldType90);
        org.joda.time.MonthDay.Property property92 = monthDay53.property(dateTimeFieldType90);
        boolean boolean93 = monthDay1.isSupported(dateTimeFieldType90);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = monthDay1.getValue(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.Chronology chronology9 = monthDay3.getChronology();
        org.joda.time.Chronology chronology10 = monthDay3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay((int) (byte) 0, (int) (short) -1, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        int int14 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property10.addToCopy((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int18 = monthDay16.getValue(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay39.withPeriodAdded(readablePeriod40, 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        int int49 = monthDay42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay42.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay.Property property52 = monthDay51.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.MonthDay.Property property54 = monthDay37.property(dateTimeFieldType53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay56.dayOfMonth();
        org.joda.time.Chronology chronology62 = monthDay56.getChronology();
        org.joda.time.Chronology chronology63 = monthDay56.getChronology();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = monthDay56.toDateTime(readableInstant64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay67.plus(readablePeriod72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay77.property(dateTimeFieldType83);
        int int85 = property84.get();
        org.joda.time.MonthDay monthDay87 = property84.addWrapFieldToCopy((int) (short) 1);
        boolean boolean88 = monthDay67.isBefore((org.joda.time.ReadablePartial) monthDay87);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.MonthDay monthDay90 = monthDay67.withChronologyRetainFields(chronology89);
        org.joda.time.Chronology chronology91 = monthDay90.getChronology();
        org.joda.time.MonthDay monthDay92 = org.joda.time.MonthDay.now(chronology91);
        org.joda.time.MonthDay monthDay93 = monthDay56.withChronologyRetainFields(chronology91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay94 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType53, chronology91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(monthDay92);
        org.junit.Assert.assertNotNull(monthDay93);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.MonthDay monthDay31 = property28.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.DurationField durationField44 = property42.getDurationField();
        java.util.Locale locale45 = null;
        int int46 = property42.getMaximumTextLength(locale45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.Chronology chronology55 = monthDay48.getChronology();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = monthDay48.toDateTime(readableInstant56);
        int int58 = property42.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = property28.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField62 = monthDay1.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) -1, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay23 = property10.setCopy((int) (short) 1);
        int int24 = property10.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = property10.setCopy("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        int int14 = monthDay5.getDayOfMonth();
        org.joda.time.MonthDay.Property property15 = monthDay5.dayOfMonth();
        int int16 = monthDay5.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay5.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        org.joda.time.MonthDay.Property property30 = monthDay22.monthOfYear();
        int int31 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay.Property property32 = monthDay22.dayOfMonth();
        int int33 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay42 = monthDay22.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay43 = monthDay18.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        org.joda.time.MonthDay.Property property55 = monthDay47.monthOfYear();
        int int56 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay.Property property57 = monthDay47.dayOfMonth();
        int int58 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay60.dayOfMonth();
        org.joda.time.Chronology chronology66 = monthDay60.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay47.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = new org.joda.time.MonthDay((java.lang.Object) monthDay18, chronology66);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay75.dayOfMonth();
        org.joda.time.Chronology chronology81 = monthDay75.getChronology();
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.now(chronology81);
        org.joda.time.MonthDay monthDay83 = monthDay73.withChronologyRetainFields(chronology81);
        org.joda.time.MonthDay monthDay84 = new org.joda.time.MonthDay(10L, chronology81);
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay((java.lang.Object) monthDay18, chronology81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay86 = new org.joda.time.MonthDay((int) (byte) 1, (int) (short) 100, chronology81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.MonthDay monthDay10 = property8.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay12.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology36 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay((java.lang.Object) monthDay10, chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay39 = new org.joda.time.MonthDay((int) '4', 1, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(monthDay37);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.Class<?> wildcardClass12 = monthDay3.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        java.lang.String str26 = monthDay24.toString();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = monthDay24.toDateTime(readableInstant27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        int int41 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay.Property property42 = monthDay32.dayOfMonth();
        int int43 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay45.dayOfMonth();
        org.joda.time.Chronology chronology51 = monthDay45.getChronology();
        org.joda.time.MonthDay monthDay52 = monthDay32.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay(chronology51);
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay(chronology51);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.now(chronology51);
        org.joda.time.MonthDay monthDay56 = monthDay24.withChronologyRetainFields(chronology51);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--01-01" + "'", str26, "--01-01");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay56);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay3.withChronologyRetainFields(chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay35 = monthDay32.withFieldAdded(durationFieldType33, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology39 = monthDay26.getChronology();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.now(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay((int) (byte) 0, (int) '#', chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay8 = property6.setCopy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        boolean boolean20 = property14.equals((java.lang.Object) monthDay19);
        org.joda.time.MonthDay monthDay22 = property14.addToCopy((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = monthDay22.getField(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(30, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property39 = monthDay38.dayOfMonth();
        int int40 = property39.getMaximumValueOverall();
        java.util.Locale locale42 = null;
        org.joda.time.MonthDay monthDay43 = property39.setCopy("1", locale42);
        int int44 = property10.compareTo((org.joda.time.ReadablePartial) monthDay43);
        java.lang.String str45 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.DurationField durationField23 = property21.getDurationField();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        boolean boolean35 = property21.equals((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay41 = monthDay38.withPeriodAdded(readablePeriod39, 1);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        int int48 = monthDay41.indexOf(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay41.withChronologyRetainFields(chronology49);
        boolean boolean51 = monthDay36.isBefore((org.joda.time.ReadablePartial) monthDay50);
        int int52 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        int int53 = monthDay50.getDayOfMonth();
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay55.plus(readablePeriod60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property72 = monthDay65.property(dateTimeFieldType71);
        int int73 = property72.get();
        org.joda.time.MonthDay monthDay75 = property72.addWrapFieldToCopy((int) (short) 1);
        boolean boolean76 = monthDay55.isBefore((org.joda.time.ReadablePartial) monthDay75);
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = monthDay55.getFields();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay55.minus(readablePeriod78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.MonthDay monthDay82 = monthDay55.withPeriodAdded(readablePeriod80, (int) (byte) -1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay((long) (short) 100, chronology84);
        org.joda.time.MonthDay monthDay87 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MonthDay monthDay89 = monthDay87.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = monthDay87.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property92 = monthDay87.dayOfMonth();
        org.joda.time.Chronology chronology93 = monthDay87.getChronology();
        org.joda.time.Chronology chronology94 = monthDay87.getChronology();
        org.joda.time.ReadableInstant readableInstant95 = null;
        org.joda.time.DateTime dateTime96 = monthDay87.toDateTime(readableInstant95);
        org.joda.time.DateTime dateTime97 = monthDay85.toDateTime(readableInstant95);
        org.joda.time.DateTime dateTime98 = monthDay55.toDateTime((org.joda.time.ReadableInstant) dateTime97);
        org.joda.time.DateTime dateTime99 = monthDay50.toDateTime((org.joda.time.ReadableInstant) dateTime98);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        java.lang.String str15 = property10.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property10.setCopy("--11-24");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.getMonthDay();
        java.util.Locale locale17 = null;
        int int18 = property10.getMaximumTextLength(locale17);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--11-25");
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        int int43 = monthDay24.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DurationField durationField25 = property10.getDurationField();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay29 = property10.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("January", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        org.joda.time.MonthDay monthDay10 = property6.addToCopy(0);
        org.joda.time.DurationField durationField11 = property6.getRangeDurationField();
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay4 = monthDay1.withFieldAdded(durationFieldType2, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay60.plus(readablePeriod65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        org.joda.time.MonthDay monthDay80 = property77.addWrapFieldToCopy((int) (short) 1);
        boolean boolean81 = monthDay60.isBefore((org.joda.time.ReadablePartial) monthDay80);
        org.joda.time.MonthDay monthDay83 = monthDay80.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay85 = monthDay83.plusMonths(1);
        int int86 = monthDay57.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int87 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int88 = monthDay83.getMonthOfYear();
        org.joda.time.MonthDay monthDay90 = monthDay83.plusDays(100);
        org.joda.time.MonthDay.Property property91 = monthDay90.dayOfMonth();
        java.util.Locale locale93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay94 = property91.setCopy("--11-25", locale93);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-25\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValueOverall();
        org.joda.time.DurationField durationField11 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        int int50 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        java.util.Locale locale24 = null;
        int int25 = property23.getMaximumTextLength(locale24);
        int int26 = property23.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay monthDay34 = property32.addWrapFieldToCopy(1);
        boolean boolean35 = monthDay16.isEqual((org.joda.time.ReadablePartial) monthDay34);
        java.lang.String str36 = monthDay16.toString();
        int int37 = monthDay16.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "--01-01" + "'", str36, "--01-01");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = null;
        int int60 = property56.getMaximumTextLength(locale59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        int int72 = property56.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int75 = property10.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int76 = property10.getMinimumValueOverall();
        int int77 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        boolean boolean35 = monthDay28.isSupported(dateTimeFieldType34);
        boolean boolean36 = monthDay24.isSupported(dateTimeFieldType34);
        java.lang.String str38 = monthDay24.toString("--02-02");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "--02-02" + "'", str38, "--02-02");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        int int43 = monthDay13.compareTo((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay45.plus(readablePeriod50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay55.property(dateTimeFieldType61);
        int int63 = property62.get();
        org.joda.time.MonthDay monthDay65 = property62.addWrapFieldToCopy((int) (short) 1);
        boolean boolean66 = monthDay45.isBefore((org.joda.time.ReadablePartial) monthDay65);
        org.joda.time.MonthDay monthDay68 = monthDay65.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay70 = monthDay68.minusDays(31);
        org.joda.time.MonthDay monthDay72 = monthDay70.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay74 = monthDay70.minusDays(0);
        org.joda.time.MonthDay monthDay76 = monthDay74.plusDays(0);
        int int77 = monthDay38.compareTo((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay38.minus(readablePeriod78);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(monthDay79);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay21.minusDays(31);
        int[] intArray27 = monthDay21.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 2]");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = monthDay31.getField(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay40 = monthDay37.withFieldAdded(durationFieldType38, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.MonthDay.Property property15 = monthDay13.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay46 = monthDay31.minusMonths((int) (byte) 100);
        java.util.Locale locale48 = null;
        java.lang.String str49 = monthDay46.toString("--09-02", locale48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay51.plus(readablePeriod56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property68 = monthDay61.property(dateTimeFieldType67);
        int int69 = property68.get();
        org.joda.time.MonthDay monthDay71 = property68.addWrapFieldToCopy((int) (short) 1);
        boolean boolean72 = monthDay51.isBefore((org.joda.time.ReadablePartial) monthDay71);
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = monthDay51.getFields();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay51.minus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay78 = monthDay51.withPeriodAdded(readablePeriod76, (int) (byte) -1);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = new org.joda.time.MonthDay((long) (short) 100, chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay83.dayOfMonth();
        org.joda.time.Chronology chronology89 = monthDay83.getChronology();
        org.joda.time.Chronology chronology90 = monthDay83.getChronology();
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.DateTime dateTime92 = monthDay83.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime93 = monthDay81.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime94 = monthDay51.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime95 = monthDay46.toDateTime((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "--09-02" + "'", str49, "--09-02");
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay37.dayOfMonth();
        org.joda.time.Chronology chronology43 = monthDay37.getChronology();
        org.joda.time.Chronology chronology44 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay45 = monthDay32.withChronologyRetainFields(chronology44);
        java.lang.String str46 = monthDay32.toString();
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = monthDay32.toString("Property[monthOfYear]", locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "--09-01" + "'", str46, "--09-01");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay1.getFieldType(0);
        int int25 = monthDay1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = monthDay1.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        int int2 = monthDay1.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = monthDay1.getFields();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property10.setCopy("January");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"January\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        int int17 = monthDay16.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        org.joda.time.MonthDay monthDay28 = property10.getMonthDay();
        java.util.Locale locale29 = null;
        int int30 = property10.getMaximumTextLength(locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay32 = property10.setCopy((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((java.lang.Object) monthDay21);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.MonthDay monthDay52 = monthDay49.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay54 = monthDay52.minusDays(31);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay59 = monthDay56.withPeriodAdded(readablePeriod57, 1);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        int int66 = monthDay59.indexOf(dateTimeFieldType65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay59.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay70.plus(readablePeriod75);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MonthDay monthDay84 = monthDay82.withChronologyRetainFields(chronology83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = monthDay82.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property87 = monthDay80.property(dateTimeFieldType86);
        int int88 = property87.get();
        org.joda.time.MonthDay monthDay90 = property87.addWrapFieldToCopy((int) (short) 1);
        boolean boolean91 = monthDay70.isBefore((org.joda.time.ReadablePartial) monthDay90);
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.MonthDay monthDay93 = monthDay70.withChronologyRetainFields(chronology92);
        org.joda.time.Chronology chronology94 = monthDay93.getChronology();
        org.joda.time.MonthDay monthDay95 = monthDay68.withChronologyRetainFields(chronology94);
        org.joda.time.MonthDay monthDay96 = monthDay54.withChronologyRetainFields(chronology94);
        org.joda.time.Chronology chronology97 = monthDay96.getChronology();
        org.joda.time.MonthDay monthDay98 = monthDay21.withChronologyRetainFields(chronology97);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(monthDay95);
        org.junit.Assert.assertNotNull(monthDay96);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertNotNull(monthDay98);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.withPeriodAdded(readablePeriod36, (int) 'a');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(monthDay38);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay20.withPeriodAdded(readablePeriod21, 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        int int30 = monthDay23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay23.get(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = monthDay23.isSupported(dateTimeFieldType40);
        int int42 = monthDay18.compareTo((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay44 = monthDay18.minusMonths((int) ' ');
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(10L);
        boolean boolean47 = monthDay18.isAfter((org.joda.time.ReadablePartial) monthDay46);
        java.util.Locale locale49 = null;
        java.lang.String str50 = monthDay46.toString("--09-02", locale49);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "--09-02" + "'", str50, "--09-02");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addWrapFieldToCopy((int) (short) 10);
        int int18 = property14.getMinimumValueOverall();
        java.util.Locale locale19 = null;
        int int20 = property14.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        int int24 = property23.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = property23.compareTo(readablePartial25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property41.getAsString();
        int int45 = property41.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = monthDay15.indexOf(dateTimeFieldType29);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.DurationField durationField58 = property56.getDurationField();
        java.util.Locale locale59 = null;
        int int60 = property56.getMaximumTextLength(locale59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.Chronology chronology69 = monthDay62.getChronology();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = monthDay62.toDateTime(readableInstant70);
        int int72 = property56.compareTo((org.joda.time.ReadableInstant) dateTime71);
        int int73 = property42.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int int75 = property10.compareTo((org.joda.time.ReadableInstant) dateTime71);
        java.util.Locale locale76 = null;
        java.lang.String str77 = property10.getAsText(locale76);
        int int78 = property10.getMaximumValueOverall();
        int int79 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 31 + "'", int78 == 31);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        int int17 = property10.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property10.getFieldType();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay20.withChronologyRetainFields(chronology42);
        org.joda.time.Chronology chronology44 = monthDay43.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) property10, chronology44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        java.util.Locale locale39 = null;
        int int40 = property38.getMaximumTextLength(locale39);
        java.util.Locale locale41 = null;
        int int42 = property38.getMaximumShortTextLength(locale41);
        org.joda.time.DateTimeField dateTimeField43 = property38.getField();
        int int44 = property38.getMaximumValue();
        int int45 = property38.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property38.getFieldType();
        boolean boolean47 = monthDay26.isSupported(dateTimeFieldType46);
        org.joda.time.MonthDay monthDay49 = monthDay26.plusMonths(100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(monthDay49);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 3);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.DurationFieldType durationFieldType67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay69 = monthDay66.withFieldAdded(durationFieldType67, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay73.dayOfMonth();
        org.joda.time.Chronology chronology79 = monthDay73.getChronology();
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(chronology79);
        org.joda.time.MonthDay monthDay81 = monthDay71.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = new org.joda.time.MonthDay(10L, chronology79);
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = null;
        java.lang.String str85 = monthDay83.toString(dateTimeFormatter84);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "--01-01" + "'", str85, "--01-01");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        int int20 = property10.getMaximumValueOverall();
        java.lang.String str21 = property10.getAsString();
        java.util.Locale locale22 = null;
        int int23 = property10.getMaximumShortTextLength(locale22);
        java.util.Locale locale24 = null;
        java.lang.String str25 = property10.getAsText(locale24);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        java.lang.String str12 = property11.getAsText();
        org.joda.time.MonthDay monthDay14 = property11.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        boolean boolean39 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay41 = monthDay38.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay43 = monthDay41.plusMonths(1);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        boolean boolean52 = monthDay45.isSupported(dateTimeFieldType51);
        boolean boolean53 = monthDay41.isSupported(dateTimeFieldType51);
        org.joda.time.Chronology chronology54 = monthDay41.getChronology();
        org.joda.time.MonthDay monthDay55 = monthDay16.withChronologyRetainFields(chronology54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay((java.lang.Object) 8, chronology54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(monthDay55);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        java.lang.String str18 = property11.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "January" + "'", str18, "January");
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay28 = monthDay1.withPeriodAdded(readablePeriod26, (int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = monthDay28.isSupported(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = monthDay16.minusDays((int) (short) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay33.getFieldType(0);
        int int57 = monthDay28.indexOf(dateTimeFieldType56);
        int int58 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = monthDay28.minusDays((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = monthDay28.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = property11.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = monthDay16.toString(dateTimeFormatter17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = monthDay16.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--01-01" + "'", str18, "--01-01");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(dateTimeZone25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay29.dayOfMonth();
        org.joda.time.Chronology chronology35 = monthDay29.getChronology();
        org.joda.time.Chronology chronology36 = monthDay29.getChronology();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = monthDay29.toDateTime(readableInstant37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay40.plus(readablePeriod45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.MonthDay monthDay60 = property57.addWrapFieldToCopy((int) (short) 1);
        boolean boolean61 = monthDay40.isBefore((org.joda.time.ReadablePartial) monthDay60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay40.getFieldType(0);
        int int64 = monthDay29.get(dateTimeFieldType63);
        boolean boolean65 = monthDay26.isSupported(dateTimeFieldType63);
        org.joda.time.MonthDay.Property property66 = monthDay24.property(dateTimeFieldType63);
        org.joda.time.DurationField durationField67 = property66.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        java.util.Locale locale15 = null;
        org.joda.time.MonthDay monthDay16 = property11.setCopy("2", locale15);
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        int int20 = monthDay19.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.getAsString();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.now(chronology21);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay(0L, chronology21);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.DurationField durationField36 = property34.getDurationField();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        boolean boolean48 = property34.equals((java.lang.Object) monthDay40);
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay((java.lang.Object) monthDay40);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        boolean boolean64 = monthDay49.isBefore((org.joda.time.ReadablePartial) monthDay63);
        int int65 = monthDay23.compareTo((org.joda.time.ReadablePartial) monthDay63);
        int int66 = property10.compareTo((org.joda.time.ReadablePartial) monthDay63);
        java.util.Locale locale68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay69 = property10.setCopy("--11-25", locale68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-25\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay23 = property10.setCopy("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay4.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        int int40 = monthDay33.getDayOfMonth();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) monthDay33);
        boolean boolean42 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay33);
        org.joda.time.Chronology chronology43 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 2, chronology43);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay(chronology43);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(chronology43);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        java.lang.String str12 = property11.getAsText();
        org.joda.time.MonthDay monthDay14 = property11.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        boolean boolean39 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay41 = monthDay38.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay43 = monthDay41.plusMonths(1);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        boolean boolean52 = monthDay45.isSupported(dateTimeFieldType51);
        boolean boolean53 = monthDay41.isSupported(dateTimeFieldType51);
        org.joda.time.Chronology chronology54 = monthDay41.getChronology();
        org.joda.time.MonthDay monthDay55 = monthDay16.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay((long) 11, chronology54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay56.getFieldType(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(monthDay55);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.DurationField durationField37 = property35.getDurationField();
        java.util.Locale locale38 = null;
        int int39 = property35.getMaximumTextLength(locale38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.Chronology chronology47 = monthDay41.getChronology();
        org.joda.time.Chronology chronology48 = monthDay41.getChronology();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = monthDay41.toDateTime(readableInstant49);
        int int51 = property35.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = property10.compareTo((org.joda.time.ReadableInstant) dateTime50);
        java.util.Locale locale54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay55 = property10.setCopy("--11-24", locale54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--11-24\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusDays(0);
        java.lang.Class<?> wildcardClass31 = monthDay26.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        org.joda.time.MonthDay.Property property57 = monthDay49.monthOfYear();
        int int58 = monthDay49.getDayOfMonth();
        boolean boolean59 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay((long) (short) 100, chronology61);
        int int63 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property70 = monthDay65.dayOfMonth();
        org.joda.time.MonthDay monthDay72 = property70.addWrapFieldToCopy(1);
        int int73 = property70.getMaximumValue();
        int int74 = property70.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property70.getFieldType();
        boolean boolean76 = monthDay62.isSupported(dateTimeFieldType75);
        org.joda.time.MonthDay monthDay78 = monthDay62.minusDays(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField80 = monthDay62.getField(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 31 + "'", int73 == 31);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 31 + "'", int74 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(monthDay78);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        java.lang.String str5 = monthDay3.toString("--11-25");
        // The following exception was thrown during execution in test generation
        try {
            int int7 = monthDay3.getValue(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--11-25" + "'", str5, "--11-25");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay10 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DurationFieldType durationFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay13 = monthDay1.withFieldAdded(durationFieldType11, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay1.minus(readablePeriod18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = monthDay1.withDayOfMonth((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay50 = monthDay48.withMonthOfYear((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay23 = property10.setCopy((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay((java.lang.Object) property10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.DurationField durationField37 = property35.getDurationField();
        java.util.Locale locale38 = null;
        int int39 = property35.getMaximumTextLength(locale38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.Chronology chronology47 = monthDay41.getChronology();
        org.joda.time.Chronology chronology48 = monthDay41.getChronology();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = monthDay41.toDateTime(readableInstant49);
        int int51 = property35.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = property10.compareTo((org.joda.time.ReadableInstant) dateTime50);
        java.lang.String str53 = property10.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay((java.lang.Object) property10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay21.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        int int33 = monthDay21.get(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.MonthDay.Property property22 = monthDay5.property(dateTimeFieldType21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays(31);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay65.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology89 = monthDay88.getChronology();
        org.joda.time.MonthDay monthDay90 = monthDay63.withChronologyRetainFields(chronology89);
        org.joda.time.MonthDay monthDay91 = monthDay49.withChronologyRetainFields(chronology89);
        org.joda.time.Chronology chronology92 = monthDay91.getChronology();
        org.joda.time.MonthDay monthDay93 = monthDay5.withChronologyRetainFields(chronology92);
        org.joda.time.MonthDay monthDay94 = new org.joda.time.MonthDay((int) (short) 1, 12, chronology92);
        java.util.Locale locale96 = null;
        java.lang.String str97 = monthDay94.toString("--11-25", locale96);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "--11-25" + "'", str97, "--11-25");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(11, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        int int11 = property6.get();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property6.getAsText(locale12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay30 = monthDay26.withMonthOfYear((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = monthDay26.toString("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    @Ignore
  public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((java.lang.Object) monthDay2, chronology3);
        java.lang.String str5 = monthDay2.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay7 = monthDay2.withMonthOfYear((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--11-25" + "'", str5, "--11-25");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        int[] intArray18 = monthDay1.getValues();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        boolean boolean43 = property29.equals((java.lang.Object) monthDay35);
        boolean boolean44 = monthDay1.equals((java.lang.Object) monthDay35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = monthDay1.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = monthDay16.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(10L);
        int int21 = monthDay20.size();
        org.joda.time.MonthDay monthDay23 = monthDay20.minusDays((int) (byte) 1);
        boolean boolean24 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        int int4 = monthDay3.size();
        org.joda.time.MonthDay monthDay6 = monthDay3.minusDays((int) ' ');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        int int18 = property11.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(2, 2);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay5 = new org.joda.time.MonthDay((java.lang.Object) dateTimeField4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.GJMonthOfYearDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = monthDay13.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsText(locale7);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        int int11 = property6.get();
        org.joda.time.ReadableInstant readableInstant12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = property6.compareTo(readableInstant12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays(31);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay33.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.plus(readablePeriod49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.MonthDay monthDay64 = property61.addWrapFieldToCopy((int) (short) 1);
        boolean boolean65 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay44.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology68 = monthDay67.getChronology();
        org.joda.time.MonthDay monthDay69 = monthDay42.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay70 = monthDay28.withChronologyRetainFields(chronology68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay(10, (int) '4', chronology68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay70);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (short) 100);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusMonths(1);
        int int45 = monthDay16.compareTo((org.joda.time.ReadablePartial) monthDay42);
        int[] intArray46 = monthDay42.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[9, 2]");
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(31, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay28 = monthDay1.withPeriodAdded(readablePeriod26, (int) (byte) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((long) (short) 100, chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.Chronology chronology40 = monthDay33.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = monthDay33.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = monthDay31.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay1.minus(readablePeriod45);
        int[] intArray47 = monthDay1.getValues();
        java.lang.Class<?> wildcardClass48 = monthDay1.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("monthOfYear", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        java.lang.String str16 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.DurationField durationField29 = property27.getDurationField();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        boolean boolean41 = property27.equals((java.lang.Object) monthDay33);
        org.joda.time.DateTimeField dateTimeField42 = property27.getField();
        java.util.Locale locale43 = null;
        int int44 = property27.getMaximumShortTextLength(locale43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        org.joda.time.MonthDay.Property property56 = monthDay48.monthOfYear();
        int int57 = monthDay48.getDayOfMonth();
        org.joda.time.MonthDay.Property property58 = monthDay48.dayOfMonth();
        int int59 = monthDay48.getDayOfMonth();
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay61.dayOfMonth();
        org.joda.time.Chronology chronology67 = monthDay61.getChronology();
        org.joda.time.MonthDay monthDay68 = monthDay48.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay((java.lang.Object) locale43, chronology67);
        boolean boolean70 = property10.equals((java.lang.Object) monthDay69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        java.lang.String str16 = property10.getAsShortText();
        int int17 = property10.getMinimumValue();
        int int18 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.plus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.MonthDay monthDay37 = property34.addWrapFieldToCopy((int) (short) 1);
        boolean boolean38 = monthDay17.isBefore((org.joda.time.ReadablePartial) monthDay37);
        org.joda.time.MonthDay monthDay40 = monthDay37.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay42 = monthDay40.plusMonths(1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        boolean boolean51 = monthDay44.isSupported(dateTimeFieldType50);
        boolean boolean52 = monthDay40.isSupported(dateTimeFieldType50);
        org.joda.time.Chronology chronology53 = monthDay40.getChronology();
        org.joda.time.MonthDay monthDay54 = monthDay15.withChronologyRetainFields(chronology53);
        org.joda.time.Chronology chronology55 = monthDay15.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay1.minus(readablePeriod18);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = monthDay19.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = monthDay24.getField((int) (byte) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = monthDay3.toString("November");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: N");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay(dateTimeZone43);
        boolean boolean45 = monthDay42.isEqual((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        int int65 = property64.get();
        org.joda.time.MonthDay monthDay67 = property64.addWrapFieldToCopy((int) (short) 1);
        boolean boolean68 = monthDay47.isBefore((org.joda.time.ReadablePartial) monthDay67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay47.getFieldType(0);
        int int71 = monthDay42.indexOf(dateTimeFieldType70);
        boolean boolean72 = monthDay13.isSupported(dateTimeFieldType70);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay13.minus(readablePeriod73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = new org.joda.time.MonthDay(chronology75);
        boolean boolean77 = monthDay13.isAfter((org.joda.time.ReadablePartial) monthDay76);
        java.lang.Class<?> wildcardClass78 = monthDay76.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValueOverall();
        java.lang.String str13 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfMonth" + "'", str13, "dayOfMonth");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.MonthDay.Property property22 = monthDay5.property(dateTimeFieldType21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays(31);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay65.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology89 = monthDay88.getChronology();
        org.joda.time.MonthDay monthDay90 = monthDay63.withChronologyRetainFields(chronology89);
        org.joda.time.MonthDay monthDay91 = monthDay49.withChronologyRetainFields(chronology89);
        org.joda.time.Chronology chronology92 = monthDay91.getChronology();
        org.joda.time.MonthDay monthDay93 = monthDay5.withChronologyRetainFields(chronology92);
        org.joda.time.MonthDay monthDay94 = new org.joda.time.MonthDay((int) (short) 1, 12, chronology92);
        org.joda.time.MonthDay.Property property95 = monthDay94.dayOfMonth();
        java.util.Locale locale97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay98 = property95.setCopy("", locale97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay3.withPeriodAdded(readablePeriod4, 1);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        int int13 = monthDay6.indexOf(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay6.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.MonthDay monthDay37 = property34.addWrapFieldToCopy((int) (short) 1);
        boolean boolean38 = monthDay17.isBefore((org.joda.time.ReadablePartial) monthDay37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay17.withChronologyRetainFields(chronology39);
        org.joda.time.Chronology chronology41 = monthDay40.getChronology();
        org.joda.time.MonthDay monthDay42 = monthDay15.withChronologyRetainFields(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay((int) ' ', (int) (short) 1, chronology41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(monthDay42);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.MonthDay.Property property22 = monthDay5.property(dateTimeFieldType21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays(31);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay65.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology89 = monthDay88.getChronology();
        org.joda.time.MonthDay monthDay90 = monthDay63.withChronologyRetainFields(chronology89);
        org.joda.time.MonthDay monthDay91 = monthDay49.withChronologyRetainFields(chronology89);
        org.joda.time.Chronology chronology92 = monthDay91.getChronology();
        org.joda.time.MonthDay monthDay93 = monthDay5.withChronologyRetainFields(chronology92);
        org.joda.time.MonthDay monthDay94 = new org.joda.time.MonthDay((int) (short) 1, 12, chronology92);
        org.joda.time.MonthDay.Property property95 = monthDay94.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        int int26 = property10.getMaximumValueOverall();
        int int27 = property10.get();
        java.util.Locale locale28 = null;
        int int29 = property10.getMaximumTextLength(locale28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        org.joda.time.DurationField durationField39 = property38.getDurationField();
        int int40 = property38.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) '#', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = monthDay19.getFields();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 1);
        boolean boolean26 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay22);
        boolean boolean27 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = monthDay1.toString(dateTimeFormatter28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = monthDay1.withDayOfMonth((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "--01-01" + "'", str29, "--01-01");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = monthDay16.plusDays((int) (byte) 0);
        org.joda.time.MonthDay.Property property19 = monthDay16.monthOfYear();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        org.joda.time.MonthDay.Property property33 = monthDay25.monthOfYear();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = monthDay35.indexOf(dateTimeFieldType49);
        boolean boolean52 = monthDay25.equals((java.lang.Object) int51);
        org.joda.time.MonthDay monthDay54 = monthDay25.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay56.plus(readablePeriod61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        int int74 = property73.get();
        org.joda.time.MonthDay monthDay76 = property73.addWrapFieldToCopy((int) (short) 1);
        boolean boolean77 = monthDay56.isBefore((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.MonthDay monthDay79 = monthDay76.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay81 = monthDay79.plusMonths(1);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = monthDay85.getFieldType((int) (byte) 1);
        boolean boolean90 = monthDay83.isSupported(dateTimeFieldType89);
        boolean boolean91 = monthDay79.isSupported(dateTimeFieldType89);
        org.joda.time.Chronology chronology92 = monthDay79.getChronology();
        org.joda.time.MonthDay monthDay93 = monthDay54.withChronologyRetainFields(chronology92);
        boolean boolean94 = property19.equals((java.lang.Object) chronology92);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "January" + "'", str21, "January");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay39.dayOfMonth();
        org.joda.time.Chronology chronology45 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay((-1L), chronology45);
        org.joda.time.MonthDay monthDay47 = new org.joda.time.MonthDay((java.lang.Object) monthDay46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay51 = monthDay49.minusDays((int) '#');
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay53.dayOfMonth();
        org.joda.time.Chronology chronology59 = monthDay53.getChronology();
        org.joda.time.Chronology chronology60 = monthDay53.getChronology();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = monthDay53.toDateTime(readableInstant61);
        org.joda.time.MonthDay monthDay64 = monthDay53.plusMonths((int) ' ');
        boolean boolean65 = monthDay49.isAfter((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property72 = monthDay67.dayOfMonth();
        org.joda.time.MonthDay monthDay74 = property72.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay76 = property72.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = monthDay78.minusMonths((int) (byte) -1);
        boolean boolean83 = property72.equals((java.lang.Object) monthDay82);
        int int84 = property72.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property72.getFieldType();
        org.joda.time.MonthDay.Property property86 = monthDay64.property(dateTimeFieldType85);
        int int87 = monthDay47.indexOf(dateTimeFieldType85);
        org.joda.time.MonthDay monthDay89 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MonthDay monthDay91 = monthDay89.withChronologyRetainFields(chronology90);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = monthDay89.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property94 = monthDay89.dayOfMonth();
        org.joda.time.Chronology chronology95 = monthDay89.getChronology();
        org.joda.time.Chronology chronology96 = monthDay89.getChronology();
        org.joda.time.MonthDay monthDay97 = org.joda.time.MonthDay.now(chronology96);
        org.joda.time.MonthDay monthDay98 = monthDay47.withChronologyRetainFields(chronology96);
        org.joda.time.MonthDay monthDay99 = monthDay36.withChronologyRetainFields(chronology96);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 31 + "'", int84 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(monthDay97);
        org.junit.Assert.assertNotNull(monthDay98);
        org.junit.Assert.assertNotNull(monthDay99);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        int int28 = monthDay1.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay1.withPeriodAdded(readablePeriod29, 31);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay34 = monthDay31.withFieldAdded(durationFieldType32, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.MonthDay monthDay14 = property11.setCopy("1");
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay((-1L), chronology23);
        boolean boolean25 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.MonthDay.Property property26 = monthDay24.monthOfYear();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay29.withPeriodAdded(readablePeriod30, 1);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay32.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay32.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay43.plus(readablePeriod48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        int int61 = property60.get();
        org.joda.time.MonthDay monthDay63 = property60.addWrapFieldToCopy((int) (short) 1);
        boolean boolean64 = monthDay43.isBefore((org.joda.time.ReadablePartial) monthDay63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay43.withChronologyRetainFields(chronology65);
        org.joda.time.Chronology chronology67 = monthDay66.getChronology();
        org.joda.time.MonthDay monthDay68 = monthDay41.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay((long) 9, chronology67);
        org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay((java.lang.Object) monthDay69);
        boolean boolean71 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay70);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        org.joda.time.DateTimeField dateTimeField47 = property10.getField();
        java.lang.Class<?> wildcardClass48 = property10.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = monthDay1.plusMonths((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = monthDay9.toString(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--02-01" + "'", str11, "--02-01");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        org.joda.time.MonthDay monthDay11 = property6.getMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = monthDay11.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(monthDay11);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        org.joda.time.MonthDay.Property property52 = monthDay44.monthOfYear();
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property69 = monthDay62.property(dateTimeFieldType68);
        int int70 = monthDay54.indexOf(dateTimeFieldType68);
        boolean boolean71 = monthDay44.equals((java.lang.Object) int70);
        org.joda.time.MonthDay monthDay73 = monthDay44.withMonthOfYear(9);
        int int75 = monthDay73.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = monthDay73.getFieldTypes();
        java.lang.String str78 = monthDay73.toString("--02-02");
        boolean boolean79 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay73);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "--02-02" + "'", str78, "--02-02");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.DurationField durationField23 = property21.getDurationField();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        boolean boolean35 = property21.equals((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay41 = monthDay38.withPeriodAdded(readablePeriod39, 1);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        int int48 = monthDay41.indexOf(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay41.withChronologyRetainFields(chronology49);
        boolean boolean51 = monthDay36.isBefore((org.joda.time.ReadablePartial) monthDay50);
        int int52 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay.Property property54 = monthDay50.property(dateTimeFieldType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) 'a', 31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay32.withPeriodAdded(readablePeriod33, 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        int int42 = monthDay35.indexOf(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay35.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay.Property property45 = monthDay44.dayOfMonth();
        java.lang.String str46 = property45.toString();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay48.plus(readablePeriod53);
        org.joda.time.MonthDay monthDay56 = monthDay48.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay58 = monthDay48.plusDays(31);
        int int59 = property45.compareTo((org.joda.time.ReadablePartial) monthDay58);
        int int60 = property10.compareTo((org.joda.time.ReadablePartial) monthDay58);
        java.util.Locale locale61 = null;
        int int62 = property10.getMaximumShortTextLength(locale61);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[dayOfMonth]" + "'", str46, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay15 = monthDay12.withPeriodAdded(readablePeriod13, 1);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        int int22 = monthDay15.indexOf(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay15.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        int int31 = monthDay15.get(dateTimeFieldType30);
        org.joda.time.MonthDay.Property property32 = monthDay10.property(dateTimeFieldType30);
        java.lang.String str33 = property32.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (short) 1);
        org.joda.time.MonthDay monthDay3 = monthDay1.withDayOfMonth(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = monthDay74.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property79 = monthDay72.property(dateTimeFieldType78);
        org.joda.time.MonthDay.Property property80 = monthDay72.monthOfYear();
        int int81 = monthDay72.getDayOfMonth();
        org.joda.time.MonthDay.Property property82 = monthDay72.dayOfMonth();
        int int83 = monthDay72.getDayOfMonth();
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay85.withChronologyRetainFields(chronology86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = monthDay85.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property90 = monthDay85.dayOfMonth();
        org.joda.time.Chronology chronology91 = monthDay85.getChronology();
        org.joda.time.MonthDay monthDay92 = monthDay72.withChronologyRetainFields(chronology91);
        org.joda.time.MonthDay monthDay94 = monthDay92.minusMonths((int) (byte) -1);
        boolean boolean95 = monthDay68.isEqual((org.joda.time.ReadablePartial) monthDay92);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(monthDay92);
        org.junit.Assert.assertNotNull(monthDay94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay2.withPeriodAdded(readablePeriod3, 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        int int12 = monthDay5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.MonthDay monthDay36 = property33.addWrapFieldToCopy((int) (short) 1);
        boolean boolean37 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay16.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology40 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay14.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((long) 9, chronology40);
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay((java.lang.Object) monthDay42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = monthDay43.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        java.util.Locale locale21 = null;
        int int22 = property10.getMaximumShortTextLength(locale21);
        int int23 = property10.getMaximumValueOverall();
        org.joda.time.DurationField durationField24 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.lang.String str27 = property10.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[dayOfMonth]" + "'", str27, "Property[dayOfMonth]");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay30 = monthDay25.withDayOfMonth((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay30.getFieldType(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MonthDay monthDay8 = new org.joda.time.MonthDay(dateTimeZone7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = monthDay8.getFields();
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay11.plus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.MonthDay monthDay31 = property28.addWrapFieldToCopy((int) (short) 1);
        boolean boolean32 = monthDay11.isBefore((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        int int60 = monthDay57.size();
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        org.joda.time.DurationField durationField73 = property71.getDurationField();
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay77.property(dateTimeFieldType83);
        boolean boolean85 = property71.equals((java.lang.Object) monthDay77);
        int int86 = property71.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property71.getFieldType();
        org.joda.time.MonthDay monthDay89 = monthDay57.withField(dateTimeFieldType87, (int) (byte) 1);
        int int90 = monthDay11.indexOf(dateTimeFieldType87);
        int int91 = monthDay8.indexOf(dateTimeFieldType87);
        org.joda.time.MonthDay monthDay93 = monthDay1.withField(dateTimeFieldType87, 9);
        java.util.Locale locale95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = monthDay93.toString("dayOfMonth", locale95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(monthDay93);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.MonthDay monthDay14 = property11.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "January" + "'", str16, "January");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        int int26 = property24.getMaximumValue();
        org.joda.time.MonthDay monthDay28 = property24.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay30.plus(readablePeriod35);
        int int37 = monthDay30.getDayOfMonth();
        int int38 = property24.compareTo((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = monthDay30.getFields();
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.DurationField durationField52 = property50.getDurationField();
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        boolean boolean64 = property50.equals((java.lang.Object) monthDay56);
        int int65 = property50.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property50.getFieldType();
        org.joda.time.MonthDay monthDay68 = monthDay30.withField(dateTimeFieldType66, (int) (short) 10);
        boolean boolean69 = monthDay13.isSupported(dateTimeFieldType66);
        int int70 = monthDay13.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay72 = monthDay13.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay3.withChronologyRetainFields(chronology31);
        org.joda.time.Chronology chronology33 = monthDay3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay3.minus(readablePeriod34);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(monthDay35);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        org.joda.time.MonthDay monthDay17 = property10.setCopy(3);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay43.plus(readablePeriod48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        int int61 = property60.get();
        org.joda.time.MonthDay monthDay63 = property60.addWrapFieldToCopy((int) (short) 1);
        boolean boolean64 = monthDay43.isBefore((org.joda.time.ReadablePartial) monthDay63);
        org.joda.time.MonthDay monthDay66 = monthDay63.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay68 = monthDay66.minusDays(31);
        boolean boolean69 = monthDay16.isAfter((org.joda.time.ReadablePartial) monthDay68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay(dateTimeZone70);
        org.joda.time.MonthDay monthDay73 = monthDay71.minusDays(100);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay75.dayOfMonth();
        org.joda.time.Chronology chronology81 = monthDay75.getChronology();
        org.joda.time.Chronology chronology82 = monthDay75.getChronology();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = monthDay75.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = monthDay71.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = monthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        boolean boolean10 = monthDay3.isSupported(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        boolean boolean29 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.Chronology chronology30 = monthDay27.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((int) (byte) -1, (int) (byte) 100, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay30 = monthDay25.minusDays((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = monthDay25.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        int int20 = property10.getMaximumValueOverall();
        java.util.Locale locale21 = null;
        int int22 = property10.getMaximumShortTextLength(locale21);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.DurationField durationField23 = property21.getDurationField();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        boolean boolean35 = property21.equals((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay41 = monthDay38.withPeriodAdded(readablePeriod39, 1);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        int int48 = monthDay41.indexOf(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay41.withChronologyRetainFields(chronology49);
        boolean boolean51 = monthDay36.isBefore((org.joda.time.ReadablePartial) monthDay50);
        int int52 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = monthDay50.getField(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay21.plus(readablePeriod23);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
    }
}


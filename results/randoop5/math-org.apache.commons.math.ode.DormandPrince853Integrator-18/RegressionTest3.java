import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator21.getStepHandler();
        double double23 = dormandPrince853Integrator21.getMaxStep();
        double[] doubleArray26 = null;
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray26, doubleArray32);
        dormandPrince853Integrator34.setMinReduction((double) (byte) 0);
        java.lang.String str37 = dormandPrince853Integrator34.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator42.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator34.setStepHandler(stepHandler44);
        dormandPrince853Integrator21.setStepHandler(stepHandler44);
        dormandPrince853Integrator6.setStepHandler(stepHandler44);
        double double48 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setSafety(1.4142135623730951d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator6.getStepHandler();
        double double10 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 31.622776601683793d + "'", double10 == 31.622776601683793d);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.8284271247461903d, (double) 1L, 47.753019278348006d, (double) 1L);
        dormandPrince853Integrator4.setMinReduction(52.0d);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        int int32 = dormandPrince853Integrator6.getOrder();
        double double33 = dormandPrince853Integrator6.getCurrentStepStart();
        java.lang.String str34 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setSafety((double) 'a');
        dormandPrince853Integrator6.setMaxGrowth((double) (short) 1);
        int int39 = dormandPrince853Integrator6.getOrder();
        dormandPrince853Integrator6.setMaxGrowth((double) 'a');
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction14, (double) 1, (double) 0L, (int) 'a');
        double double19 = dormandPrince853Integrator10.getMaxStep();
        double double20 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setSafety((-1.0d));
        double double23 = dormandPrince853Integrator10.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getSafety();
        java.lang.String str14 = dormandPrince853Integrator10.getName();
        double double15 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        dormandPrince853Integrator10.setMinReduction((double) (-1));
        double double18 = dormandPrince853Integrator10.getSafety();
        java.lang.String str19 = dormandPrince853Integrator10.getName();
        dormandPrince853Integrator10.setInitialStepSize((double) (short) 0);
        dormandPrince853Integrator10.setMaxGrowth((double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((-1.0d));
        double double10 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMinReduction(2.5298221281347035d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', 1.0d, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize(35.0d);
        double[] doubleArray12 = new double[] { (-1.0d), 0L };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray12, doubleArray13);
        double double15 = dormandPrince853Integrator14.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator14.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator14.addSwitchingFunction(switchingFunction17, (double) 0, (double) 10, (int) '4');
        double double22 = dormandPrince853Integrator14.getCurrentSignedStepsize();
        dormandPrince853Integrator14.setMinReduction((double) 10.0f);
        double double25 = dormandPrince853Integrator14.getCurrentStepStart();
        double double26 = dormandPrince853Integrator14.getCurrentSignedStepsize();
        double double27 = dormandPrince853Integrator14.getCurrentSignedStepsize();
        double double28 = dormandPrince853Integrator14.getMaxStep();
        double[] doubleArray31 = null;
        double[] doubleArray36 = new double[] { (-1.0d), 0L };
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray36, doubleArray37);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray31, doubleArray37);
        dormandPrince853Integrator39.setMinReduction((double) 100);
        dormandPrince853Integrator39.setMinReduction((double) ' ');
        dormandPrince853Integrator39.setMaxGrowth((double) ' ');
        double[] doubleArray50 = new double[] { (-1.0d), 0L };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray50, doubleArray51);
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator52.getStepHandler();
        dormandPrince853Integrator39.setStepHandler(stepHandler53);
        dormandPrince853Integrator14.setStepHandler(stepHandler53);
        double double56 = dormandPrince853Integrator14.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator14.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler57);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 31.622776601683793d + "'", double22 == 31.622776601683793d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 31.622776601683793d + "'", double26 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 31.622776601683793d + "'", double27 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(stepHandler53);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler57);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 10.0f);
        dormandPrince853Integrator4.setMinReduction((double) 100L);
        int int12 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray13 = null;
        double[] doubleArray18 = new double[] { (-1.0d), 0L };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray13, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray8, doubleArray19);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray32, doubleArray44);
        double[] doubleArray62 = new double[] { (-1.0d), 0L };
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray62, doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray62, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray32, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) 10L, doubleArray8, doubleArray32);
        double[] doubleArray79 = new double[] { (-1.0d), 0L };
        double[] doubleArray80 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray79, doubleArray80);
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator81.getStepHandler();
        dormandPrince853Integrator81.setInitialStepSize(1.0d);
        java.lang.String str85 = dormandPrince853Integrator81.getName();
        double double86 = dormandPrince853Integrator81.getMinStep();
        dormandPrince853Integrator81.setMaxGrowth(0.2d);
        double double89 = dormandPrince853Integrator81.getCurrentSignedStepsize();
        double double90 = dormandPrince853Integrator81.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler91 = dormandPrince853Integrator81.getStepHandler();
        dormandPrince853Integrator74.setStepHandler(stepHandler91);
        double double93 = dormandPrince853Integrator74.getSafety();
        double double94 = dormandPrince853Integrator74.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str85, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.0d + "'", double86 == 10.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 31.622776601683793d + "'", double89 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.2d + "'", double90 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.9d + "'", double93 == 0.9d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.2d + "'", double94 == 0.2d);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setMinReduction((double) 0L);
        dormandPrince853Integrator20.setMaxGrowth((double) 10.0f);
        double double28 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        double double29 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations30 = null;
        double[] doubleArray38 = new double[] { (-1.0d), 0L };
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray38, doubleArray39);
        double[] doubleArray43 = null;
        double[] doubleArray52 = new double[] { (-1.0d), 0L };
        double[] doubleArray53 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray52, doubleArray53);
        double[] doubleArray59 = new double[] { (-1.0d), 0L };
        double[] doubleArray60 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray59, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray52, doubleArray60);
        double[] doubleArray63 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray52, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', 0.0d, doubleArray43, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, (double) ' ', doubleArray39, doubleArray52);
        double[] doubleArray74 = new double[] { (-1.0d), 0L };
        double[] doubleArray75 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray74, doubleArray75);
        double[] doubleArray81 = null;
        double[] doubleArray86 = new double[] { (-1.0d), 0L };
        double[] doubleArray87 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray86, doubleArray87);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray81, doubleArray87);
        double[] doubleArray96 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray87, doubleArray96);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator98 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray75, doubleArray87);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator20.integrate(firstOrderDifferentialEquations30, (double) 'a', doubleArray52, 0.0d, doubleArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) 100);
        dormandPrince853Integrator4.setInitialStepSize((-0.0d));
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 22.80350850198276d + "'", double14 == 22.80350850198276d);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(0.0d);
        double double11 = dormandPrince853Integrator4.getMinReduction();
        double double12 = dormandPrince853Integrator4.getMinReduction();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2d + "'", double12 == 0.2d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        int int37 = dormandPrince853Integrator4.getOrder();
        double double38 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.Class<?> wildcardClass39 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 22.80350850198276d + "'", double38 == 22.80350850198276d);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMaxGrowth((double) 1.0f);
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        double double16 = dormandPrince853Integrator15.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator15.addSwitchingFunction(switchingFunction17, (double) (-1L), (double) (short) 100, (int) ' ');
        double double22 = dormandPrince853Integrator15.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator15.addSwitchingFunction(switchingFunction23, (double) (byte) 100, (double) 10, (int) (byte) 0);
        double double28 = dormandPrince853Integrator15.getMaxGrowth();
        dormandPrince853Integrator15.setInitialStepSize((double) (short) 100);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator15.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler31);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler31);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, 0.0d, (-1.0d), (-1.0d));
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        double[] doubleArray12 = new double[] { (-1.0d), 0L };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray12, doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray12, doubleArray20);
        double[] doubleArray23 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray12, doubleArray23);
        double[] doubleArray33 = new double[] { (-1.0d), 0L };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray33, doubleArray34);
        double[] doubleArray40 = null;
        double[] doubleArray45 = new double[] { (-1.0d), 0L };
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray45, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray40, doubleArray46);
        double[] doubleArray55 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray46, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray34, doubleArray46);
        double[] doubleArray64 = new double[] { (-1.0d), 0L };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray64, doubleArray65);
        double[] doubleArray71 = new double[] { (-1.0d), 0L };
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray64, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray34, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (short) 1, doubleArray23, doubleArray34);
        double[] doubleArray81 = new double[] { (-1.0d), 0L };
        double[] doubleArray82 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray81, doubleArray82);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 1, doubleArray34, doubleArray81);
        dormandPrince853Integrator84.setMinReduction((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        double[] doubleArray6 = null;
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray6, doubleArray12);
        double[] doubleArray21 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray12, doubleArray21);
        double[] doubleArray25 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray12, doubleArray25);
        dormandPrince853Integrator26.setInitialStepSize((double) (byte) 0);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator26.getStepHandler();
        double double30 = dormandPrince853Integrator26.getSafety();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.9d + "'", double30 == 0.9d);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        double[] doubleArray8 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        double[] doubleArray36 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray23, doubleArray36);
        double[] doubleArray44 = null;
        double[] doubleArray49 = new double[] { (-1.0d), 0L };
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray44, doubleArray50);
        double[] doubleArray59 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray50, doubleArray59);
        double[] doubleArray63 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray50, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray23, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray8, doubleArray63);
        double[] doubleArray67 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator(52.0d, (double) 8, doubleArray8, doubleArray67);
        java.lang.String str69 = dormandPrince853Integrator68.getName();
        double double70 = dormandPrince853Integrator68.getSafety();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str69, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.9d + "'", double70 == 0.9d);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        double double8 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setMinReduction((double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        double[] doubleArray6 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        double[] doubleArray34 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray21, doubleArray34);
        double[] doubleArray42 = null;
        double[] doubleArray47 = new double[] { (-1.0d), 0L };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray47, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray42, doubleArray48);
        double[] doubleArray57 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray48, doubleArray57);
        double[] doubleArray61 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray48, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray21, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray6, doubleArray61);
        dormandPrince853Integrator64.setMaxGrowth((double) 1L);
        double double67 = dormandPrince853Integrator64.getCurrentSignedStepsize();
        java.lang.Class<?> wildcardClass68 = dormandPrince853Integrator64.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations11 = null;
        double[] doubleArray21 = new double[] { (-1.0d), 0L };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray21, doubleArray22);
        double[] doubleArray28 = new double[] { (-1.0d), 0L };
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray28, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray21, doubleArray29);
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        double[] doubleArray43 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 0, doubleArray41, doubleArray43);
        double[] doubleArray51 = new double[] { (-1.0d), 0L };
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray51, doubleArray52);
        double[] doubleArray56 = null;
        double[] doubleArray61 = new double[] { (-1.0d), 0L };
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray56, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray51, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, 31.144823004794873d, doubleArray41, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', (double) (byte) 1, doubleArray21, doubleArray41);
        double[] doubleArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations11, 59.16079783099616d, doubleArray41, 1.4142135623730951d, doubleArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 22.80350850198276d, 97.0d, 100.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (-0.0d), (double) ' ', 0);
        double double10 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 22.80350850198276d + "'", double10 == 22.80350850198276d);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction14, (double) 1, (double) 0L, (int) 'a');
        double double19 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setMinReduction((double) 10.0f);
        double[] doubleArray26 = new double[] { (-1.0d), 0L };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray26, doubleArray27);
        double double29 = dormandPrince853Integrator28.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator28.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction31, (double) 0, (double) 10, (int) '4');
        double double36 = dormandPrince853Integrator28.getMinStep();
        double double37 = dormandPrince853Integrator28.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction38, (double) (-1L), (double) 8, (int) (byte) 100);
        double[] doubleArray45 = null;
        double[] doubleArray50 = new double[] { (-1.0d), 0L };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray50, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray45, doubleArray51);
        double[] doubleArray58 = new double[] { (-1.0d), 0L };
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray58, doubleArray59);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator60.getStepHandler();
        dormandPrince853Integrator53.setStepHandler(stepHandler61);
        dormandPrince853Integrator28.setStepHandler(stepHandler61);
        dormandPrince853Integrator10.setStepHandler(stepHandler61);
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator10.setInitialStepSize((double) 1L);
        dormandPrince853Integrator10.setSafety(0.2d);
        double double70 = dormandPrince853Integrator10.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertNotNull(stepHandler65);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray10, doubleArray21);
        double[] doubleArray31 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray21, doubleArray31);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double[] doubleArray46 = null;
        double[] doubleArray51 = new double[] { (-1.0d), 0L };
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray51, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray46, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray41, doubleArray52);
        double[] doubleArray58 = null;
        double[] doubleArray63 = null;
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray63, doubleArray69);
        double[] doubleArray78 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray69, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (-1L), doubleArray58, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, doubleArray41, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 22.80350850198276d, doubleArray21, doubleArray41);
        double double83 = dormandPrince853Integrator82.getMaxStep();
        double double84 = dormandPrince853Integrator82.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 22.80350850198276d + "'", double83 == 22.80350850198276d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.2d + "'", double84 == 0.2d);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) 10L, (double) 10.0f, (double) 1.0f);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray10, doubleArray21);
        double[] doubleArray31 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray21, doubleArray31);
        double[] doubleArray37 = null;
        double[] doubleArray42 = new double[] { (-1.0d), 0L };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray42, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray37, doubleArray43);
        double[] doubleArray52 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray43, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1), doubleArray21, doubleArray52);
        double double55 = dormandPrince853Integrator54.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction56 = null;
        dormandPrince853Integrator54.addSwitchingFunction(switchingFunction56, (double) 1, (double) 10, (int) '4');
        dormandPrince853Integrator54.setInitialStepSize(100.0d);
        double double63 = dormandPrince853Integrator54.getMinStep();
        double double64 = dormandPrince853Integrator54.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.2d + "'", double55 == 0.2d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str11 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 22.80350850198276d + "'", double9 == 22.80350850198276d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str11, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) ' ', (double) 0, (double) (byte) 100);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        dormandPrince853Integrator6.setMinReduction(Double.NaN);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction12, (double) (-1), 52.0d, (int) 'a');
        double double17 = dormandPrince853Integrator6.getCurrentStepStart();
        double double18 = dormandPrince853Integrator6.getMaxStep();
        double double19 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setSafety(0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray11, doubleArray23);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), 0L };
        double[] doubleArray49 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray48, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray41, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray11, doubleArray41);
        double[] doubleArray61 = new double[] { (-1.0d), 0L };
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray61, doubleArray62);
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray61, doubleArray69);
        double[] doubleArray72 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray61, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, 22.80350850198276d, doubleArray11, doubleArray72);
        double double75 = dormandPrince853Integrator74.getMinStep();
        double[] doubleArray78 = null;
        double[] doubleArray83 = new double[] { (-1.0d), 0L };
        double[] doubleArray84 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray83, doubleArray84);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator86 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray78, doubleArray84);
        dormandPrince853Integrator86.setMinReduction((double) (byte) 0);
        java.lang.String str89 = dormandPrince853Integrator86.getName();
        double double90 = dormandPrince853Integrator86.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction91 = null;
        dormandPrince853Integrator86.addSwitchingFunction(switchingFunction91, (double) 10.0f, (double) (short) 1, (int) 'a');
        org.apache.commons.math.ode.StepHandler stepHandler96 = dormandPrince853Integrator86.getStepHandler();
        dormandPrince853Integrator74.setStepHandler(stepHandler96);
        double double98 = dormandPrince853Integrator74.getMaxStep();
        int int99 = dormandPrince853Integrator74.getOrder();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str89, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler96);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 22.80350850198276d + "'", double98 == 22.80350850198276d);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 8 + "'", int99 == 8);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '#', (double) (byte) 10, (double) (byte) 10, (double) 10);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, 1.0d, 97.0d, (double) (-1L));
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        dormandPrince853Integrator10.setSafety((double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction22, (double) (short) 1, (double) 10, (int) '4');
        double double27 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        int int28 = dormandPrince853Integrator10.getOrder();
        double double29 = dormandPrince853Integrator10.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        dormandPrince853Integrator4.setSafety(10.0d);
        double double11 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(8.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 10);
        double double11 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 100, (double) 10.0f, (double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize(52.0d);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        double double28 = dormandPrince853Integrator20.getMaxGrowth();
        double double29 = dormandPrince853Integrator20.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.5298221281347035d, (double) 0, 31.622776601683793d, 31.622776601683793d);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray11, doubleArray23);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0d), 0L };
        double[] doubleArray49 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray48, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray41, doubleArray49);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray11, doubleArray41);
        double[] doubleArray61 = new double[] { (-1.0d), 0L };
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray61, doubleArray62);
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray61, doubleArray69);
        double[] doubleArray72 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray61, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100.0f, 22.80350850198276d, doubleArray11, doubleArray72);
        double double75 = dormandPrince853Integrator74.getMinStep();
        double double76 = dormandPrince853Integrator74.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler77 = dormandPrince853Integrator74.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.2d + "'", double76 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler77);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMinReduction((double) 10.0f);
        double double17 = dormandPrince853Integrator6.getCurrentStepStart();
        double double18 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setSafety((double) 0.0f);
        double double22 = dormandPrince853Integrator6.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction23, (double) 10.0f, (double) 100L, (int) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 31.622776601683793d + "'", double18 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 31.622776601683793d + "'", double19 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator56.getStepHandler();
        double double58 = dormandPrince853Integrator56.getCurrentSignedStepsize();
        double double59 = dormandPrince853Integrator56.getMinReduction();
        java.lang.String str60 = dormandPrince853Integrator56.getName();
        double double61 = dormandPrince853Integrator56.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.2d + "'", double59 == 0.2d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str60, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray9, doubleArray21);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double[] doubleArray46 = null;
        double[] doubleArray51 = new double[] { (-1.0d), 0L };
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray51, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray46, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray41, doubleArray52);
        double[] doubleArray58 = null;
        double[] doubleArray63 = null;
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray63, doubleArray69);
        double[] doubleArray78 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray69, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (-1L), doubleArray58, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, doubleArray41, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, 0.0d, doubleArray9, doubleArray69);
        int int83 = dormandPrince853Integrator82.getOrder();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), (double) ' ', (double) '#', 2.5298221281347035d);
        dormandPrince853Integrator4.setSafety((double) 1);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, 0.0d, (double) (byte) 10, (double) (-1.0f));
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        double[] doubleArray29 = null;
        double[] doubleArray34 = new double[] { (-1.0d), 0L };
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray29, doubleArray35);
        double[] doubleArray44 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray35, doubleArray44);
        dormandPrince853Integrator45.setMaxGrowth((double) (byte) 10);
        double double48 = dormandPrince853Integrator45.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler49);
        int int51 = dormandPrince853Integrator20.getOrder();
        double[] doubleArray56 = new double[] { (-1.0d), 0L };
        double[] doubleArray57 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray56, doubleArray57);
        double double59 = dormandPrince853Integrator58.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator58.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction61 = null;
        dormandPrince853Integrator58.addSwitchingFunction(switchingFunction61, (double) 0, (double) 10, (int) '4');
        double double66 = dormandPrince853Integrator58.getCurrentSignedStepsize();
        dormandPrince853Integrator58.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator58.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler69);
        double double71 = dormandPrince853Integrator20.getMaxStep();
        dormandPrince853Integrator20.setInitialStepSize(32.0d);
        double double74 = dormandPrince853Integrator20.getCurrentStepStart();
        double double75 = dormandPrince853Integrator20.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 31.622776601683793d + "'", double66 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1.0d) + "'", double71 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator4.setInitialStepSize(0.2d);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) '#', (double) (-1.0f), (int) '4');
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((-1.0d));
        double double8 = dormandPrince853Integrator4.getMinReduction();
        int int9 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        int int20 = dormandPrince853Integrator10.getOrder();
        dormandPrince853Integrator10.setMaxGrowth(10.0d);
        dormandPrince853Integrator10.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction25, (double) (short) 1, 100.0d, 8);
        int int30 = dormandPrince853Integrator10.getOrder();
        java.lang.Class<?> wildcardClass31 = dormandPrince853Integrator10.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 0.0f, (double) (byte) -1, (-1));
        int int13 = dormandPrince853Integrator4.getOrder();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler15);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction14, (double) 1, (double) 0L, (int) 'a');
        double double19 = dormandPrince853Integrator10.getMaxStep();
        double double20 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setSafety((-1.0d));
        dormandPrince853Integrator10.setMinReduction((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction8, (double) 0L, (double) 100L, (int) '#');
        java.lang.String str13 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setInitialStepSize(32.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray11, doubleArray23);
        double[] doubleArray37 = null;
        double[] doubleArray42 = new double[] { (-1.0d), 0L };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray42, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray37, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', doubleArray23, doubleArray43);
        double[] doubleArray47 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), (double) (byte) 0, doubleArray43, doubleArray47);
        double double49 = dormandPrince853Integrator48.getCurrentSignedStepsize();
        double double50 = dormandPrince853Integrator48.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-0.0d) + "'", double49 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.0d) + "'", double50 == (-0.0d));
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, 100.0d, (double) 0L, (double) 0);
        dormandPrince853Integrator4.setMinReduction((-0.0d));
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        dormandPrince853Integrator6.setSafety((double) (short) 0);
        double double16 = dormandPrince853Integrator6.getCurrentStepStart();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator6.getName();
        double double16 = dormandPrince853Integrator6.getCurrentStepStart();
        double double17 = dormandPrince853Integrator6.getMinStep();
        double double18 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setSafety((double) 0.0f);
        double double11 = dormandPrince853Integrator4.getMinStep();
        double double12 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (byte) 1, 52.0d, (int) (byte) 1);
        java.lang.String str18 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        double double57 = dormandPrince853Integrator56.getMinStep();
        dormandPrince853Integrator56.setMaxGrowth((double) (byte) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator64.getStepHandler();
        dormandPrince853Integrator56.setStepHandler(stepHandler65);
        double double67 = dormandPrince853Integrator56.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(stepHandler65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.2d + "'", double67 == 0.2d);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction14, (double) 1, (double) 0L, (int) 'a');
        double double19 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        dormandPrince853Integrator10.setSafety((-1.0d));
        int int22 = dormandPrince853Integrator10.getOrder();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        double double8 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator6.getStepHandler();
        double double10 = dormandPrince853Integrator6.getMinStep();
        double double11 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setSafety(59.16079783099616d);
        dormandPrince853Integrator6.setInitialStepSize(0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) (-1.0f), (double) 1, 0.9d);
        dormandPrince853Integrator12.setMinReduction((double) 10L);
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        double double22 = dormandPrince853Integrator21.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler23);
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double double26 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) (byte) 10, 100.0d, (double) (short) 10);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety(31.622776601683793d);
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) 'a');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 8, (double) 0, (double) (byte) 10);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator4.setInitialStepSize(0.2d);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMaxGrowth((double) (-1));
        dormandPrince853Integrator10.setMaxGrowth((double) (-1L));
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        dormandPrince853Integrator10.setMaxGrowth(6.841052550594828d);
        java.lang.String str21 = dormandPrince853Integrator10.getName();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray13 = null;
        double[] doubleArray18 = new double[] { (-1.0d), 0L };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray13, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray8, doubleArray19);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray32, doubleArray44);
        double[] doubleArray62 = new double[] { (-1.0d), 0L };
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray62, doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray62, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray32, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) 10L, doubleArray8, doubleArray32);
        double double75 = dormandPrince853Integrator74.getCurrentStepStart();
        double double76 = dormandPrince853Integrator74.getMinReduction();
        java.lang.Class<?> wildcardClass77 = dormandPrince853Integrator74.getClass();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.2d + "'", double76 == 0.2d);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction10, (double) (byte) 100, 31.622776601683793d, 100);
        dormandPrince853Integrator6.setInitialStepSize((double) 100);
        double double17 = dormandPrince853Integrator6.getCurrentStepStart();
        double double18 = dormandPrince853Integrator6.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMinReduction((double) ' ');
        dormandPrince853Integrator10.setMaxGrowth((double) ' ');
        double[] doubleArray21 = new double[] { (-1.0d), 0L };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray21, doubleArray22);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler24);
        dormandPrince853Integrator10.setMinReduction(1.0d);
        double double28 = dormandPrince853Integrator10.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, 0.0d, (double) 10L, (double) (short) 1);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 10);
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        dormandPrince853Integrator20.setInitialStepSize(97.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray11 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 0, doubleArray9, doubleArray11);
        double[] doubleArray23 = new double[] { (-1.0d), 0L };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray23, doubleArray24);
        double[] doubleArray28 = null;
        double[] doubleArray33 = new double[] { (-1.0d), 0L };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray33, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray28, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray23, doubleArray34);
        double[] doubleArray44 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray34, doubleArray44);
        double[] doubleArray50 = null;
        double[] doubleArray55 = new double[] { (-1.0d), 0L };
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray55, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray50, doubleArray56);
        double[] doubleArray65 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray56, doubleArray65);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1), doubleArray34, doubleArray65);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 0.0d, doubleArray11, doubleArray65);
        double double69 = dormandPrince853Integrator68.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler20);
        double double22 = dormandPrince853Integrator10.getSafety();
        double double23 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setMinReduction(35.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction26, (double) (-1L), (double) 1.0f, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler31 = dormandPrince853Integrator10.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler31);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        int int44 = dormandPrince853Integrator4.getOrder();
        double double45 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double46 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str47 = dormandPrince853Integrator4.getName();
        int int48 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 22.80350850198276d + "'", double45 == 22.80350850198276d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(35.0d, (double) 0, (double) ' ', (double) 0);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 0, (double) 100.0f, 0);
        double double20 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) (-1));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double16 = dormandPrince853Integrator15.getSafety();
        int int17 = dormandPrince853Integrator15.getOrder();
        dormandPrince853Integrator15.setMaxGrowth((double) 100L);
        dormandPrince853Integrator15.setMaxGrowth((double) 10L);
        double[] doubleArray26 = null;
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray26, doubleArray32);
        double[] doubleArray41 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray32, doubleArray41);
        dormandPrince853Integrator42.setMaxGrowth((double) (byte) 10);
        double double45 = dormandPrince853Integrator42.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler46);
        dormandPrince853Integrator6.setStepHandler(stepHandler46);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction49 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction49, (double) ' ', (double) 1.0f, (int) 'a');
        double double54 = dormandPrince853Integrator6.getMaxGrowth();
        double double55 = dormandPrince853Integrator6.getSafety();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.9d + "'", double55 == 0.9d);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        java.lang.String str14 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setSafety((double) (byte) 0);
        double double17 = dormandPrince853Integrator6.getSafety();
        dormandPrince853Integrator6.setMinReduction((double) (short) 10);
        double double20 = dormandPrince853Integrator6.getSafety();
        java.lang.String str21 = dormandPrince853Integrator6.getName();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        dormandPrince853Integrator4.setMaxGrowth(1.0d);
        dormandPrince853Integrator4.setInitialStepSize(97.0d);
        double double48 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 10L, 0.0d, 10.0d);
        double double54 = dormandPrince853Integrator53.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator53.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler55);
        double double57 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        double double44 = dormandPrince853Integrator4.getCurrentStepStart();
        double double45 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.9d + "'", double45 == 0.9d);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, 22.80350850198276d, 0.9d, 22.80350850198276d);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, (double) (short) -1, 0.0d, 0.0d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        double[] doubleArray29 = null;
        double[] doubleArray34 = new double[] { (-1.0d), 0L };
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray29, doubleArray35);
        double[] doubleArray44 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray35, doubleArray44);
        dormandPrince853Integrator45.setMaxGrowth((double) (byte) 10);
        double double48 = dormandPrince853Integrator45.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler49);
        dormandPrince853Integrator20.setMaxGrowth(100.0d);
        dormandPrince853Integrator20.setSafety(0.2d);
        double double55 = dormandPrince853Integrator20.getSafety();
        dormandPrince853Integrator20.setMaxGrowth(35.0d);
        double double58 = dormandPrince853Integrator20.getMaxGrowth();
        double double59 = dormandPrince853Integrator20.getMinReduction();
        java.lang.Class<?> wildcardClass60 = dormandPrince853Integrator20.getClass();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.2d + "'", double55 == 0.2d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.2d + "'", double59 == 0.2d);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator6.getStepHandler();
        double double20 = dormandPrince853Integrator6.getSafety();
        double double21 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setMinReduction((double) 1L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        dormandPrince853Integrator6.setMinReduction(Double.NaN);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction12, (double) (-1), 52.0d, (int) 'a');
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator6.getStepHandler();
        double double18 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setMinReduction(0.0d);
        double double21 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 31.622776601683793d + "'", double21 == 31.622776601683793d);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray29 = new double[] { (-1.0d), 0L };
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray29, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) ' ', doubleArray14, doubleArray30);
        double[] doubleArray33 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) '#', doubleArray14, doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction8, (double) (-1L), (double) (short) 100, (int) ' ');
        double double13 = dormandPrince853Integrator6.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction14, (double) (byte) 100, (double) 10, (int) (byte) 0);
        int int19 = dormandPrince853Integrator6.getOrder();
        double double20 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator4.setInitialStepSize(0.2d);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        double double11 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMinReduction((double) 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        double double57 = dormandPrince853Integrator56.getMinStep();
        dormandPrince853Integrator56.setMaxGrowth((double) (byte) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator64.getStepHandler();
        dormandPrince853Integrator56.setStepHandler(stepHandler65);
        double double67 = dormandPrince853Integrator56.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(stepHandler65);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, 52.0d, (double) 100L, (double) 0L);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        double[] doubleArray2 = null;
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        double[] doubleArray18 = null;
        double[] doubleArray23 = new double[] { (-1.0d), 0L };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray18, doubleArray24);
        double[] doubleArray33 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray24, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray12, doubleArray24);
        double[] doubleArray42 = new double[] { (-1.0d), 0L };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray42, doubleArray43);
        double[] doubleArray49 = new double[] { (-1.0d), 0L };
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray42, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray12, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', (double) (short) 100, doubleArray2, doubleArray12);
        double double55 = dormandPrince853Integrator54.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction56 = null;
        dormandPrince853Integrator54.addSwitchingFunction(switchingFunction56, (double) '#', (double) ' ', (int) (short) 100);
        java.lang.String str61 = dormandPrince853Integrator54.getName();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str61, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction15, 0.9d, 100.0d, (int) '#');
        double double20 = dormandPrince853Integrator6.getMinStep();
        double double21 = dormandPrince853Integrator6.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getMaxGrowth();
        dormandPrince853Integrator10.setMaxGrowth((double) (short) 1);
        dormandPrince853Integrator10.setMaxGrowth((double) ' ');
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        double double28 = dormandPrince853Integrator20.getMaxGrowth();
        java.lang.String str29 = dormandPrince853Integrator20.getName();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(1.0d);
        double double10 = dormandPrince853Integrator6.getMaxGrowth();
        double double11 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setSafety((double) (-1L));
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        double[] doubleArray29 = null;
        double[] doubleArray34 = new double[] { (-1.0d), 0L };
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray29, doubleArray35);
        double[] doubleArray44 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray35, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray23, doubleArray35);
        double[] doubleArray53 = new double[] { (-1.0d), 0L };
        double[] doubleArray54 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray53, doubleArray54);
        double[] doubleArray60 = new double[] { (-1.0d), 0L };
        double[] doubleArray61 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray60, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray53, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray23, doubleArray53);
        double double65 = dormandPrince853Integrator64.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler66 = dormandPrince853Integrator64.getStepHandler();
        double double67 = dormandPrince853Integrator64.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler68 = dormandPrince853Integrator64.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler68);
        dormandPrince853Integrator6.setInitialStepSize((double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 31.622776601683793d + "'", double11 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.2d + "'", double65 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.9d + "'", double67 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler68);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        double double12 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(31.144823004794873d, (double) 10.0f, 100.0d, 18.708286933869708d);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 17.647895909936366d + "'", double6 == 17.647895909936366d);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        dormandPrince853Integrator4.setMaxGrowth(1.0d);
        dormandPrince853Integrator4.setInitialStepSize(97.0d);
        dormandPrince853Integrator4.setMinReduction((double) (-1.0f));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double55 = dormandPrince853Integrator54.getCurrentSignedStepsize();
        dormandPrince853Integrator54.setInitialStepSize(1.0d);
        org.apache.commons.math.ode.StepHandler stepHandler58 = dormandPrince853Integrator54.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler58);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler58);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray17 = new double[] { (-1.0d), 0L };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray10, doubleArray18);
        double[] doubleArray21 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray10, doubleArray21);
        double[] doubleArray29 = new double[] { (-1.0d), 0L };
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray29, doubleArray30);
        double[] doubleArray36 = null;
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray36, doubleArray42);
        double[] doubleArray51 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray42, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray30, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), (double) 1, doubleArray10, doubleArray42);
        double double55 = dormandPrince853Integrator54.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.0d) + "'", double55 == (-0.0d));
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (-1.0d), (double) (short) -1, (double) (short) 10);
        double[] doubleArray7 = null;
        double[] doubleArray12 = new double[] { (-1.0d), 0L };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray12, doubleArray13);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray7, doubleArray13);
        dormandPrince853Integrator15.setMinReduction((double) (byte) 0);
        java.lang.String str18 = dormandPrince853Integrator15.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double28 = dormandPrince853Integrator4.getMinReduction();
        double double29 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setInitialStepSize((double) (-1L));
        double double33 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations34 = null;
        double[] doubleArray44 = new double[] { (-1.0d), 0L };
        double[] doubleArray45 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray44, doubleArray45);
        double[] doubleArray49 = null;
        double[] doubleArray54 = new double[] { (-1.0d), 0L };
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray49, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray44, doubleArray55);
        double[] doubleArray65 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray55, doubleArray65);
        double[] doubleArray76 = new double[] { (-1.0d), 0L };
        double[] doubleArray77 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray76, doubleArray77);
        double[] doubleArray81 = null;
        double[] doubleArray86 = new double[] { (-1.0d), 0L };
        double[] doubleArray87 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray86, doubleArray87);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray81, doubleArray87);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray76, doubleArray87);
        double[] doubleArray97 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator98 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray87, doubleArray97);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations34, (double) 1.0f, doubleArray65, 100.0d, doubleArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.2d + "'", double28 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.2d + "'", double33 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[]");
        org.junit.Assert.assertNotNull(doubleArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray97), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction16, 0.0d, (double) ' ', (int) (byte) -1);
        dormandPrince853Integrator10.setMaxGrowth((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        double[] doubleArray6 = null;
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray6, doubleArray12);
        double[] doubleArray21 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray12, doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), 0L };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray27, doubleArray28);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) ' ', doubleArray12, doubleArray28);
        dormandPrince853Integrator30.setInitialStepSize((-0.0d));
        double double33 = dormandPrince853Integrator30.getSafety();
        int int34 = dormandPrince853Integrator30.getOrder();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMinReduction((double) ' ');
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        double double16 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMaxGrowth((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        double[] doubleArray18 = null;
        double[] doubleArray23 = new double[] { (-1.0d), 0L };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray18, doubleArray24);
        dormandPrince853Integrator26.setMinReduction((double) (byte) 0);
        java.lang.String str29 = dormandPrince853Integrator26.getName();
        double double30 = dormandPrince853Integrator26.getMaxStep();
        double double31 = dormandPrince853Integrator26.getMinStep();
        double double32 = dormandPrince853Integrator26.getSafety();
        double double33 = dormandPrince853Integrator26.getMinReduction();
        int int34 = dormandPrince853Integrator26.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler35);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str29, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9d + "'", double32 == 0.9d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 10, (double) 100L, (double) (-1.0f));
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        double double12 = dormandPrince853Integrator11.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator11.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator11.addSwitchingFunction(switchingFunction14, (double) 0, (double) 10, (int) '4');
        double double19 = dormandPrince853Integrator11.getMinStep();
        double double20 = dormandPrince853Integrator11.getMaxStep();
        java.lang.String str21 = dormandPrince853Integrator11.getName();
        double double22 = dormandPrince853Integrator11.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        java.lang.Class<?> wildcardClass25 = stepHandler23.getClass();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getMaxGrowth();
        int int16 = dormandPrince853Integrator10.getOrder();
        double double17 = dormandPrince853Integrator10.getMaxGrowth();
        double double18 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        int int19 = dormandPrince853Integrator10.getOrder();
        double double20 = dormandPrince853Integrator10.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 10.0f, (double) 100.0f, (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getMinStep();
        double[] doubleArray14 = null;
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray14, doubleArray20);
        double[] doubleArray29 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray20, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator35.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator35.getStepHandler();
        dormandPrince853Integrator30.setStepHandler(stepHandler37);
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        double double40 = dormandPrince853Integrator4.getMinStep();
        double double41 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.2d + "'", double41 == 0.2d);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        dormandPrince853Integrator10.setSafety((double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction22, (double) (short) 1, (double) 10, (int) '4');
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator33.getStepHandler();
        double double35 = dormandPrince853Integrator33.getMaxStep();
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        dormandPrince853Integrator46.setMinReduction((double) (byte) 0);
        java.lang.String str49 = dormandPrince853Integrator46.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator54.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler56 = dormandPrince853Integrator54.getStepHandler();
        dormandPrince853Integrator46.setStepHandler(stepHandler56);
        dormandPrince853Integrator33.setStepHandler(stepHandler56);
        int int59 = dormandPrince853Integrator33.getOrder();
        double double60 = dormandPrince853Integrator33.getCurrentStepStart();
        double double61 = dormandPrince853Integrator33.getMinStep();
        dormandPrince853Integrator33.setMaxGrowth((double) '4');
        double double64 = dormandPrince853Integrator33.getMinStep();
        int int65 = dormandPrince853Integrator33.getOrder();
        double double66 = dormandPrince853Integrator33.getCurrentStepStart();
        double double67 = dormandPrince853Integrator33.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double73 = dormandPrince853Integrator72.getMinReduction();
        double double74 = dormandPrince853Integrator72.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction75 = null;
        dormandPrince853Integrator72.addSwitchingFunction(switchingFunction75, (double) (byte) 100, (double) 0.0f, (int) '#');
        dormandPrince853Integrator72.setSafety((double) 10L);
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator72.getStepHandler();
        dormandPrince853Integrator33.setStepHandler(stepHandler82);
        dormandPrince853Integrator10.setStepHandler(stepHandler82);
        double double85 = dormandPrince853Integrator10.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler55);
        org.junit.Assert.assertNotNull(stepHandler56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.2d + "'", double73 == 0.2d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.9d + "'", double74 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler12 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler12);
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double20 = dormandPrince853Integrator19.getMinReduction();
        int int21 = dormandPrince853Integrator19.getOrder();
        dormandPrince853Integrator19.setMaxGrowth((double) 100);
        double double24 = dormandPrince853Integrator19.getCurrentSignedStepsize();
        dormandPrince853Integrator19.setMaxGrowth((double) 10);
        double[] doubleArray31 = null;
        double[] doubleArray36 = new double[] { (-1.0d), 0L };
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray36, doubleArray37);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray31, doubleArray37);
        double[] doubleArray46 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray37, doubleArray46);
        dormandPrince853Integrator47.setMaxGrowth((double) (byte) 10);
        double double50 = dormandPrince853Integrator47.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler51 = dormandPrince853Integrator47.getStepHandler();
        double[] doubleArray56 = null;
        double[] doubleArray61 = new double[] { (-1.0d), 0L };
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray56, doubleArray62);
        double[] doubleArray71 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray62, doubleArray71);
        dormandPrince853Integrator72.setMaxGrowth((double) (byte) 10);
        double double75 = dormandPrince853Integrator72.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler76 = dormandPrince853Integrator72.getStepHandler();
        dormandPrince853Integrator47.setStepHandler(stepHandler76);
        dormandPrince853Integrator47.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler80 = dormandPrince853Integrator47.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler80);
        dormandPrince853Integrator4.setStepHandler(stepHandler80);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler51);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 10.0d + "'", double75 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler76);
        org.junit.Assert.assertNotNull(stepHandler80);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray11, doubleArray23);
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        double[] doubleArray50 = new double[] { (-1.0d), 0L };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray50, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray43, doubleArray51);
        double[] doubleArray54 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray43, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(8.0d, 1.0d, doubleArray23, doubleArray43);
        double[] doubleArray57 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 'a', (double) 10L, doubleArray43, doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        double double15 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        double double41 = dormandPrince853Integrator4.getMaxStep();
        double[] doubleArray46 = new double[] { (-1.0d), 0L };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray46, doubleArray47);
        double double49 = dormandPrince853Integrator48.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator48.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler50);
        double double52 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction53 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction53, (double) 0.0f, 0.0d, (int) (byte) -1);
        double double58 = dormandPrince853Integrator4.getSafety();
        double double59 = dormandPrince853Integrator4.getSafety();
        java.lang.Class<?> wildcardClass60 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(stepHandler50);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) 10L, 0.0d, 10.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, (double) (byte) 100, (double) 0.0f, (int) '#');
        double double10 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 10.0f, (double) (short) 1, (int) 'a');
        dormandPrince853Integrator10.setSafety(0.0d);
        double double22 = dormandPrince853Integrator10.getMaxGrowth();
        double double23 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, 6.841052550594828d, Double.NaN, (double) 'a');
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        double double10 = dormandPrince853Integrator6.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator6.getStepHandler();
        double double12 = dormandPrince853Integrator6.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMinReduction((double) ' ');
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        double double16 = dormandPrince853Integrator10.getMaxStep();
        double double17 = dormandPrince853Integrator10.getMinReduction();
        double double18 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        dormandPrince853Integrator10.setMinReduction((double) (-1));
        double double21 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setInitialStepSize((double) '#');
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) (byte) -1);
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 22.80350850198276d + "'", double9 == 22.80350850198276d);
        org.junit.Assert.assertNotNull(stepHandler10);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        int int20 = dormandPrince853Integrator10.getOrder();
        dormandPrince853Integrator10.setInitialStepSize(100.0d);
        dormandPrince853Integrator10.setMaxGrowth((double) 1L);
        double double25 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        dormandPrince853Integrator10.setSafety((double) (short) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction28, 0.0d, (double) (short) 10, (int) '4');
        dormandPrince853Integrator10.setInitialStepSize(97.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinReduction();
        double double15 = dormandPrince853Integrator6.getMinReduction();
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator22.getStepHandler();
        double double24 = dormandPrince853Integrator22.getMaxStep();
        double[] doubleArray27 = null;
        double[] doubleArray32 = new double[] { (-1.0d), 0L };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray32, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray27, doubleArray33);
        dormandPrince853Integrator35.setMinReduction((double) (byte) 0);
        java.lang.String str38 = dormandPrince853Integrator35.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator43.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator35.setStepHandler(stepHandler45);
        dormandPrince853Integrator22.setStepHandler(stepHandler45);
        dormandPrince853Integrator6.setStepHandler(stepHandler45);
        java.lang.String str49 = dormandPrince853Integrator6.getName();
        double double50 = dormandPrince853Integrator6.getMinReduction();
        double double51 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.2d + "'", double50 == 0.2d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 10.0d, (double) 100.0f, (double) 10.0f);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 0.0f);
        int int8 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray9, doubleArray21);
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), 0L };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray39, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray9, doubleArray39);
        double double51 = dormandPrince853Integrator50.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator50.getStepHandler();
        dormandPrince853Integrator50.setSafety((double) (byte) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction55 = null;
        dormandPrince853Integrator50.addSwitchingFunction(switchingFunction55, (double) (short) 100, 2.5298221281347035d, (int) ' ');
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.2d + "'", double51 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler52);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        double[] doubleArray6 = new double[] { (-1.0d), 0L };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray6, doubleArray14);
        double double17 = dormandPrince853Integrator16.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 22.80350850198276d + "'", double17 == 22.80350850198276d);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        dormandPrince853Integrator56.setInitialStepSize((double) 0.0f);
        double double59 = dormandPrince853Integrator56.getMaxGrowth();
        double double60 = dormandPrince853Integrator56.getCurrentSignedStepsize();
        double[] doubleArray65 = new double[] { (-1.0d), 0L };
        double[] doubleArray66 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray65, doubleArray66);
        double double68 = dormandPrince853Integrator67.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler69 = dormandPrince853Integrator67.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction70 = null;
        dormandPrince853Integrator67.addSwitchingFunction(switchingFunction70, (double) 0, (double) 10, (int) '4');
        double double75 = dormandPrince853Integrator67.getCurrentSignedStepsize();
        dormandPrince853Integrator67.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler78 = dormandPrince853Integrator67.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler79 = dormandPrince853Integrator67.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler80 = dormandPrince853Integrator67.getStepHandler();
        dormandPrince853Integrator56.setStepHandler(stepHandler80);
        java.lang.String str82 = dormandPrince853Integrator56.getName();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(stepHandler69);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 31.622776601683793d + "'", double75 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler78);
        org.junit.Assert.assertNotNull(stepHandler79);
        org.junit.Assert.assertNotNull(stepHandler80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str82, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        dormandPrince853Integrator6.setSafety((double) (-1.0f));
        java.lang.String str20 = dormandPrince853Integrator6.getName();
        java.lang.Class<?> wildcardClass21 = dormandPrince853Integrator6.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        double[] doubleArray18 = null;
        double[] doubleArray23 = new double[] { (-1.0d), 0L };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray23, doubleArray24);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray18, doubleArray24);
        double[] doubleArray33 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray24, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray12, doubleArray24);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', doubleArray24, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 31.622776601683793d, doubleArray2, doubleArray24);
        dormandPrince853Integrator48.setInitialStepSize((double) (byte) 0);
        java.lang.String str51 = dormandPrince853Integrator48.getName();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction41, (double) 100, 0.0d, (int) (byte) 0);
        dormandPrince853Integrator4.setSafety((double) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        double double18 = dormandPrince853Integrator6.getSafety();
        dormandPrince853Integrator6.setMaxGrowth((double) 100);
        dormandPrince853Integrator6.setInitialStepSize((double) 8);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        dormandPrince853Integrator6.setSafety((double) (-1.0f));
        double[] doubleArray24 = new double[] { (-1.0d), 0L };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray24, doubleArray25);
        double double27 = dormandPrince853Integrator26.getCurrentStepStart();
        double double28 = dormandPrince853Integrator26.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        double double31 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setMinReduction(17.647895909936366d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.2d + "'", double31 == 0.2d);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler20);
        double double22 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setInitialStepSize((double) 0);
        double double25 = dormandPrince853Integrator10.getMinStep();
        int int26 = dormandPrince853Integrator10.getOrder();
        double double27 = dormandPrince853Integrator10.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) (short) 100);
        dormandPrince853Integrator20.setMinReduction((double) '#');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 52.0d, (double) (byte) -1, (int) (short) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction33, (double) (short) 100, (double) (byte) 100, 0);
        double double38 = dormandPrince853Integrator20.getMinReduction();
        int int39 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setInitialStepSize((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator4.setInitialStepSize(0.2d);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) -1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 10.0d, 17.647895909936366d, (double) (-1L));
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, 100.0d, (double) (short) 0, (int) ' ');
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMinReduction((double) 10.0f);
        double double17 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 31.622776601683793d + "'", double17 == 31.622776601683793d);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMaxStep();
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        double double9 = dormandPrince853Integrator4.getMinReduction();
        double double10 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double double44 = dormandPrince853Integrator43.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator43.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction46, (double) 0, (double) 10, (int) '4');
        double double51 = dormandPrince853Integrator43.getMinReduction();
        double double52 = dormandPrince853Integrator43.getMinReduction();
        double[] doubleArray57 = new double[] { (-1.0d), 0L };
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray57, doubleArray58);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator59.getStepHandler();
        double double61 = dormandPrince853Integrator59.getMaxStep();
        double[] doubleArray64 = null;
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray64, doubleArray70);
        dormandPrince853Integrator72.setMinReduction((double) (byte) 0);
        java.lang.String str75 = dormandPrince853Integrator72.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler81 = dormandPrince853Integrator80.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator80.getStepHandler();
        dormandPrince853Integrator72.setStepHandler(stepHandler82);
        dormandPrince853Integrator59.setStepHandler(stepHandler82);
        dormandPrince853Integrator43.setStepHandler(stepHandler82);
        dormandPrince853Integrator4.setStepHandler(stepHandler82);
        double double87 = dormandPrince853Integrator4.getMaxGrowth();
        double double88 = dormandPrince853Integrator4.getCurrentStepStart();
        double double89 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.2d + "'", double51 == 0.2d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.2d + "'", double52 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler81);
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 10.0d + "'", double87 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.0d + "'", double89 == 10.0d);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        dormandPrince853Integrator4.setMinReduction((double) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', 1.0d, (double) (-1.0f));
        dormandPrince853Integrator4.setInitialStepSize((double) 10L);
        double double7 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double double14 = dormandPrince853Integrator12.getCurrentStepStart();
        int int15 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler16);
        dormandPrince853Integrator4.setMaxGrowth((double) '4');
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator21.getStepHandler();
        double double23 = dormandPrince853Integrator21.getMaxStep();
        double[] doubleArray26 = null;
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray26, doubleArray32);
        dormandPrince853Integrator34.setMinReduction((double) (byte) 0);
        java.lang.String str37 = dormandPrince853Integrator34.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator42.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator34.setStepHandler(stepHandler44);
        dormandPrince853Integrator21.setStepHandler(stepHandler44);
        dormandPrince853Integrator6.setStepHandler(stepHandler44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        dormandPrince853Integrator52.setInitialStepSize(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator52.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler56 = dormandPrince853Integrator52.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler56);
        double double58 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertNotNull(stepHandler55);
        org.junit.Assert.assertNotNull(stepHandler56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setMaxGrowth(0.9d);
        double double17 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        dormandPrince853Integrator4.setMaxGrowth(22.80350850198276d);
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler13 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler13);
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        double double16 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator6.getStepHandler();
        double double19 = dormandPrince853Integrator6.getMaxStep();
        double double20 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 31.622776601683793d + "'", double20 == 31.622776601683793d);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        double double7 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) 10, (double) (short) -1, (double) 100L);
        dormandPrince853Integrator4.setInitialStepSize(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler7);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        dormandPrince853Integrator4.setMinReduction(52.0d);
        int int7 = dormandPrince853Integrator4.getOrder();
        int int8 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) (-1.0f), (double) 1, 0.9d);
        dormandPrince853Integrator12.setMinReduction((double) 10L);
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        double double22 = dormandPrince853Integrator21.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator21.getStepHandler();
        dormandPrince853Integrator12.setStepHandler(stepHandler23);
        dormandPrince853Integrator4.setStepHandler(stepHandler23);
        double[] doubleArray28 = null;
        double[] doubleArray33 = new double[] { (-1.0d), 0L };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray33, doubleArray34);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray28, doubleArray34);
        dormandPrince853Integrator36.setMinReduction((double) 100);
        double double39 = dormandPrince853Integrator36.getSafety();
        dormandPrince853Integrator36.setMaxGrowth((double) (-1));
        org.apache.commons.math.ode.StepHandler stepHandler42 = dormandPrince853Integrator36.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler49 = dormandPrince853Integrator48.getStepHandler();
        double double50 = dormandPrince853Integrator48.getCurrentStepStart();
        java.lang.String str51 = dormandPrince853Integrator48.getName();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator48.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler52);
        double double54 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.9d + "'", double39 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler42);
        org.junit.Assert.assertNotNull(stepHandler49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str51, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 52.0d + "'", double54 == 52.0d);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction(52.0d);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        dormandPrince853Integrator23.setMinReduction((double) (byte) 0);
        java.lang.String str26 = dormandPrince853Integrator23.getName();
        double double27 = dormandPrince853Integrator23.getMaxStep();
        double double28 = dormandPrince853Integrator23.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction29, (double) (byte) 1, (double) 1L, 100);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator59.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator54.setStepHandler(stepHandler61);
        dormandPrince853Integrator23.setStepHandler(stepHandler61);
        dormandPrince853Integrator4.setStepHandler(stepHandler61);
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction66 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction66, (double) 1L, 31.144823004794873d, (int) (byte) 100);
        dormandPrince853Integrator4.setInitialStepSize(100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertNotNull(stepHandler65);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) 1L, (-1.0d), (int) (byte) 1);
        double double15 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety(1.0d);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        dormandPrince853Integrator6.setSafety((double) (-1.0f));
        java.lang.String str20 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setInitialStepSize(0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), 47.753019278348006d, 18.708286933869708d, 31.622776601683793d);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getMaxGrowth();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        java.lang.Class<?> wildcardClass16 = dormandPrince853Integrator10.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator4.setInitialStepSize(0.2d);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        double double13 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setMaxGrowth((double) (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        double double9 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        dormandPrince853Integrator6.setInitialStepSize((double) 10L);
        double double18 = dormandPrince853Integrator6.getSafety();
        double double19 = dormandPrince853Integrator6.getMaxStep();
        dormandPrince853Integrator6.setInitialStepSize((double) 0.0f);
        dormandPrince853Integrator6.setSafety((double) 1.0f);
        dormandPrince853Integrator6.setMaxGrowth((double) (byte) -1);
        dormandPrince853Integrator6.setInitialStepSize((double) 8);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        double double15 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction16, (double) (byte) 100, (double) 100, 0);
        dormandPrince853Integrator10.setMinReduction(52.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        double[] doubleArray12 = new double[] { (-1.0d), 0L };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray12, doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray12, doubleArray20);
        double[] doubleArray23 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray12, doubleArray23);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray32, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), (double) 1, doubleArray12, doubleArray44);
        double[] doubleArray63 = new double[] { (-1.0d), 0L };
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray63, doubleArray64);
        double[] doubleArray68 = null;
        double[] doubleArray73 = new double[] { (-1.0d), 0L };
        double[] doubleArray74 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray73, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray68, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray63, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator(31.144823004794873d, 97.0d, doubleArray12, doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction(52.0d);
        double double13 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize(10.0d);
        double double16 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) (byte) 0);
        double double19 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getSafety();
        double double16 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        double double41 = dormandPrince853Integrator4.getMaxStep();
        double[] doubleArray46 = new double[] { (-1.0d), 0L };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray46, doubleArray47);
        double double49 = dormandPrince853Integrator48.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator48.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler50);
        dormandPrince853Integrator4.setMinReduction(0.9d);
        dormandPrince853Integrator4.setMinReduction((double) (short) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(stepHandler50);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        double double32 = dormandPrince853Integrator6.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getMinStep();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) 10.0f, (double) (-1.0f), (int) (short) -1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray11 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 0, doubleArray9, doubleArray11);
        double[] doubleArray17 = new double[] { (-1.0d), 0L };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 31.622776601683793d, doubleArray9, doubleArray18);
        double double21 = dormandPrince853Integrator20.getMaxGrowth();
        double double22 = dormandPrince853Integrator20.getSafety();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 10.0f, (double) 100.0f, (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(10.0d);
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction23, (double) (short) 0, 52.0d, 10);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, 22.80350850198276d, 0.9d, 22.80350850198276d);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        int int18 = dormandPrince853Integrator6.getOrder();
        java.lang.Class<?> wildcardClass19 = dormandPrince853Integrator6.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(22.80350850198276d, 100.0d, (double) (short) 100, Double.NaN);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 47.753019278348006d + "'", double6 == 47.753019278348006d);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        dormandPrince853Integrator6.setSafety((double) (-1.0f));
        double[] doubleArray24 = new double[] { (-1.0d), 0L };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray24, doubleArray25);
        double double27 = dormandPrince853Integrator26.getCurrentStepStart();
        double double28 = dormandPrince853Integrator26.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        double double31 = dormandPrince853Integrator6.getMinReduction();
        java.lang.String str32 = dormandPrince853Integrator6.getName();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.2d + "'", double31 == 0.2d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction16, (double) 1L, (double) 1L, (int) ' ');
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(0.0d);
        int int11 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction((double) 8);
        double double14 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        double double9 = dormandPrince853Integrator4.getMinReduction();
        double[] doubleArray14 = new double[] { (-1.0d), 0L };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray14, doubleArray15);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator16.getStepHandler();
        double double18 = dormandPrince853Integrator16.getMaxStep();
        double[] doubleArray21 = null;
        double[] doubleArray26 = new double[] { (-1.0d), 0L };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray26, doubleArray27);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray21, doubleArray27);
        dormandPrince853Integrator29.setMinReduction((double) (byte) 0);
        java.lang.String str32 = dormandPrince853Integrator29.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator37.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator37.getStepHandler();
        dormandPrince853Integrator29.setStepHandler(stepHandler39);
        dormandPrince853Integrator16.setStepHandler(stepHandler39);
        dormandPrince853Integrator4.setStepHandler(stepHandler39);
        dormandPrince853Integrator4.setMinReduction(2.8284271247461903d);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str32, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler38);
        org.junit.Assert.assertNotNull(stepHandler39);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getMinStep();
        double[] doubleArray14 = null;
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray14, doubleArray20);
        double[] doubleArray29 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray20, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator35.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator35.getStepHandler();
        dormandPrince853Integrator30.setStepHandler(stepHandler37);
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        double double40 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (short) 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray13 = null;
        double[] doubleArray18 = new double[] { (-1.0d), 0L };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray13, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray8, doubleArray19);
        double[] doubleArray29 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray19, doubleArray29);
        double[] doubleArray33 = null;
        double[] doubleArray38 = new double[] { (-1.0d), 0L };
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray38, doubleArray39);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray33, doubleArray39);
        dormandPrince853Integrator41.setMinReduction((double) (byte) 0);
        java.lang.String str44 = dormandPrince853Integrator41.getName();
        double double45 = dormandPrince853Integrator41.getMaxGrowth();
        double double46 = dormandPrince853Integrator41.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator41.getStepHandler();
        int int48 = dormandPrince853Integrator41.getOrder();
        double double49 = dormandPrince853Integrator41.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler50 = dormandPrince853Integrator41.getStepHandler();
        dormandPrince853Integrator30.setStepHandler(stepHandler50);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str44, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.9d + "'", double49 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler50);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        int int32 = dormandPrince853Integrator6.getOrder();
        double double33 = dormandPrince853Integrator6.getMinStep();
        double double34 = dormandPrince853Integrator6.getMaxStep();
        java.lang.Class<?> wildcardClass35 = dormandPrince853Integrator6.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setMinReduction((double) 100);
        double double17 = dormandPrince853Integrator6.getMinReduction();
        double double18 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray13 = null;
        double[] doubleArray18 = new double[] { (-1.0d), 0L };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray13, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray8, doubleArray19);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray32, doubleArray44);
        double[] doubleArray62 = new double[] { (-1.0d), 0L };
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray62, doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray62, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray32, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) 10L, doubleArray8, doubleArray32);
        double double75 = dormandPrince853Integrator74.getCurrentStepStart();
        dormandPrince853Integrator74.setMaxGrowth((double) (-1.0f));
        double double78 = dormandPrince853Integrator74.getMinStep();
        dormandPrince853Integrator74.setSafety(0.2d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        double[] doubleArray6 = null;
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray6, doubleArray12);
        double[] doubleArray21 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray12, doubleArray21);
        double[] doubleArray25 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray12, doubleArray25);
        dormandPrince853Integrator26.setInitialStepSize((double) (byte) 0);
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator26.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) (-1.0f), (double) 1, 0.9d);
        dormandPrince853Integrator34.setMinReduction((double) 10L);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double double44 = dormandPrince853Integrator43.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator34.setStepHandler(stepHandler45);
        dormandPrince853Integrator26.setStepHandler(stepHandler45);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(stepHandler45);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        dormandPrince853Integrator6.setMaxGrowth((double) 0L);
        double double9 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str10 = dormandPrince853Integrator6.getName();
        double double11 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 31.622776601683793d + "'", double11 == 31.622776601683793d);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        java.lang.String str14 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setSafety((double) (byte) 0);
        double double17 = dormandPrince853Integrator6.getSafety();
        dormandPrince853Integrator6.setMinReduction((double) (short) 10);
        double double20 = dormandPrince853Integrator6.getSafety();
        double double21 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setSafety(0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        double double10 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction(52.0d);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        dormandPrince853Integrator23.setMinReduction((double) (byte) 0);
        java.lang.String str26 = dormandPrince853Integrator23.getName();
        double double27 = dormandPrince853Integrator23.getMaxStep();
        double double28 = dormandPrince853Integrator23.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction29, (double) (byte) 1, (double) 1L, 100);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator59.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator59.getStepHandler();
        dormandPrince853Integrator54.setStepHandler(stepHandler61);
        dormandPrince853Integrator23.setStepHandler(stepHandler61);
        dormandPrince853Integrator4.setStepHandler(stepHandler61);
        double double65 = dormandPrince853Integrator4.getSafety();
        double double66 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.9d + "'", double65 == 0.9d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 52.0d + "'", double66 == 52.0d);
        org.junit.Assert.assertNotNull(stepHandler67);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize((double) 100);
        int int21 = dormandPrince853Integrator6.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction22, 2.5298221281347035d, (double) 100, 1);
        java.lang.Class<?> wildcardClass27 = dormandPrince853Integrator6.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        double[] doubleArray6 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        double[] doubleArray34 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray21, doubleArray34);
        double[] doubleArray42 = null;
        double[] doubleArray47 = new double[] { (-1.0d), 0L };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray47, doubleArray48);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray42, doubleArray48);
        double[] doubleArray57 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray48, doubleArray57);
        double[] doubleArray61 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray48, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray21, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray6, doubleArray61);
        dormandPrince853Integrator64.setMaxGrowth((double) 1L);
        double double67 = dormandPrince853Integrator64.getCurrentSignedStepsize();
        dormandPrince853Integrator64.setInitialStepSize(10.0d);
        double double70 = dormandPrince853Integrator64.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        double double9 = dormandPrince853Integrator6.getCurrentStepStart();
        double double10 = dormandPrince853Integrator6.getCurrentStepStart();
        double double11 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 31.622776601683793d + "'", double11 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator56.getStepHandler();
        double double58 = dormandPrince853Integrator56.getCurrentSignedStepsize();
        double double59 = dormandPrince853Integrator56.getMinReduction();
        java.lang.String str60 = dormandPrince853Integrator56.getName();
        dormandPrince853Integrator56.setSafety(1.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.2d + "'", double59 == 0.2d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str60, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) (short) 100);
        double double26 = dormandPrince853Integrator20.getCurrentStepStart();
        dormandPrince853Integrator20.setSafety((double) 'a');
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 10.0f, (double) (short) 1, (int) 'a');
        dormandPrince853Integrator10.setMinReduction(Double.NaN);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        double double15 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction16, (double) (byte) 100, (double) 100, 0);
        double double21 = dormandPrince853Integrator10.getMinReduction();
        int int22 = dormandPrince853Integrator10.getOrder();
        double double23 = dormandPrince853Integrator10.getSafety();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        dormandPrince853Integrator6.setInitialStepSize((double) 10L);
        double double18 = dormandPrince853Integrator6.getSafety();
        double double19 = dormandPrince853Integrator6.getMaxStep();
        dormandPrince853Integrator6.setInitialStepSize((double) 0.0f);
        double double22 = dormandPrince853Integrator6.getMaxGrowth();
        double double23 = dormandPrince853Integrator6.getMaxGrowth();
        double double24 = dormandPrince853Integrator6.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.2d + "'", double24 == 0.2d);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (byte) 1, (double) 10L, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 10.0d, 52.0d, (-1));
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        int int11 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations12 = null;
        double[] doubleArray14 = new double[] {};
        double[] doubleArray26 = new double[] { (-1.0d), 0L };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray26, doubleArray27);
        double[] doubleArray31 = null;
        double[] doubleArray36 = new double[] { (-1.0d), 0L };
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray36, doubleArray37);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray31, doubleArray37);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray26, doubleArray37);
        double[] doubleArray47 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray37, doubleArray47);
        double[] doubleArray53 = null;
        double[] doubleArray58 = new double[] { (-1.0d), 0L };
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray58, doubleArray59);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray53, doubleArray59);
        double[] doubleArray68 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray59, doubleArray68);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (-1), doubleArray37, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations12, 10.0d, doubleArray14, (double) 1, doubleArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMinReduction((double) ' ');
        dormandPrince853Integrator10.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator10.getStepHandler();
        double double18 = dormandPrince853Integrator10.getMinReduction();
        double[] doubleArray23 = new double[] { (-1.0d), 0L };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray23, doubleArray24);
        double double26 = dormandPrince853Integrator25.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator25.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction28, (double) 0, (double) 10, (int) '4');
        double double33 = dormandPrince853Integrator25.getMinStep();
        double double34 = dormandPrince853Integrator25.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator25.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler36);
        double double38 = dormandPrince853Integrator10.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 32.0d + "'", double18 == 32.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 100L, (double) (byte) -1, (int) (byte) -1);
        dormandPrince853Integrator4.setInitialStepSize(97.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMinReduction(0.0d);
        dormandPrince853Integrator4.setMaxGrowth(22.80350850198276d);
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        org.apache.commons.math.ode.StepHandler stepHandler13 = null;
        dormandPrince853Integrator4.setStepHandler(stepHandler13);
        double double15 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((double) 100L);
        dormandPrince853Integrator4.setMinReduction((double) 1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator20.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler21);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) (short) -1, 97.0d, (double) ' ');
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth(2.5298221281347035d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction9, (double) 1L, 0.0d, 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) (-1));
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double16 = dormandPrince853Integrator15.getSafety();
        int int17 = dormandPrince853Integrator15.getOrder();
        dormandPrince853Integrator15.setMaxGrowth((double) 100L);
        dormandPrince853Integrator15.setMaxGrowth((double) 10L);
        double[] doubleArray26 = null;
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray26, doubleArray32);
        double[] doubleArray41 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray32, doubleArray41);
        dormandPrince853Integrator42.setMaxGrowth((double) (byte) 10);
        double double45 = dormandPrince853Integrator42.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler46);
        dormandPrince853Integrator6.setStepHandler(stepHandler46);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction49 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction49, (double) ' ', (double) 1.0f, (int) 'a');
        org.apache.commons.math.ode.StepHandler stepHandler54 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator6.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9d + "'", double16 == 0.9d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertNotNull(stepHandler54);
        org.junit.Assert.assertNotNull(stepHandler55);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        java.lang.String str14 = dormandPrince853Integrator6.getName();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        double double16 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setMaxGrowth((double) '4');
        double double19 = dormandPrince853Integrator6.getSafety();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.9d + "'", double19 == 0.9d);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) '4', (double) (short) -1, 6.841052550594828d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 32.0d, (double) ' ', (-1));
        double double33 = dormandPrince853Integrator20.getCurrentStepStart();
        double[] doubleArray36 = null;
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray36, doubleArray42);
        dormandPrince853Integrator44.setMinReduction((double) (byte) 0);
        java.lang.String str47 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator52.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler54 = dormandPrince853Integrator52.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler54);
        double double56 = dormandPrince853Integrator44.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler57);
        double double59 = dormandPrince853Integrator20.getSafety();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler53);
        org.junit.Assert.assertNotNull(stepHandler54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9d + "'", double56 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        double double16 = dormandPrince853Integrator15.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator15.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction18 = null;
        dormandPrince853Integrator15.addSwitchingFunction(switchingFunction18, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double23 = dormandPrince853Integrator15.getMinReduction();
        java.lang.String str24 = dormandPrince853Integrator15.getName();
        dormandPrince853Integrator15.setMinReduction((double) 10L);
        double double27 = dormandPrince853Integrator15.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator15.getStepHandler();
        double[] doubleArray33 = new double[] { (-1.0d), 0L };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray33, doubleArray34);
        double double36 = dormandPrince853Integrator35.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator35.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction38, (double) 0, (double) 10, (int) '4');
        double double43 = dormandPrince853Integrator35.getMinStep();
        double double44 = dormandPrince853Integrator35.getMaxStep();
        java.lang.String str45 = dormandPrince853Integrator35.getName();
        double double46 = dormandPrince853Integrator35.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator35.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler47);
        dormandPrince853Integrator4.setStepHandler(stepHandler47);
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.2d + "'", double23 == 0.2d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str45, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler47);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        int int7 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety(100.0d);
        dormandPrince853Integrator4.setMinReduction((-0.0d));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) (short) -1, 31.622776601683793d, (int) (byte) 100);
        double double12 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        double[] doubleArray23 = null;
        double[] doubleArray28 = new double[] { (-1.0d), 0L };
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray28, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray23, doubleArray29);
        double[] doubleArray38 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray29, doubleArray38);
        double[] doubleArray42 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray29, doubleArray42);
        double[] doubleArray50 = null;
        double[] doubleArray55 = new double[] { (-1.0d), 0L };
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray55, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray50, doubleArray56);
        double[] doubleArray65 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray56, doubleArray65);
        double[] doubleArray69 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray56, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray29, doubleArray69);
        dormandPrince853Integrator71.setInitialStepSize((double) 0.0f);
        double double74 = dormandPrince853Integrator71.getMaxGrowth();
        double double75 = dormandPrince853Integrator71.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler76 = dormandPrince853Integrator71.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler76);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(stepHandler76);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator4.setInitialStepSize(0.2d);
        dormandPrince853Integrator4.setMinReduction(0.0d);
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator4.getStepHandler();
        double double14 = dormandPrince853Integrator4.getCurrentStepStart();
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        dormandPrince853Integrator25.setMinReduction((double) (byte) 0);
        java.lang.String str28 = dormandPrince853Integrator25.getName();
        double double29 = dormandPrince853Integrator25.getMaxStep();
        double double30 = dormandPrince853Integrator25.getMinStep();
        double double31 = dormandPrince853Integrator25.getSafety();
        double double32 = dormandPrince853Integrator25.getMinReduction();
        int int33 = dormandPrince853Integrator25.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler34);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.9d + "'", double31 == 0.9d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(stepHandler34);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(1.0d);
        java.lang.String str10 = dormandPrince853Integrator6.getName();
        double double11 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setMaxGrowth(0.2d);
        double double14 = dormandPrince853Integrator6.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator6.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler15);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) (short) -1, (double) 0.0f, (double) 1.0f);
        dormandPrince853Integrator4.setMinReduction(2.5298221281347035d);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        int int44 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setSafety(2.5298221281347035d);
        java.lang.Class<?> wildcardClass47 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        dormandPrince853Integrator10.setSafety((double) 100);
        double double22 = dormandPrince853Integrator10.getMaxStep();
        double double23 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        java.lang.String str24 = dormandPrince853Integrator10.getName();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        double[] doubleArray8 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        double[] doubleArray36 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray23, doubleArray36);
        double[] doubleArray44 = null;
        double[] doubleArray49 = new double[] { (-1.0d), 0L };
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray44, doubleArray50);
        double[] doubleArray59 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray50, doubleArray59);
        double[] doubleArray63 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray50, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray23, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray8, doubleArray63);
        double[] doubleArray67 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator(52.0d, (double) 8, doubleArray8, doubleArray67);
        java.lang.String str69 = dormandPrince853Integrator68.getName();
        double double70 = dormandPrince853Integrator68.getMinStep();
        double double71 = dormandPrince853Integrator68.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str69, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        double double8 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        double[] doubleArray14 = new double[] { (-1.0d), 0L };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray14, doubleArray15);
        double double17 = dormandPrince853Integrator16.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction19, (double) 0, (double) 10, (int) '4');
        double double24 = dormandPrince853Integrator16.getCurrentSignedStepsize();
        dormandPrince853Integrator16.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator16.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler28);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 31.622776601683793d + "'", double24 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertNotNull(stepHandler28);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMaxGrowth((double) (-1));
        dormandPrince853Integrator10.setMaxGrowth((double) (-1L));
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        double double19 = dormandPrince853Integrator10.getMinReduction();
        dormandPrince853Integrator10.setMinReduction((double) 100.0f);
        double double22 = dormandPrince853Integrator10.getSafety();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        int int20 = dormandPrince853Integrator10.getOrder();
        double double21 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        double double22 = dormandPrince853Integrator10.getMinReduction();
        double double23 = dormandPrince853Integrator10.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.2d + "'", double22 == 0.2d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        dormandPrince853Integrator56.setInitialStepSize((double) 0.0f);
        double double59 = dormandPrince853Integrator56.getMaxGrowth();
        double double60 = dormandPrince853Integrator56.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', 1.0d, (double) (-1.0f));
        dormandPrince853Integrator65.setInitialStepSize((double) 10L);
        double double68 = dormandPrince853Integrator65.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        java.lang.String str74 = dormandPrince853Integrator73.getName();
        double double75 = dormandPrince853Integrator73.getCurrentStepStart();
        int int76 = dormandPrince853Integrator73.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler77 = dormandPrince853Integrator73.getStepHandler();
        dormandPrince853Integrator65.setStepHandler(stepHandler77);
        dormandPrince853Integrator56.setStepHandler(stepHandler77);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9d + "'", double60 == 0.9d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 8 + "'", int76 == 8);
        org.junit.Assert.assertNotNull(stepHandler77);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) 1L);
        double double8 = dormandPrince853Integrator4.getSafety();
        java.lang.Class<?> wildcardClass9 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        double[] doubleArray29 = null;
        double[] doubleArray34 = new double[] { (-1.0d), 0L };
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray29, doubleArray35);
        double[] doubleArray44 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray35, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray23, doubleArray35);
        double[] doubleArray49 = null;
        double[] doubleArray54 = new double[] { (-1.0d), 0L };
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray49, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', doubleArray35, doubleArray55);
        double[] doubleArray63 = null;
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray63, doubleArray69);
        double[] doubleArray78 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray69, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler85 = dormandPrince853Integrator84.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler86 = dormandPrince853Integrator84.getStepHandler();
        dormandPrince853Integrator79.setStepHandler(stepHandler86);
        dormandPrince853Integrator58.setStepHandler(stepHandler86);
        dormandPrince853Integrator6.setStepHandler(stepHandler86);
        double double90 = dormandPrince853Integrator6.getCurrentStepStart();
        double double91 = dormandPrince853Integrator6.getMinStep();
        double double92 = dormandPrince853Integrator6.getMinReduction();
        java.lang.Class<?> wildcardClass93 = dormandPrince853Integrator6.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler85);
        org.junit.Assert.assertNotNull(stepHandler86);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.2d + "'", double92 == 0.2d);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        double double57 = dormandPrince853Integrator56.getMinStep();
        dormandPrince853Integrator56.setMaxGrowth((double) (byte) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator64.getStepHandler();
        dormandPrince853Integrator56.setStepHandler(stepHandler65);
        double double67 = dormandPrince853Integrator56.getCurrentStepStart();
        dormandPrince853Integrator56.setInitialStepSize((double) ' ');
        double double70 = dormandPrince853Integrator56.getMaxStep();
        double double71 = dormandPrince853Integrator56.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(stepHandler65);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 10.0f, (double) 100.0f, (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setInitialStepSize(10.0d);
        double double8 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction((double) (byte) 10);
        double double9 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setSafety((double) (short) -1);
        double double13 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator21.getStepHandler();
        double double23 = dormandPrince853Integrator21.getMaxStep();
        double[] doubleArray26 = null;
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray26, doubleArray32);
        dormandPrince853Integrator34.setMinReduction((double) (byte) 0);
        java.lang.String str37 = dormandPrince853Integrator34.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator42.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator42.getStepHandler();
        dormandPrince853Integrator34.setStepHandler(stepHandler44);
        dormandPrince853Integrator21.setStepHandler(stepHandler44);
        dormandPrince853Integrator6.setStepHandler(stepHandler44);
        dormandPrince853Integrator6.setInitialStepSize((double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(stepHandler22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str37, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertNotNull(stepHandler44);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) ' ', (double) 10L, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 10.0d, (double) 10, (-1.0d));
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        double double10 = dormandPrince853Integrator6.getSafety();
        double double11 = dormandPrince853Integrator6.getCurrentStepStart();
        double double12 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray13 = null;
        double[] doubleArray18 = new double[] { (-1.0d), 0L };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray13, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray8, doubleArray19);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray32, doubleArray44);
        double[] doubleArray62 = new double[] { (-1.0d), 0L };
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray62, doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray62, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray32, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) 10L, doubleArray8, doubleArray32);
        double[] doubleArray79 = new double[] { (-1.0d), 0L };
        double[] doubleArray80 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray79, doubleArray80);
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator81.getStepHandler();
        dormandPrince853Integrator81.setInitialStepSize(1.0d);
        java.lang.String str85 = dormandPrince853Integrator81.getName();
        double double86 = dormandPrince853Integrator81.getMinStep();
        dormandPrince853Integrator81.setMaxGrowth(0.2d);
        double double89 = dormandPrince853Integrator81.getCurrentSignedStepsize();
        double double90 = dormandPrince853Integrator81.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler91 = dormandPrince853Integrator81.getStepHandler();
        dormandPrince853Integrator74.setStepHandler(stepHandler91);
        double double93 = dormandPrince853Integrator74.getSafety();
        dormandPrince853Integrator74.setMinReduction((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str85, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.0d + "'", double86 == 10.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 31.622776601683793d + "'", double89 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.2d + "'", double90 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.9d + "'", double93 == 0.9d);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (byte) 1, (double) 10L, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 10.0d, 52.0d, (-1));
        int int12 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(1.4142135623730951d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        double double44 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 0L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 22.80350850198276d + "'", double44 == 22.80350850198276d);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) 10L, (double) 0, 35.0d);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getMinStep();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 22.80350850198276d + "'", double9 == 22.80350850198276d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 10.0d, (double) 100.0f, (double) 10.0f);
        double double5 = dormandPrince853Integrator4.getMinStep();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getSafety();
        double double8 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator(52.0d, 10.0d, 52.0d, (double) (short) -1);
        double[] doubleArray14 = null;
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray14, doubleArray20);
        dormandPrince853Integrator22.setMinReduction((double) 100);
        double double25 = dormandPrince853Integrator22.getMaxGrowth();
        int int26 = dormandPrince853Integrator22.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator11.setStepHandler(stepHandler27);
        dormandPrince853Integrator4.setStepHandler(stepHandler27);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(stepHandler27);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        int int11 = dormandPrince853Integrator4.getOrder();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        double double13 = dormandPrince853Integrator4.getSafety();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 8, (double) 8, 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) (byte) 10, (double) (byte) 0, (double) (short) 0);
        double double5 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 22.80350850198276d + "'", double8 == 22.80350850198276d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        int int32 = dormandPrince853Integrator6.getOrder();
        double double33 = dormandPrince853Integrator6.getCurrentStepStart();
        java.lang.String str34 = dormandPrince853Integrator6.getName();
        double double35 = dormandPrince853Integrator6.getMinStep();
        int int36 = dormandPrince853Integrator6.getOrder();
        double double37 = dormandPrince853Integrator6.getMinReduction();
        double[] doubleArray42 = new double[] { (-1.0d), 0L };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray42, doubleArray43);
        double double45 = dormandPrince853Integrator44.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler46 = dormandPrince853Integrator44.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction47 = null;
        dormandPrince853Integrator44.addSwitchingFunction(switchingFunction47, (double) 0, (double) 10, (int) '4');
        double double52 = dormandPrince853Integrator44.getMinStep();
        double double53 = dormandPrince853Integrator44.getMaxStep();
        java.lang.String str54 = dormandPrince853Integrator44.getName();
        double double55 = dormandPrince853Integrator44.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler56 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler56);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction58, 6.841052550594828d, (double) 1, 8);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction63 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction63, (double) 100, 17.647895909936366d, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.2d + "'", double37 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(stepHandler46);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str54, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler56);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getMaxGrowth();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getMaxGrowth();
        int int14 = dormandPrince853Integrator10.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator10.getStepHandler();
        double double16 = dormandPrince853Integrator10.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.4142135623730951d, (-0.0d), 100.0d, 0.0d);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction17, (double) (-1L), (double) 1.0f, (int) (short) -1);
        double double22 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction23, 31.144823004794873d, 0.9d, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction17, (double) (short) 100, (double) 'a', 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setSafety(0.0d);
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        dormandPrince853Integrator10.setInitialStepSize(18.708286933869708d);
        int int18 = dormandPrince853Integrator10.getOrder();
        dormandPrince853Integrator10.setMaxGrowth((double) (byte) 100);
        java.lang.Class<?> wildcardClass21 = dormandPrince853Integrator10.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) (short) 10, (double) (byte) -1, (double) 'a');
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        double double9 = dormandPrince853Integrator6.getCurrentStepStart();
        double double10 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setSafety((-0.0d));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getMinStep();
        double[] doubleArray14 = null;
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray14, doubleArray20);
        double[] doubleArray29 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray20, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator35.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator35.getStepHandler();
        dormandPrince853Integrator30.setStepHandler(stepHandler37);
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        double double40 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), 0.0d, 59.16079783099616d, 0.0d);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMinReduction((double) 10.0f);
        double double17 = dormandPrince853Integrator6.getMaxStep();
        double double18 = dormandPrince853Integrator6.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray9, doubleArray21);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double[] doubleArray46 = null;
        double[] doubleArray51 = new double[] { (-1.0d), 0L };
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray51, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray46, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray41, doubleArray52);
        double[] doubleArray58 = null;
        double[] doubleArray63 = null;
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray63, doubleArray69);
        double[] doubleArray78 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray69, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (-1L), doubleArray58, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator81 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, doubleArray41, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, 0.0d, doubleArray9, doubleArray69);
        double double83 = dormandPrince853Integrator82.getCurrentStepStart();
        java.lang.String str84 = dormandPrince853Integrator82.getName();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str84, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator6.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction17, 100.0d, 0.9d, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 31.622776601683793d + "'", double15 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 0, (double) 100.0f, 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction20 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction20, (double) 100.0f, (double) (short) 10, (int) ' ');
        double[] doubleArray33 = new double[] { (-1.0d), 0L };
        double[] doubleArray34 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray33, doubleArray34);
        double[] doubleArray40 = null;
        double[] doubleArray45 = new double[] { (-1.0d), 0L };
        double[] doubleArray46 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray45, doubleArray46);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray40, doubleArray46);
        double[] doubleArray55 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray46, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray34, doubleArray46);
        double[] doubleArray64 = new double[] { (-1.0d), 0L };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray64, doubleArray65);
        double[] doubleArray71 = new double[] { (-1.0d), 0L };
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray64, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray34, doubleArray64);
        double double76 = dormandPrince853Integrator75.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler77 = dormandPrince853Integrator75.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler77);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.2d + "'", double76 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler77);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMaxGrowth((double) (-1));
        dormandPrince853Integrator10.setMaxGrowth((double) (-1L));
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        double double19 = dormandPrince853Integrator10.getMinReduction();
        dormandPrince853Integrator10.setMinReduction((double) 100.0f);
        double double22 = dormandPrince853Integrator10.getMaxGrowth();
        double double23 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) '#', (double) 0.0f, (double) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 32.0d, (double) (-1), (int) (short) 1);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction10 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction10, (double) (byte) -1, (double) 10L, (int) (byte) 1);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, 0.0d, (double) 10, 8);
        dormandPrince853Integrator4.setMaxGrowth(2.5298221281347035d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 1.0d, 97.0d, 17.647895909936366d);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) '4', 100.0d, (int) (byte) 10);
        dormandPrince853Integrator4.setSafety((double) (byte) 0);
        java.lang.String str21 = dormandPrince853Integrator4.getName();
        int int22 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str21, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction11, 52.0d, 0.0d, (int) (byte) -1);
        double double16 = dormandPrince853Integrator10.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.2d + "'", double16 == 0.2d);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) (short) 100);
        double double26 = dormandPrince853Integrator20.getMaxStep();
        dormandPrince853Integrator20.setMaxGrowth((double) 0L);
        double double29 = dormandPrince853Integrator20.getCurrentStepStart();
        dormandPrince853Integrator20.setMinReduction((double) (short) 1);
        double double32 = dormandPrince853Integrator20.getMaxStep();
        java.lang.String str33 = dormandPrince853Integrator20.getName();
        dormandPrince853Integrator20.setSafety((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str33, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) (short) 1, 6.841052550594828d, 2.8284271247461903d);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 10.0f, (double) (short) 1, (int) 'a');
        dormandPrince853Integrator10.setSafety(0.0d);
        double double22 = dormandPrince853Integrator10.getMaxGrowth();
        double double23 = dormandPrince853Integrator10.getSafety();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMaxGrowth((double) (-1));
        java.lang.String str16 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.StepHandler stepHandler17 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler17);
        org.junit.Assert.assertNotNull(stepHandler18);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        double double10 = dormandPrince853Integrator6.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10L);
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getCurrentStepStart();
        double[] doubleArray20 = null;
        double[] doubleArray25 = new double[] { (-1.0d), 0L };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray25, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray20, doubleArray26);
        double[] doubleArray35 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray26, doubleArray35);
        dormandPrince853Integrator36.setMaxGrowth((double) (byte) 10);
        double double39 = dormandPrince853Integrator36.getMinStep();
        dormandPrince853Integrator36.setSafety((double) (short) 100);
        double double42 = dormandPrince853Integrator36.getCurrentSignedStepsize();
        double[] doubleArray45 = null;
        double[] doubleArray50 = new double[] { (-1.0d), 0L };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray50, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray45, doubleArray51);
        dormandPrince853Integrator53.setMinReduction((double) (byte) 0);
        java.lang.String str56 = dormandPrince853Integrator53.getName();
        double double57 = dormandPrince853Integrator53.getMaxStep();
        double double58 = dormandPrince853Integrator53.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction59 = null;
        dormandPrince853Integrator53.addSwitchingFunction(switchingFunction59, (double) (byte) 1, (double) 1L, 100);
        double[] doubleArray68 = null;
        double[] doubleArray73 = new double[] { (-1.0d), 0L };
        double[] doubleArray74 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray73, doubleArray74);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray68, doubleArray74);
        double[] doubleArray83 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray74, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler90 = dormandPrince853Integrator89.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler91 = dormandPrince853Integrator89.getStepHandler();
        dormandPrince853Integrator84.setStepHandler(stepHandler91);
        dormandPrince853Integrator53.setStepHandler(stepHandler91);
        dormandPrince853Integrator36.setStepHandler(stepHandler91);
        dormandPrince853Integrator6.setStepHandler(stepHandler91);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str56, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler90);
        org.junit.Assert.assertNotNull(stepHandler91);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) '#', (double) 0.0f, 1.4142135623730951d);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 0, (double) 100.0f, 0);
        java.lang.String str20 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.StepHandler stepHandler21 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator10.setInitialStepSize(2.8284271247461903d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler21);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        int int20 = dormandPrince853Integrator10.getOrder();
        dormandPrince853Integrator10.setInitialStepSize(100.0d);
        dormandPrince853Integrator10.setMaxGrowth((double) 1L);
        double double25 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        dormandPrince853Integrator10.setSafety((double) (short) 1);
        double double28 = dormandPrince853Integrator10.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        double[] doubleArray6 = new double[] { (-1.0d), 0L };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray6, doubleArray7);
        double[] doubleArray11 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), 0L };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray27, doubleArray28);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray20, doubleArray28);
        double[] doubleArray31 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray20, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', 0.0d, doubleArray11, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, (double) ' ', doubleArray7, doubleArray20);
        java.lang.Class<?> wildcardClass35 = dormandPrince853Integrator34.getClass();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMinStep();
        double double8 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str9 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str9, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double15 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setSafety(35.0d);
        double double18 = dormandPrince853Integrator6.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        double[] doubleArray6 = null;
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray6, doubleArray12);
        double[] doubleArray21 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray12, doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), 0L };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray27, doubleArray28);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) ' ', doubleArray12, doubleArray28);
        double double31 = dormandPrince853Integrator30.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        java.lang.String str14 = dormandPrince853Integrator6.getName();
        java.lang.String str15 = dormandPrince853Integrator6.getName();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setSafety(0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        double[] doubleArray6 = new double[] { (-1.0d), 0L };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray6, doubleArray7);
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray6, doubleArray14);
        double double17 = dormandPrince853Integrator16.getMaxGrowth();
        dormandPrince853Integrator16.setSafety((double) (byte) 0);
        double double20 = dormandPrince853Integrator16.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.2d + "'", double20 == 0.2d);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        double double57 = dormandPrince853Integrator56.getMinStep();
        dormandPrince853Integrator56.setMaxGrowth((double) (byte) 100);
        double double60 = dormandPrince853Integrator56.getSafety();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.9d + "'", double60 == 0.9d);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), (double) 0L, 10.0d, (double) 1L);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        double double25 = dormandPrince853Integrator20.getMinReduction();
        double double26 = dormandPrince853Integrator20.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction27, (double) 1, 8.0d, 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2d + "'", double25 == 0.2d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        int int32 = dormandPrince853Integrator6.getOrder();
        double double33 = dormandPrince853Integrator6.getCurrentStepStart();
        java.lang.String str34 = dormandPrince853Integrator6.getName();
        double double35 = dormandPrince853Integrator6.getMinStep();
        int int36 = dormandPrince853Integrator6.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction37 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction37, (double) 10.0f, (double) 1L, 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        double[] doubleArray8 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        double[] doubleArray36 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray23, doubleArray36);
        double[] doubleArray44 = null;
        double[] doubleArray49 = new double[] { (-1.0d), 0L };
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray44, doubleArray50);
        double[] doubleArray59 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray50, doubleArray59);
        double[] doubleArray63 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray50, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray23, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray8, doubleArray63);
        double[] doubleArray69 = null;
        double[] doubleArray74 = new double[] { (-1.0d), 0L };
        double[] doubleArray75 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray74, doubleArray75);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray69, doubleArray75);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator(59.16079783099616d, (double) 100, doubleArray63, doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction14, (double) 1, (double) 0L, (int) 'a');
        double double19 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setMinReduction((double) (-1.0f));
        double double22 = dormandPrince853Integrator10.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 10.0f, (double) 100.0f, (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, 32.0d, (double) (byte) 1, (int) (byte) -1);
        double double11 = dormandPrince853Integrator4.getMaxGrowth();
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction14, (double) 1, (double) 0L, (int) 'a');
        double double19 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setMinReduction((double) 10.0f);
        double[] doubleArray26 = new double[] { (-1.0d), 0L };
        double[] doubleArray27 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray26, doubleArray27);
        double double29 = dormandPrince853Integrator28.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator28.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction31, (double) 0, (double) 10, (int) '4');
        double double36 = dormandPrince853Integrator28.getMinStep();
        double double37 = dormandPrince853Integrator28.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction38 = null;
        dormandPrince853Integrator28.addSwitchingFunction(switchingFunction38, (double) (-1L), (double) 8, (int) (byte) 100);
        double[] doubleArray45 = null;
        double[] doubleArray50 = new double[] { (-1.0d), 0L };
        double[] doubleArray51 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray50, doubleArray51);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray45, doubleArray51);
        double[] doubleArray58 = new double[] { (-1.0d), 0L };
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray58, doubleArray59);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator60.getStepHandler();
        dormandPrince853Integrator53.setStepHandler(stepHandler61);
        dormandPrince853Integrator28.setStepHandler(stepHandler61);
        dormandPrince853Integrator10.setStepHandler(stepHandler61);
        double double65 = dormandPrince853Integrator10.getSafety();
        double double66 = dormandPrince853Integrator10.getMinStep();
        double double67 = dormandPrince853Integrator10.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.9d + "'", double65 == 0.9d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        int int11 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 32.0d, (double) ' ', (-1));
        double double33 = dormandPrince853Integrator20.getCurrentStepStart();
        double[] doubleArray36 = null;
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray36, doubleArray42);
        dormandPrince853Integrator44.setMinReduction((double) (byte) 0);
        java.lang.String str47 = dormandPrince853Integrator44.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator52.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler54 = dormandPrince853Integrator52.getStepHandler();
        dormandPrince853Integrator44.setStepHandler(stepHandler54);
        double double56 = dormandPrince853Integrator44.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator44.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler57);
        dormandPrince853Integrator20.setMinReduction(1.4142135623730951d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str47, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler53);
        org.junit.Assert.assertNotNull(stepHandler54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.9d + "'", double56 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler57);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (-1.0d), (double) (short) -1, (double) (short) 10);
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getMinStep();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        dormandPrince853Integrator4.setMinReduction(0.2d);
        dormandPrince853Integrator4.setInitialStepSize((-0.0d));
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        dormandPrince853Integrator6.setMaxGrowth((double) 0L);
        double double9 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setSafety((double) 1);
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator6.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertNotNull(stepHandler13);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getMinStep();
        double double10 = dormandPrince853Integrator4.getMaxStep();
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        double double12 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        double double10 = dormandPrince853Integrator6.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double16 = dormandPrince853Integrator15.getCurrentSignedStepsize();
        double double17 = dormandPrince853Integrator15.getCurrentSignedStepsize();
        dormandPrince853Integrator15.setMaxGrowth((double) 100L);
        double double20 = dormandPrince853Integrator15.getMinStep();
        double[] doubleArray25 = null;
        double[] doubleArray30 = new double[] { (-1.0d), 0L };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray30, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray25, doubleArray31);
        double[] doubleArray40 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray31, doubleArray40);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler47 = dormandPrince853Integrator46.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler48 = dormandPrince853Integrator46.getStepHandler();
        dormandPrince853Integrator41.setStepHandler(stepHandler48);
        dormandPrince853Integrator15.setStepHandler(stepHandler48);
        dormandPrince853Integrator6.setStepHandler(stepHandler48);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler47);
        org.junit.Assert.assertNotNull(stepHandler48);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        double double10 = dormandPrince853Integrator6.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction11, (double) (byte) 10, (double) 10, (int) (short) 0);
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setSafety((double) 0);
        dormandPrince853Integrator6.setInitialStepSize((double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.9d + "'", double10 == 0.9d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 10.0d, (double) 100.0f, (double) 10.0f);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler6);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) (byte) -1, (double) 1L, 1);
        int int18 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(stepHandler19);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(1.0d);
        dormandPrince853Integrator6.setMaxGrowth((double) 10L);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double17 = dormandPrince853Integrator16.getSafety();
        int int18 = dormandPrince853Integrator16.getOrder();
        dormandPrince853Integrator16.setMaxGrowth((double) 100L);
        double double21 = dormandPrince853Integrator16.getCurrentStepStart();
        double double22 = dormandPrince853Integrator16.getMaxGrowth();
        dormandPrince853Integrator16.setMinReduction(52.0d);
        double[] doubleArray27 = null;
        double[] doubleArray32 = new double[] { (-1.0d), 0L };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray32, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray27, doubleArray33);
        dormandPrince853Integrator35.setMinReduction((double) (byte) 0);
        java.lang.String str38 = dormandPrince853Integrator35.getName();
        double double39 = dormandPrince853Integrator35.getMaxStep();
        double double40 = dormandPrince853Integrator35.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction41 = null;
        dormandPrince853Integrator35.addSwitchingFunction(switchingFunction41, (double) (byte) 1, (double) 1L, 100);
        double[] doubleArray50 = null;
        double[] doubleArray55 = new double[] { (-1.0d), 0L };
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray55, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray50, doubleArray56);
        double[] doubleArray65 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray56, doubleArray65);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler72 = dormandPrince853Integrator71.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler73 = dormandPrince853Integrator71.getStepHandler();
        dormandPrince853Integrator66.setStepHandler(stepHandler73);
        dormandPrince853Integrator35.setStepHandler(stepHandler73);
        dormandPrince853Integrator16.setStepHandler(stepHandler73);
        org.apache.commons.math.ode.StepHandler stepHandler77 = dormandPrince853Integrator16.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler77);
        double double79 = dormandPrince853Integrator6.getMinStep();
        double double80 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        int int81 = dormandPrince853Integrator6.getOrder();
        double double82 = dormandPrince853Integrator6.getCurrentStepStart();
        int int83 = dormandPrince853Integrator6.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.9d + "'", double17 == 0.9d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler72);
        org.junit.Assert.assertNotNull(stepHandler73);
        org.junit.Assert.assertNotNull(stepHandler77);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 31.622776601683793d + "'", double80 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 8 + "'", int81 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        double double37 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.9d + "'", double37 == 0.9d);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 10, (double) 8, 52.0d);
        double[] doubleArray7 = null;
        double[] doubleArray12 = new double[] { (-1.0d), 0L };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray12, doubleArray13);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray7, doubleArray13);
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler23);
        int int25 = dormandPrince853Integrator15.getOrder();
        dormandPrince853Integrator15.setMaxGrowth(10.0d);
        dormandPrince853Integrator15.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction30 = null;
        dormandPrince853Integrator15.addSwitchingFunction(switchingFunction30, (double) 1.0f, (double) '4', (int) (short) 10);
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double double42 = dormandPrince853Integrator41.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator41.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction44, (double) (short) 10, Double.NaN, (int) (byte) -1);
        java.lang.String str49 = dormandPrince853Integrator41.getName();
        dormandPrince853Integrator41.setSafety((double) (byte) 0);
        double double52 = dormandPrince853Integrator41.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator41.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler53);
        dormandPrince853Integrator4.setStepHandler(stepHandler53);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler53);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (-1.0d), (double) (short) -1, (double) (short) 10);
        double[] doubleArray7 = null;
        double[] doubleArray12 = new double[] { (-1.0d), 0L };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray12, doubleArray13);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray7, doubleArray13);
        dormandPrince853Integrator15.setMinReduction((double) (byte) 0);
        java.lang.String str18 = dormandPrince853Integrator15.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator15.setStepHandler(stepHandler25);
        dormandPrince853Integrator4.setStepHandler(stepHandler25);
        double double28 = dormandPrince853Integrator4.getMinReduction();
        double double29 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double30 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setMaxGrowth((-1.0d));
        int int33 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str18, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.2d + "'", double28 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMaxGrowth((double) (-1));
        dormandPrince853Integrator10.setMaxGrowth((double) (-1L));
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        double double19 = dormandPrince853Integrator10.getMinReduction();
        dormandPrince853Integrator10.setMinReduction((double) 100.0f);
        double double22 = dormandPrince853Integrator10.getMaxGrowth();
        double double23 = dormandPrince853Integrator10.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        double[] doubleArray2 = null;
        double[] doubleArray9 = null;
        double[] doubleArray14 = new double[] { (-1.0d), 0L };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray14, doubleArray15);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray9, doubleArray15);
        double[] doubleArray24 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray15, doubleArray24);
        double[] doubleArray30 = new double[] { (-1.0d), 0L };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray30, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) ' ', doubleArray15, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (-1.0f), doubleArray2, doubleArray31);
        dormandPrince853Integrator34.setInitialStepSize((-0.0d));
        dormandPrince853Integrator34.setInitialStepSize((double) 10L);
        double double39 = dormandPrince853Integrator34.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        dormandPrince853Integrator23.setMinReduction((double) (byte) 0);
        java.lang.String str26 = dormandPrince853Integrator23.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction27, (double) 1, (double) 0L, (int) 'a');
        double double32 = dormandPrince853Integrator23.getMaxStep();
        dormandPrince853Integrator23.setMinReduction((double) 10.0f);
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double double42 = dormandPrince853Integrator41.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator41.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction44, (double) 0, (double) 10, (int) '4');
        double double49 = dormandPrince853Integrator41.getMinStep();
        double double50 = dormandPrince853Integrator41.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction51, (double) (-1L), (double) 8, (int) (byte) 100);
        double[] doubleArray58 = null;
        double[] doubleArray63 = new double[] { (-1.0d), 0L };
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray63, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray58, doubleArray64);
        double[] doubleArray71 = new double[] { (-1.0d), 0L };
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator73.getStepHandler();
        dormandPrince853Integrator66.setStepHandler(stepHandler74);
        dormandPrince853Integrator41.setStepHandler(stepHandler74);
        dormandPrince853Integrator23.setStepHandler(stepHandler74);
        dormandPrince853Integrator4.setStepHandler(stepHandler74);
        dormandPrince853Integrator4.setMinReduction((double) 10L);
        double double81 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(stepHandler74);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.9d + "'", double81 == 0.9d);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, 0.0d, 31.144823004794873d, 1.4142135623730951d);
        dormandPrince853Integrator4.setMinReduction(0.2d);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', 1.0d, (double) (-1.0f));
        double double5 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 10.0d, (double) 100.0f, (double) 10.0f);
        double double5 = dormandPrince853Integrator4.getMinStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        double double57 = dormandPrince853Integrator56.getMinStep();
        double double58 = dormandPrince853Integrator56.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction59 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction59, (double) 10L, 97.0d, (int) (short) 100);
        double[] doubleArray66 = null;
        double[] doubleArray71 = new double[] { (-1.0d), 0L };
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray66, doubleArray72);
        dormandPrince853Integrator74.setMinReduction((double) (byte) 0);
        java.lang.String str77 = dormandPrince853Integrator74.getName();
        double double78 = dormandPrince853Integrator74.getMaxStep();
        double double79 = dormandPrince853Integrator74.getMinStep();
        double double80 = dormandPrince853Integrator74.getSafety();
        double double81 = dormandPrince853Integrator74.getMinReduction();
        int int82 = dormandPrince853Integrator74.getOrder();
        dormandPrince853Integrator74.setMinReduction((double) (byte) -1);
        double double85 = dormandPrince853Integrator74.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler86 = dormandPrince853Integrator74.getStepHandler();
        dormandPrince853Integrator56.setStepHandler(stepHandler86);
        dormandPrince853Integrator56.setMinReduction((double) 100);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str77, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.9d + "'", double80 == 0.9d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler86);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction17, (double) (-1L), (double) 1.0f, (int) (short) -1);
        java.lang.String str22 = dormandPrince853Integrator6.getName();
        double[] doubleArray27 = new double[] { (-1.0d), 0L };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray27, doubleArray28);
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator29.getStepHandler();
        double double31 = dormandPrince853Integrator29.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator29.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler32);
        java.lang.String str34 = dormandPrince853Integrator6.getName();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        int int11 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 1);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        double double8 = dormandPrince853Integrator4.getMaxStep();
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(1.0d);
        java.lang.String str10 = dormandPrince853Integrator6.getName();
        double double11 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setMaxGrowth((double) 100.0f);
        double double14 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        java.lang.String str20 = dormandPrince853Integrator19.getName();
        double double21 = dormandPrince853Integrator19.getMinStep();
        double double22 = dormandPrince853Integrator19.getMaxGrowth();
        double[] doubleArray25 = null;
        double[] doubleArray30 = new double[] { (-1.0d), 0L };
        double[] doubleArray31 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray30, doubleArray31);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray25, doubleArray31);
        dormandPrince853Integrator33.setMinReduction((double) 100);
        double double36 = dormandPrince853Integrator33.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator33.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler37);
        dormandPrince853Integrator6.setStepHandler(stepHandler37);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str20, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler37);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 32.0d, (double) ' ', (-1));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction33, (double) 10.0f, (double) 100, 0);
        dormandPrince853Integrator20.setMinReduction((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 2.5298221281347035d, (double) '4', 6.841052550594828d);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        dormandPrince853Integrator4.setInitialStepSize(0.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) 100, (double) (short) 10, 10);
        double double12 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator56.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction58, (double) 100, (double) (short) 1, 1);
        dormandPrince853Integrator56.setInitialStepSize((double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler57);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator25.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator20.setStepHandler(stepHandler27);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction29, (double) (short) 100, (-0.0d), (int) (byte) 100);
        double double34 = dormandPrince853Integrator20.getMinStep();
        double double35 = dormandPrince853Integrator20.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMinReduction((double) ' ');
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        dormandPrince853Integrator10.setMinReduction((double) (short) -1);
        double double18 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        double double19 = dormandPrince853Integrator10.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        double[] doubleArray2 = null;
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        double[] doubleArray26 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray17, doubleArray26);
        double[] doubleArray30 = new double[] {};
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double[] doubleArray46 = null;
        double[] doubleArray51 = new double[] { (-1.0d), 0L };
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray51, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray46, doubleArray52);
        double[] doubleArray61 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray52, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray40, doubleArray52);
        double[] doubleArray66 = null;
        double[] doubleArray71 = new double[] { (-1.0d), 0L };
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray66, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', doubleArray52, doubleArray72);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator76 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 31.622776601683793d, doubleArray30, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator77 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 0, (double) (byte) 100, doubleArray26, doubleArray30);
        double[] doubleArray80 = null;
        double[] doubleArray85 = new double[] { (-1.0d), 0L };
        double[] doubleArray86 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray85, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator88 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray80, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator89 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1.0f, 0.9d, doubleArray30, doubleArray86);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator90 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, Double.NaN, doubleArray2, doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        double[] doubleArray2 = null;
        double[] doubleArray7 = null;
        double[] doubleArray12 = new double[] { (-1.0d), 0L };
        double[] doubleArray13 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray12, doubleArray13);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray7, doubleArray13);
        double[] doubleArray22 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray13, doubleArray22);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (-1L), doubleArray2, doubleArray13);
        dormandPrince853Integrator24.setSafety((double) 0.0f);
        double double27 = dormandPrince853Integrator24.getMaxStep();
        java.lang.String str28 = dormandPrince853Integrator24.getName();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str28, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray13 = null;
        double[] doubleArray18 = new double[] { (-1.0d), 0L };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray13, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray8, doubleArray19);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray32, doubleArray44);
        double[] doubleArray62 = new double[] { (-1.0d), 0L };
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray62, doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray62, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray32, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, (double) 10L, doubleArray8, doubleArray32);
        int int75 = dormandPrince853Integrator74.getOrder();
        double double76 = dormandPrince853Integrator74.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(22.80350850198276d, 100.0d, (double) (short) 100, Double.NaN);
        int int5 = dormandPrince853Integrator4.getOrder();
        java.lang.String str6 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str6, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) 10.0f);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(10.0d);
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, (double) ' ', (-1.0d), (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 0);
        dormandPrince853Integrator4.setSafety((double) '4');
        dormandPrince853Integrator4.setMaxGrowth((double) 1.0f);
        dormandPrince853Integrator4.setMaxGrowth((-1.0d));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, 1.0d, (double) (byte) 1, (int) (byte) 0);
        double[] doubleArray23 = new double[] { (-1.0d), 0L };
        double[] doubleArray24 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray23, doubleArray24);
        double double26 = dormandPrince853Integrator25.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler27 = dormandPrince853Integrator25.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator25.addSwitchingFunction(switchingFunction28, (double) 0, (double) 10, (int) '4');
        double double33 = dormandPrince853Integrator25.getMinStep();
        double double34 = dormandPrince853Integrator25.getMaxStep();
        java.lang.String str35 = dormandPrince853Integrator25.getName();
        double double36 = dormandPrince853Integrator25.getMaxStep();
        dormandPrince853Integrator25.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator25.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler39);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(stepHandler27);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str35, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler39);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        dormandPrince853Integrator6.setInitialStepSize((double) 10L);
        double double18 = dormandPrince853Integrator6.getMaxStep();
        dormandPrince853Integrator6.setSafety(2.8284271247461903d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) 10.0f, (double) 8, (double) 8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 10.0f, (double) 100.0f, (double) (byte) -1);
        double double10 = dormandPrince853Integrator9.getCurrentStepStart();
        dormandPrince853Integrator9.setInitialStepSize(10.0d);
        org.apache.commons.math.ode.StepHandler stepHandler13 = dormandPrince853Integrator9.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler13);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(stepHandler13);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        double[] doubleArray2 = null;
        double[] doubleArray5 = null;
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray5, doubleArray11);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 10, doubleArray2, doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getMaxGrowth();
        dormandPrince853Integrator10.setSafety(31.622776601683793d);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator10.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 10, (double) 10.0f, (double) 100.0f, (double) (byte) -1);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth(59.16079783099616d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double double44 = dormandPrince853Integrator43.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator43.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction46, (double) 0, (double) 10, (int) '4');
        double double51 = dormandPrince853Integrator43.getMinReduction();
        double double52 = dormandPrince853Integrator43.getMinReduction();
        double[] doubleArray57 = new double[] { (-1.0d), 0L };
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray57, doubleArray58);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator59.getStepHandler();
        double double61 = dormandPrince853Integrator59.getMaxStep();
        double[] doubleArray64 = null;
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray64, doubleArray70);
        dormandPrince853Integrator72.setMinReduction((double) (byte) 0);
        java.lang.String str75 = dormandPrince853Integrator72.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler81 = dormandPrince853Integrator80.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator80.getStepHandler();
        dormandPrince853Integrator72.setStepHandler(stepHandler82);
        dormandPrince853Integrator59.setStepHandler(stepHandler82);
        dormandPrince853Integrator43.setStepHandler(stepHandler82);
        dormandPrince853Integrator4.setStepHandler(stepHandler82);
        double double87 = dormandPrince853Integrator4.getMaxGrowth();
        double double88 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setSafety((double) (short) 10);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.2d + "'", double51 == 0.2d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.2d + "'", double52 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler81);
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 10.0d + "'", double87 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        dormandPrince853Integrator10.setSafety((double) 100);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction22 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction22, 2.5298221281347035d, 10.0d, (int) '#');
        java.lang.Class<?> wildcardClass27 = dormandPrince853Integrator10.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (-1.0d), (double) (short) -1, (double) (short) 10);
        int int5 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((-1.0d));
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) (short) 100);
        double double26 = dormandPrince853Integrator20.getCurrentSignedStepsize();
        double double27 = dormandPrince853Integrator20.getMinReduction();
        double double28 = dormandPrince853Integrator20.getMinStep();
        double double29 = dormandPrince853Integrator20.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.2d + "'", double27 == 0.2d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.2d + "'", double29 == 0.2d);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0.0f, 31.144823004794873d, (double) 100, (double) 'a');
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator56.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction58, (double) 100, (double) (short) 1, 1);
        double double63 = dormandPrince853Integrator56.getMinReduction();
        double double64 = dormandPrince853Integrator56.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.2d + "'", double63 == 0.2d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinReduction();
        double double15 = dormandPrince853Integrator6.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize((double) (-1.0f));
        int int19 = dormandPrince853Integrator6.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 1, 8.0d, 22.80350850198276d, (double) 'a');
        dormandPrince853Integrator4.setSafety(0.0d);
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 2.8284271247461903d + "'", double7 == 2.8284271247461903d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.8284271247461903d + "'", double8 == 2.8284271247461903d);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) '4', 52.0d, (double) 0L);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(22.80350850198276d);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, (double) (short) -1, 0.0d, 0.0d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator6.getMaxStep();
        double double17 = dormandPrince853Integrator6.getMinStep();
        double double18 = dormandPrince853Integrator6.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 31.622776601683793d + "'", double15 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) (short) 100);
        double double26 = dormandPrince853Integrator20.getCurrentStepStart();
        dormandPrince853Integrator20.setMaxGrowth(0.0d);
        double double29 = dormandPrince853Integrator20.getCurrentStepStart();
        double double30 = dormandPrince853Integrator20.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.2d + "'", double30 == 0.2d);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, 31.144823004794873d, 31.622776601683793d, 8);
        dormandPrince853Integrator4.setInitialStepSize(2.5298221281347035d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(0.0d);
        double double11 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator56.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction58 = null;
        dormandPrince853Integrator56.addSwitchingFunction(switchingFunction58, (double) 100, (double) (short) 1, 1);
        double double63 = dormandPrince853Integrator56.getMaxStep();
        double double64 = dormandPrince853Integrator56.getSafety();
        double double65 = dormandPrince853Integrator56.getSafety();
        dormandPrince853Integrator56.setInitialStepSize((double) 100.0f);
        dormandPrince853Integrator56.setInitialStepSize(22.80350850198276d);
        dormandPrince853Integrator56.setSafety(31.622776601683793d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.9d + "'", double64 == 0.9d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.9d + "'", double65 == 0.9d);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) 1L);
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        double double9 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) ' ', (double) 'a', (double) (short) 100);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMinReduction((double) ' ');
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        double double16 = dormandPrince853Integrator10.getMaxStep();
        double double17 = dormandPrince853Integrator10.getMinReduction();
        double double18 = dormandPrince853Integrator10.getMaxStep();
        double double19 = dormandPrince853Integrator10.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 32.0d + "'", double17 == 32.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        double double18 = dormandPrince853Integrator6.getSafety();
        dormandPrince853Integrator6.setMaxGrowth((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.9d + "'", double18 == 0.9d);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(59.16079783099616d, 18.708286933869708d, 8.0d, (double) 10.0f);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction14, (double) 1, (double) 0L, (int) 'a');
        double double19 = dormandPrince853Integrator10.getMaxGrowth();
        double double20 = dormandPrince853Integrator10.getSafety();
        double double21 = dormandPrince853Integrator10.getMinReduction();
        dormandPrince853Integrator10.setInitialStepSize(35.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.9d + "'", double20 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        dormandPrince853Integrator56.setInitialStepSize((double) 0.0f);
        double double59 = dormandPrince853Integrator56.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator56.getStepHandler();
        java.lang.String str61 = dormandPrince853Integrator56.getName();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str61, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction((-0.0d));
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 22.80350850198276d + "'", double9 == 22.80350850198276d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinReduction();
        double double15 = dormandPrince853Integrator6.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize((double) (-1.0f));
        dormandPrince853Integrator6.setInitialStepSize(18.708286933869708d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler16);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        double double57 = dormandPrince853Integrator56.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler58 = dormandPrince853Integrator56.getStepHandler();
        dormandPrince853Integrator56.setSafety((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(stepHandler58);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        dormandPrince853Integrator4.setSafety((double) (byte) 100);
        dormandPrince853Integrator4.setMinReduction((double) 8);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, 0.0d, (double) (short) 100, 2.5298221281347035d);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, 52.0d, (double) 0.0f, 47.753019278348006d);
        dormandPrince853Integrator4.setMinReduction(1.4142135623730951d);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        double double8 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setInitialStepSize((double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 8);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler11);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        double[] doubleArray2 = null;
        double[] doubleArray5 = null;
        double[] doubleArray14 = new double[] { (-1.0d), 0L };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray14, doubleArray15);
        double[] doubleArray21 = new double[] { (-1.0d), 0L };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray21, doubleArray22);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray14, doubleArray22);
        double[] doubleArray25 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) ' ', doubleArray14, doubleArray25);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '4', 0.0d, doubleArray5, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 0, (double) (short) 100, doubleArray2, doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 0L, (double) 1, (double) (byte) 0);
        dormandPrince853Integrator4.setMinReduction((double) (short) 0);
        double double7 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double8 = dormandPrince853Integrator4.getMinStep();
        double double9 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 32.0d + "'", double8 == 32.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 32.0d + "'", double9 == 32.0d);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, (double) (byte) 1, 10.0d, (double) 10.0f);
        dormandPrince853Integrator4.setInitialStepSize(31.144823004794873d);
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 100.0f);
        double double10 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.2d + "'", double10 == 0.2d);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMaxGrowth((double) 1L);
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        double double16 = dormandPrince853Integrator4.getMaxStep();
        double double17 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 97.0d + "'", double17 == 97.0d);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMaxGrowth((double) (short) -1);
        int int17 = dormandPrince853Integrator6.getOrder();
        dormandPrince853Integrator6.setMaxGrowth((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler20);
        dormandPrince853Integrator10.setMinReduction((double) 'a');
        double double24 = dormandPrince853Integrator10.getMaxStep();
        double double25 = dormandPrince853Integrator10.getSafety();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9d + "'", double25 == 0.9d);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, 1.4142135623730951d, (double) (short) 100, 0.0d);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        double double14 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        double[] doubleArray8 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray17 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator25 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray17, doubleArray23);
        double[] doubleArray32 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray23, doubleArray32);
        double[] doubleArray36 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray23, doubleArray36);
        double[] doubleArray44 = null;
        double[] doubleArray49 = new double[] { (-1.0d), 0L };
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray44, doubleArray50);
        double[] doubleArray59 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray50, doubleArray59);
        double[] doubleArray63 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray50, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray23, doubleArray63);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray8, doubleArray63);
        double[] doubleArray67 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator(52.0d, (double) 8, doubleArray8, doubleArray67);
        java.lang.String str69 = dormandPrince853Integrator68.getName();
        double double70 = dormandPrince853Integrator68.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler71 = dormandPrince853Integrator68.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str69, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
        org.junit.Assert.assertNotNull(stepHandler71);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        double[] doubleArray29 = null;
        double[] doubleArray34 = new double[] { (-1.0d), 0L };
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray29, doubleArray35);
        double[] doubleArray44 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray35, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray23, doubleArray35);
        double[] doubleArray49 = null;
        double[] doubleArray54 = new double[] { (-1.0d), 0L };
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray49, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', doubleArray35, doubleArray55);
        double[] doubleArray63 = null;
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray63, doubleArray69);
        double[] doubleArray78 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray69, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler85 = dormandPrince853Integrator84.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler86 = dormandPrince853Integrator84.getStepHandler();
        dormandPrince853Integrator79.setStepHandler(stepHandler86);
        dormandPrince853Integrator58.setStepHandler(stepHandler86);
        dormandPrince853Integrator6.setStepHandler(stepHandler86);
        double double90 = dormandPrince853Integrator6.getCurrentStepStart();
        double double91 = dormandPrince853Integrator6.getMinStep();
        double double92 = dormandPrince853Integrator6.getMinReduction();
        int int93 = dormandPrince853Integrator6.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler85);
        org.junit.Assert.assertNotNull(stepHandler86);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.2d + "'", double92 == 0.2d);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 8 + "'", int93 == 8);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        double double10 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction11 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction11, (double) (-1L), (double) (byte) 100, (int) (short) 10);
        dormandPrince853Integrator4.setMinReduction((double) 'a');
        double double18 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction19, (double) 10L, (double) 0, (int) (byte) 0);
        double double24 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMaxGrowth((double) 1L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 0, (double) 10L, (int) '4');
        dormandPrince853Integrator10.setMaxGrowth((double) (byte) 0);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        dormandPrince853Integrator26.setMinReduction(52.0d);
        double[] doubleArray37 = null;
        double[] doubleArray42 = new double[] { (-1.0d), 0L };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray42, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray37, doubleArray43);
        double[] doubleArray52 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray43, doubleArray52);
        double[] doubleArray56 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray43, doubleArray56);
        double[] doubleArray64 = null;
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray64, doubleArray70);
        double[] doubleArray79 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray70, doubleArray79);
        double[] doubleArray83 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray70, doubleArray83);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator85 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray43, doubleArray83);
        dormandPrince853Integrator85.setInitialStepSize((double) 0.0f);
        double double88 = dormandPrince853Integrator85.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler89 = dormandPrince853Integrator85.getStepHandler();
        dormandPrince853Integrator26.setStepHandler(stepHandler89);
        dormandPrince853Integrator10.setStepHandler(stepHandler89);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 10.0d + "'", double88 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler89);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize(1.0d);
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator4.getStepHandler();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction23 = null;
        dormandPrince853Integrator19.addSwitchingFunction(switchingFunction23, (double) 1, (double) 0L, (int) 'a');
        double double28 = dormandPrince853Integrator19.getMaxStep();
        dormandPrince853Integrator19.setMinReduction((double) 10.0f);
        double[] doubleArray35 = new double[] { (-1.0d), 0L };
        double[] doubleArray36 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray35, doubleArray36);
        double double38 = dormandPrince853Integrator37.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator37.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction40 = null;
        dormandPrince853Integrator37.addSwitchingFunction(switchingFunction40, (double) 0, (double) 10, (int) '4');
        double double45 = dormandPrince853Integrator37.getMinStep();
        double double46 = dormandPrince853Integrator37.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction47 = null;
        dormandPrince853Integrator37.addSwitchingFunction(switchingFunction47, (double) (-1L), (double) 8, (int) (byte) 100);
        double[] doubleArray54 = null;
        double[] doubleArray59 = new double[] { (-1.0d), 0L };
        double[] doubleArray60 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator61 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray59, doubleArray60);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray54, doubleArray60);
        double[] doubleArray67 = new double[] { (-1.0d), 0L };
        double[] doubleArray68 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray67, doubleArray68);
        org.apache.commons.math.ode.StepHandler stepHandler70 = dormandPrince853Integrator69.getStepHandler();
        dormandPrince853Integrator62.setStepHandler(stepHandler70);
        dormandPrince853Integrator37.setStepHandler(stepHandler70);
        dormandPrince853Integrator19.setStepHandler(stepHandler70);
        dormandPrince853Integrator4.setStepHandler(stepHandler70);
        double double75 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(stepHandler39);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
        org.junit.Assert.assertNotNull(stepHandler70);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        double double21 = dormandPrince853Integrator20.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        double double16 = dormandPrince853Integrator6.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction17 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction17, (double) 10, (double) (byte) 0, 0);
        dormandPrince853Integrator6.setMinReduction((double) 100.0f);
        double double24 = dormandPrince853Integrator6.getMinStep();
        double double25 = dormandPrince853Integrator6.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMinReduction((double) ' ');
        dormandPrince853Integrator10.setMaxGrowth((double) ' ');
        double[] doubleArray21 = new double[] { (-1.0d), 0L };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray21, doubleArray22);
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler24);
        double double26 = dormandPrince853Integrator10.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 32.0d + "'", double26 == 32.0d);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator6.getMaxStep();
        double double17 = dormandPrince853Integrator6.getMinStep();
        double double18 = dormandPrince853Integrator6.getMinStep();
        java.lang.String str19 = dormandPrince853Integrator6.getName();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 31.622776601683793d + "'", double15 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction7, (-1.0d), (double) 100, (int) (byte) 10);
        double double12 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray13 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 0, doubleArray11, doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 31.622776601683793d, doubleArray11, doubleArray20);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray43 = new double[] { (-1.0d), 0L };
        double[] doubleArray44 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray43, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray38, doubleArray44);
        double[] doubleArray53 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray44, doubleArray53);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray32, doubleArray44);
        double[] doubleArray62 = new double[] { (-1.0d), 0L };
        double[] doubleArray63 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray62, doubleArray63);
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray62, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray32, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) 100, doubleArray11, doubleArray32);
        java.lang.String str75 = dormandPrince853Integrator74.getName();
        double double76 = dormandPrince853Integrator74.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double9 = dormandPrince853Integrator4.getMinStep();
        double[] doubleArray14 = null;
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray14, doubleArray20);
        double[] doubleArray29 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray20, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator35.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler37 = dormandPrince853Integrator35.getStepHandler();
        dormandPrince853Integrator30.setStepHandler(stepHandler37);
        dormandPrince853Integrator4.setStepHandler(stepHandler37);
        double double40 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMinReduction(1.0d);
        double[] doubleArray47 = new double[] { (-1.0d), 0L };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray47, doubleArray48);
        double double50 = dormandPrince853Integrator49.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler51 = dormandPrince853Integrator49.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction52 = null;
        dormandPrince853Integrator49.addSwitchingFunction(switchingFunction52, (double) 0, (double) 10, (int) '4');
        double double57 = dormandPrince853Integrator49.getCurrentSignedStepsize();
        dormandPrince853Integrator49.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator49.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator49.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler62 = dormandPrince853Integrator49.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler62);
        double double64 = dormandPrince853Integrator4.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler65 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler36);
        org.junit.Assert.assertNotNull(stepHandler37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.9d + "'", double40 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(stepHandler51);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 31.622776601683793d + "'", double57 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertNotNull(stepHandler62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler65);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        int int32 = dormandPrince853Integrator6.getOrder();
        double double33 = dormandPrince853Integrator6.getCurrentStepStart();
        double double34 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setMaxGrowth((double) '4');
        double double37 = dormandPrince853Integrator6.getMinStep();
        int int38 = dormandPrince853Integrator6.getOrder();
        double double39 = dormandPrince853Integrator6.getCurrentStepStart();
        double double40 = dormandPrince853Integrator6.getMaxGrowth();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double46 = dormandPrince853Integrator45.getMinReduction();
        double double47 = dormandPrince853Integrator45.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction48 = null;
        dormandPrince853Integrator45.addSwitchingFunction(switchingFunction48, (double) (byte) 100, (double) 0.0f, (int) '#');
        dormandPrince853Integrator45.setSafety((double) 10L);
        org.apache.commons.math.ode.StepHandler stepHandler55 = dormandPrince853Integrator45.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler55);
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.2d + "'", double46 == 0.2d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.9d + "'", double47 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler55);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMaxGrowth((double) 1L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 0, (double) 10L, (int) '4');
        double double20 = dormandPrince853Integrator10.getMaxGrowth();
        java.lang.Class<?> wildcardClass21 = dormandPrince853Integrator10.getClass();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray9, doubleArray21);
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), 0L };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray39, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray9, doubleArray39);
        double double51 = dormandPrince853Integrator50.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator50.getStepHandler();
        double double53 = dormandPrince853Integrator50.getSafety();
        dormandPrince853Integrator50.setMaxGrowth(97.0d);
        dormandPrince853Integrator50.setSafety((double) (byte) 100);
        java.lang.String str58 = dormandPrince853Integrator50.getName();
        double double59 = dormandPrince853Integrator50.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.2d + "'", double51 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.9d + "'", double53 == 0.9d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str58, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double double11 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setSafety(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator10.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler14);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        java.lang.String str12 = dormandPrince853Integrator4.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction13 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction13, Double.NaN, (double) (short) -1, (int) (short) -1);
        double double18 = dormandPrince853Integrator4.getMaxStep();
        double double19 = dormandPrince853Integrator4.getMaxStep();
        dormandPrince853Integrator4.setSafety((double) (short) 1);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str12, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setMinReduction((double) 10L);
        double double18 = dormandPrince853Integrator6.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(52.0d);
        double double22 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double23 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 31.622776601683793d + "'", double22 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        dormandPrince853Integrator20.setSafety((double) (short) 100);
        dormandPrince853Integrator20.setMinReduction((double) '#');
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 52.0d, (double) (byte) -1, (int) (short) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction33 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction33, (double) (short) 100, (double) (byte) 100, 0);
        double double38 = dormandPrince853Integrator20.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        double double15 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction16, (double) (byte) 100, (double) 100, 0);
        double double21 = dormandPrince853Integrator10.getMinReduction();
        double double22 = dormandPrince853Integrator10.getSafety();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        dormandPrince853Integrator27.setInitialStepSize(0.0d);
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler30);
        dormandPrince853Integrator10.setInitialStepSize((-0.0d));
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator10.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.9d + "'", double15 == 0.9d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertNotNull(stepHandler34);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 0.0f, (double) (byte) -1, (-1));
        dormandPrince853Integrator4.setMaxGrowth(Double.NaN);
        java.lang.String str15 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.5298221281347035d, (double) 100, (double) (short) 100, (double) (short) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 15.905414575341013d + "'", double5 == 15.905414575341013d);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        java.lang.String str14 = dormandPrince853Integrator10.getName();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 10.0f, (double) (short) 1, (int) 'a');
        dormandPrince853Integrator10.setMinReduction((double) 10.0f);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 100);
        java.lang.String str24 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction25 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction25, (double) 10, (double) (byte) 0, (int) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 10, (double) 100L, (double) (-1.0f));
        int int5 = dormandPrince853Integrator4.getOrder();
        double double6 = dormandPrince853Integrator4.getMinReduction();
        double double7 = dormandPrince853Integrator4.getSafety();
        double double8 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2d + "'", double6 == 0.2d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9d + "'", double7 == 0.9d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(1.0d);
        java.lang.String str10 = dormandPrince853Integrator6.getName();
        double double11 = dormandPrince853Integrator6.getMinStep();
        int int12 = dormandPrince853Integrator6.getOrder();
        double double13 = dormandPrince853Integrator6.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setSafety((double) (short) 0);
        java.lang.String str17 = dormandPrince853Integrator6.getName();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler19 = null;
        dormandPrince853Integrator6.setStepHandler(stepHandler19);
        double double21 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.0d, (double) (short) 100, 100.0d, (double) 8);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        dormandPrince853Integrator4.setMaxGrowth(2.5298221281347035d);
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator4.getStepHandler();
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        dormandPrince853Integrator23.setMinReduction((double) (byte) 0);
        java.lang.String str26 = dormandPrince853Integrator23.getName();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction27 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction27, (double) 1, (double) 0L, (int) 'a');
        double double32 = dormandPrince853Integrator23.getMaxStep();
        dormandPrince853Integrator23.setMinReduction((double) 10.0f);
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double double42 = dormandPrince853Integrator41.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler43 = dormandPrince853Integrator41.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction44 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction44, (double) 0, (double) 10, (int) '4');
        double double49 = dormandPrince853Integrator41.getMinStep();
        double double50 = dormandPrince853Integrator41.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction51 = null;
        dormandPrince853Integrator41.addSwitchingFunction(switchingFunction51, (double) (-1L), (double) 8, (int) (byte) 100);
        double[] doubleArray58 = null;
        double[] doubleArray63 = new double[] { (-1.0d), 0L };
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray63, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray58, doubleArray64);
        double[] doubleArray71 = new double[] { (-1.0d), 0L };
        double[] doubleArray72 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray71, doubleArray72);
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator73.getStepHandler();
        dormandPrince853Integrator66.setStepHandler(stepHandler74);
        dormandPrince853Integrator41.setStepHandler(stepHandler74);
        dormandPrince853Integrator23.setStepHandler(stepHandler74);
        dormandPrince853Integrator4.setStepHandler(stepHandler74);
        double double79 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler80 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler12);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(stepHandler43);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
        org.junit.Assert.assertNotNull(stepHandler74);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.9d + "'", double79 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler80);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMaxStep();
        double double15 = dormandPrince853Integrator10.getCurrentStepStart();
        dormandPrince853Integrator10.setMaxGrowth(0.0d);
        dormandPrince853Integrator10.setSafety((double) 0L);
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator10.getStepHandler();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(stepHandler20);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) 1L);
        double double8 = dormandPrince853Integrator4.getMaxStep();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        double double14 = dormandPrince853Integrator10.getCurrentStepStart();
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        int int16 = dormandPrince853Integrator10.getOrder();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        double double16 = dormandPrince853Integrator6.getMinStep();
        double double17 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double23 = dormandPrince853Integrator22.getSafety();
        int int24 = dormandPrince853Integrator22.getOrder();
        dormandPrince853Integrator22.setMaxGrowth((double) 100L);
        dormandPrince853Integrator22.setMaxGrowth((double) 10L);
        double[] doubleArray33 = null;
        double[] doubleArray38 = new double[] { (-1.0d), 0L };
        double[] doubleArray39 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray38, doubleArray39);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray33, doubleArray39);
        double[] doubleArray48 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray39, doubleArray48);
        dormandPrince853Integrator49.setMaxGrowth((double) (byte) 10);
        double double52 = dormandPrince853Integrator49.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler53 = dormandPrince853Integrator49.getStepHandler();
        dormandPrince853Integrator22.setStepHandler(stepHandler53);
        dormandPrince853Integrator22.setInitialStepSize((double) 1.0f);
        double[] doubleArray59 = null;
        double[] doubleArray64 = new double[] { (-1.0d), 0L };
        double[] doubleArray65 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray64, doubleArray65);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator67 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray59, doubleArray65);
        dormandPrince853Integrator67.setMinReduction((double) 100);
        dormandPrince853Integrator67.setMaxGrowth((double) 1L);
        double double72 = dormandPrince853Integrator67.getMinStep();
        int int73 = dormandPrince853Integrator67.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler74 = dormandPrince853Integrator67.getStepHandler();
        dormandPrince853Integrator22.setStepHandler(stepHandler74);
        dormandPrince853Integrator6.setStepHandler(stepHandler74);
        dormandPrince853Integrator6.setMinReduction(97.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 31.622776601683793d + "'", double17 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9d + "'", double23 == 0.9d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler53);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(stepHandler74);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, (double) 10L, (double) 10, Double.NaN);
        dormandPrince853Integrator4.setInitialStepSize((double) 0);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, (double) 1.0f, (double) 10L, (int) (byte) 0);
        double[] doubleArray14 = null;
        double[] doubleArray19 = new double[] { (-1.0d), 0L };
        double[] doubleArray20 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray19, doubleArray20);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray14, doubleArray20);
        double[] doubleArray27 = new double[] { (-1.0d), 0L };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray27, doubleArray28);
        org.apache.commons.math.ode.StepHandler stepHandler30 = dormandPrince853Integrator29.getStepHandler();
        dormandPrince853Integrator22.setStepHandler(stepHandler30);
        dormandPrince853Integrator22.setSafety((double) 100);
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator22.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator22.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler36 = dormandPrince853Integrator22.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler36);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(stepHandler30);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertNotNull(stepHandler36);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, 1.4142135623730951d, 10.0d, (double) 10L);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 32.0d, (double) ' ', (-1));
        double double33 = dormandPrince853Integrator20.getCurrentStepStart();
        double double34 = dormandPrince853Integrator20.getMaxGrowth();
        double double35 = dormandPrince853Integrator20.getSafety();
        java.lang.String str36 = dormandPrince853Integrator20.getName();
        dormandPrince853Integrator20.setSafety((double) 100);
        dormandPrince853Integrator20.setSafety((double) 1L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100);
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double10 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double11 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0L, 52.0d, (double) ' ', (double) (byte) 0);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray9, doubleArray21);
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double[] doubleArray46 = new double[] { (-1.0d), 0L };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray39, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray9, doubleArray39);
        double double51 = dormandPrince853Integrator50.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler52 = dormandPrince853Integrator50.getStepHandler();
        double double53 = dormandPrince853Integrator50.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction54 = null;
        dormandPrince853Integrator50.addSwitchingFunction(switchingFunction54, 0.2d, (double) 1L, (int) (byte) 1);
        dormandPrince853Integrator50.setMaxGrowth((double) 10L);
        dormandPrince853Integrator50.setMinReduction(22.80350850198276d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.2d + "'", double51 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.9d + "'", double53 == 0.9d);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray29 = new double[] { (-1.0d), 0L };
        double[] doubleArray30 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray29, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) ' ', doubleArray14, doubleArray30);
        double[] doubleArray39 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray48 = null;
        double[] doubleArray53 = new double[] { (-1.0d), 0L };
        double[] doubleArray54 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray53, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray48, doubleArray54);
        double[] doubleArray63 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray54, doubleArray63);
        double[] doubleArray67 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator68 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray54, doubleArray67);
        double[] doubleArray75 = null;
        double[] doubleArray80 = new double[] { (-1.0d), 0L };
        double[] doubleArray81 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator82 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray80, doubleArray81);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray75, doubleArray81);
        double[] doubleArray90 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray81, doubleArray90);
        double[] doubleArray94 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator95 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray81, doubleArray94);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator96 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray54, doubleArray94);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator97 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray39, doubleArray94);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator98 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (short) 100, doubleArray14, doubleArray94);
        double double99 = dormandPrince853Integrator98.getSafety();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.9d + "'", double99 == 0.9d);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        dormandPrince853Integrator56.setInitialStepSize((double) 0.0f);
        double double59 = dormandPrince853Integrator56.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator56.getStepHandler();
        double double61 = dormandPrince853Integrator56.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.2d + "'", double61 == 0.2d);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction16, (double) (-1L), (double) 8, (int) (byte) 100);
        double double21 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double22 = dormandPrince853Integrator6.getMaxGrowth();
        java.lang.String str23 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setMinReduction((-0.0d));
        int int26 = dormandPrince853Integrator6.getOrder();
        dormandPrince853Integrator6.setInitialStepSize((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 31.622776601683793d + "'", double21 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str23, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator6.getName();
        double double16 = dormandPrince853Integrator6.getCurrentStepStart();
        double[] doubleArray21 = new double[] { (-1.0d), 0L };
        double[] doubleArray22 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray21, doubleArray22);
        double double24 = dormandPrince853Integrator23.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator23.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction26 = null;
        dormandPrince853Integrator23.addSwitchingFunction(switchingFunction26, (double) 0, (double) 10, (int) '4');
        double double31 = dormandPrince853Integrator23.getCurrentSignedStepsize();
        dormandPrince853Integrator23.setMinReduction((double) 10.0f);
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator23.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator23.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler35);
        double double37 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 31.622776601683793d + "'", double31 == 31.622776601683793d);
        org.junit.Assert.assertNotNull(stepHandler34);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        double[] doubleArray12 = null;
        double[] doubleArray17 = new double[] { (-1.0d), 0L };
        double[] doubleArray18 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray17, doubleArray18);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray12, doubleArray18);
        double[] doubleArray27 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray18, doubleArray27);
        dormandPrince853Integrator28.setMaxGrowth((double) (byte) 10);
        double double31 = dormandPrince853Integrator28.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler32 = dormandPrince853Integrator28.getStepHandler();
        double[] doubleArray37 = null;
        double[] doubleArray42 = new double[] { (-1.0d), 0L };
        double[] doubleArray43 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray42, doubleArray43);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray37, doubleArray43);
        double[] doubleArray52 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray43, doubleArray52);
        dormandPrince853Integrator53.setMaxGrowth((double) (byte) 10);
        double double56 = dormandPrince853Integrator53.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator53.getStepHandler();
        dormandPrince853Integrator28.setStepHandler(stepHandler57);
        dormandPrince853Integrator28.setMaxGrowth(100.0d);
        org.apache.commons.math.ode.StepHandler stepHandler61 = dormandPrince853Integrator28.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler61);
        java.lang.Class<?> wildcardClass63 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler32);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertNotNull(stepHandler61);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        dormandPrince853Integrator56.setInitialStepSize((double) 0.0f);
        double double59 = dormandPrince853Integrator56.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator56.getStepHandler();
        double double61 = dormandPrince853Integrator56.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler62 = dormandPrince853Integrator56.getStepHandler();
        double double63 = dormandPrince853Integrator56.getMaxGrowth();
        int int64 = dormandPrince853Integrator56.getOrder();
        dormandPrince853Integrator56.setMaxGrowth((double) 100);
        double double67 = dormandPrince853Integrator56.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8 + "'", int64 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler20);
        double double22 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setInitialStepSize((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        int int20 = dormandPrince853Integrator10.getOrder();
        dormandPrince853Integrator10.setInitialStepSize(100.0d);
        dormandPrince853Integrator10.setMaxGrowth((double) 1L);
        double double25 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        int int26 = dormandPrince853Integrator10.getOrder();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        dormandPrince853Integrator6.setSafety((double) (short) 0);
        dormandPrince853Integrator6.setMinReduction((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        dormandPrince853Integrator16.setMinReduction((double) (byte) 0);
        java.lang.String str19 = dormandPrince853Integrator16.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler25 = dormandPrince853Integrator24.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler26 = dormandPrince853Integrator24.getStepHandler();
        dormandPrince853Integrator16.setStepHandler(stepHandler26);
        dormandPrince853Integrator4.setStepHandler(stepHandler26);
        double double29 = dormandPrince853Integrator4.getMaxGrowth();
        double double30 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction31, (double) 100.0f, (double) (-1.0f), (int) (short) 100);
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str19, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler25);
        org.junit.Assert.assertNotNull(stepHandler26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) 1.0f, 2.8284271247461903d, 32.0d);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, 0.2d, (double) '#', (double) 1);
        org.apache.commons.math.ode.StepHandler stepHandler12 = dormandPrince853Integrator11.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler12);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler12);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.4142135623730951d, (-1.0d), 0.2d, (double) 8);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        double[] doubleArray15 = new double[] { (-1.0d), 0L };
        double[] doubleArray16 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator17 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray15, doubleArray16);
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator17.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler18);
        int int20 = dormandPrince853Integrator10.getOrder();
        dormandPrince853Integrator10.setInitialStepSize(100.0d);
        dormandPrince853Integrator10.setMaxGrowth((double) 1L);
        double double25 = dormandPrince853Integrator10.getCurrentSignedStepsize();
        dormandPrince853Integrator10.setSafety((double) (short) 1);
        double double28 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setInitialStepSize((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray10, doubleArray21);
        double[] doubleArray31 = new double[] { 31.622776601683793d, (byte) 10, 0.0d, 100.0f, 'a', (short) 1 };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, 0.0d, doubleArray21, doubleArray31);
        double[] doubleArray39 = new double[] { (-1.0d), 0L };
        double[] doubleArray40 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator41 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray39, doubleArray40);
        double[] doubleArray46 = null;
        double[] doubleArray51 = new double[] { (-1.0d), 0L };
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray51, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray46, doubleArray52);
        double[] doubleArray61 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator62 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray52, doubleArray61);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray40, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) '#', doubleArray31, doubleArray40);
        double double65 = dormandPrince853Integrator64.getMinReduction();
        java.lang.String str66 = dormandPrince853Integrator64.getName();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[31.622776601683793, 10.0, 0.0, 100.0, 97.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.2d + "'", double65 == 0.2d);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str66, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMaxGrowth();
        double double15 = dormandPrince853Integrator10.getMaxGrowth();
        dormandPrince853Integrator10.setMaxGrowth((double) (short) 1);
        double double18 = dormandPrince853Integrator10.getMaxStep();
        double double19 = dormandPrince853Integrator10.getMinStep();
        dormandPrince853Integrator10.setSafety((double) 1);
        dormandPrince853Integrator10.setMaxGrowth(0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100, (double) (-1.0f), 35.0d, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.5298221281347035d, (double) '#', 35.0d, 47.753019278348006d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction5 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction5, 32.0d, (double) 0L, (int) (short) 10);
        dormandPrince853Integrator4.setMinReduction(31.144823004794873d);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) (-1.0f), (double) 1, 0.9d);
        dormandPrince853Integrator4.setMinReduction((double) 10L);
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        double double14 = dormandPrince853Integrator13.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler15 = dormandPrince853Integrator13.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler15);
        double double17 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(stepHandler15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        double double57 = dormandPrince853Integrator56.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler58 = dormandPrince853Integrator56.getStepHandler();
        dormandPrince853Integrator56.setInitialStepSize(59.16079783099616d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(stepHandler58);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) '4', 100.0d, (int) (byte) 10);
        double double19 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 22.80350850198276d + "'", double19 == 22.80350850198276d);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(2.5298221281347035d, (double) '#', 35.0d, 47.753019278348006d);
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        java.lang.Class<?> wildcardClass6 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 10.0f, (double) (-1.0f), 17.647895909936366d);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction39 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction39, (-1.0d), (double) 'a', (int) (byte) 1);
        int int44 = dormandPrince853Integrator4.getOrder();
        double double45 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double46 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 22.80350850198276d + "'", double45 == 22.80350850198276d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 22.80350850198276d + "'", double46 == 22.80350850198276d);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', 1.0d, (double) (-1.0f));
        dormandPrince853Integrator4.setInitialStepSize((double) 10L);
        double double7 = dormandPrince853Integrator4.getMaxStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        java.lang.String str13 = dormandPrince853Integrator12.getName();
        double double14 = dormandPrince853Integrator12.getCurrentStepStart();
        int int15 = dormandPrince853Integrator12.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler16 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler16);
        dormandPrince853Integrator4.setMaxGrowth((double) '4');
        double double20 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(stepHandler16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), 10.0d, (double) 100.0f, (double) 10.0f);
        double double5 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth((double) 8);
        dormandPrince853Integrator4.setMinReduction(0.2d);
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator4.getStepHandler();
        int int11 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator32 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray9, doubleArray21);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator44 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', doubleArray21, doubleArray41);
        double[] doubleArray49 = null;
        double[] doubleArray54 = new double[] { (-1.0d), 0L };
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray49, doubleArray55);
        double[] doubleArray64 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray55, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler71 = dormandPrince853Integrator70.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler72 = dormandPrince853Integrator70.getStepHandler();
        dormandPrince853Integrator65.setStepHandler(stepHandler72);
        dormandPrince853Integrator44.setStepHandler(stepHandler72);
        double double75 = dormandPrince853Integrator44.getSafety();
        dormandPrince853Integrator44.setMinReduction((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler71);
        org.junit.Assert.assertNotNull(stepHandler72);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.9d + "'", double75 == 0.9d);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) (short) 100, 31.622776601683793d, 0.2d);
        dormandPrince853Integrator4.setMaxGrowth((double) (short) 100);
        double double7 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.2d, (double) (short) 10, 0.0d, Double.NaN);
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMinStep();
        dormandPrince853Integrator4.setMaxGrowth(1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4142135623730951d + "'", double6 == 1.4142135623730951d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setInitialStepSize((double) (byte) 0);
        java.lang.Class<?> wildcardClass8 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        double[] doubleArray10 = new double[] { (-1.0d), 0L };
        double[] doubleArray11 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray10, doubleArray11);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray10, doubleArray21);
        double[] doubleArray27 = null;
        double[] doubleArray32 = null;
        double[] doubleArray37 = new double[] { (-1.0d), 0L };
        double[] doubleArray38 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray37, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray32, doubleArray38);
        double[] doubleArray47 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray38, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) (-1L), doubleArray27, doubleArray38);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator50 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1.0f), (double) (byte) 100, doubleArray10, doubleArray38);
        double[] doubleArray55 = new double[] { (-1.0d), 0L };
        double[] doubleArray56 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray55, doubleArray56);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) (byte) -1, doubleArray10, doubleArray55);
        double double59 = dormandPrince853Integrator58.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        double[] doubleArray41 = new double[] { (-1.0d), 0L };
        double[] doubleArray42 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray41, doubleArray42);
        double double44 = dormandPrince853Integrator43.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator43.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction46 = null;
        dormandPrince853Integrator43.addSwitchingFunction(switchingFunction46, (double) 0, (double) 10, (int) '4');
        double double51 = dormandPrince853Integrator43.getMinReduction();
        double double52 = dormandPrince853Integrator43.getMinReduction();
        double[] doubleArray57 = new double[] { (-1.0d), 0L };
        double[] doubleArray58 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator59 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray57, doubleArray58);
        org.apache.commons.math.ode.StepHandler stepHandler60 = dormandPrince853Integrator59.getStepHandler();
        double double61 = dormandPrince853Integrator59.getMaxStep();
        double[] doubleArray64 = null;
        double[] doubleArray69 = new double[] { (-1.0d), 0L };
        double[] doubleArray70 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray69, doubleArray70);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray64, doubleArray70);
        dormandPrince853Integrator72.setMinReduction((double) (byte) 0);
        java.lang.String str75 = dormandPrince853Integrator72.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler81 = dormandPrince853Integrator80.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler82 = dormandPrince853Integrator80.getStepHandler();
        dormandPrince853Integrator72.setStepHandler(stepHandler82);
        dormandPrince853Integrator59.setStepHandler(stepHandler82);
        dormandPrince853Integrator43.setStepHandler(stepHandler82);
        dormandPrince853Integrator4.setStepHandler(stepHandler82);
        double double87 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double88 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.2d + "'", double51 == 0.2d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.2d + "'", double52 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]");
        org.junit.Assert.assertNotNull(stepHandler60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str75, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler81);
        org.junit.Assert.assertNotNull(stepHandler82);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 22.80350850198276d + "'", double87 == 22.80350850198276d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 22.80350850198276d + "'", double88 == 22.80350850198276d);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        int int37 = dormandPrince853Integrator4.getOrder();
        double double38 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        double double41 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.9d + "'", double38 == 0.9d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        double double24 = dormandPrince853Integrator20.getMinStep();
        int int25 = dormandPrince853Integrator20.getOrder();
        java.lang.String str26 = dormandPrince853Integrator20.getName();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        double double8 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth(32.0d);
        double double12 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(stepHandler9);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        java.lang.String str16 = dormandPrince853Integrator6.getName();
        double double17 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth(10.0d);
        double double21 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setInitialStepSize(0.0d);
        double double24 = dormandPrince853Integrator6.getSafety();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2d + "'", double21 == 0.2d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.9d + "'", double24 == 0.9d);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = null;
        double[] doubleArray40 = new double[] { (-1.0d), 0L };
        double[] doubleArray41 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator42 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray40, doubleArray41);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray35, doubleArray41);
        double[] doubleArray50 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray41, doubleArray50);
        double[] doubleArray54 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray41, doubleArray54);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray14, doubleArray54);
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator56.getStepHandler();
        double double58 = dormandPrince853Integrator56.getSafety();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9d + "'", double58 == 0.9d);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(1.0d);
        java.lang.String str10 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setMaxGrowth((-1.0d));
        dormandPrince853Integrator6.setMinReduction(100.0d);
        double double15 = dormandPrince853Integrator6.getMinStep();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) 'a', 1.0d, (double) (byte) 1);
        double double5 = dormandPrince853Integrator4.getSafety();
        java.lang.Class<?> wildcardClass6 = dormandPrince853Integrator4.getClass();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '#', 0.0d, 0.0d, 32.0d);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) ' ', (double) 10L, (double) (byte) 1);
        int int5 = dormandPrince853Integrator4.getOrder();
        int int6 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction7 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction7, 59.16079783099616d, (-0.0d), 10);
        double double12 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        int int32 = dormandPrince853Integrator6.getOrder();
        double double33 = dormandPrince853Integrator6.getMinStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction34 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction34, (double) (short) 0, (double) (byte) -1, 0);
        double double39 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) '#', (double) (byte) 0, (double) 8);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) '4', 100.0d, (int) (byte) 10);
        dormandPrince853Integrator4.setSafety((double) (byte) 0);
        double double21 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.apache.commons.math.ode.StepHandler stepHandler22 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 22.80350850198276d + "'", double21 == 22.80350850198276d);
        org.junit.Assert.assertNotNull(stepHandler22);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(10.0d, (double) 0.0f, (double) 100L, 0.2d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        double double6 = dormandPrince853Integrator4.getMaxGrowth();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, 2.5298221281347035d, (double) (byte) 0, 1);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        java.lang.String str5 = dormandPrince853Integrator4.getName();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str5, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        double double7 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction8 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction8, (double) 0.0f, (double) (byte) -1, (-1));
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        java.lang.String str14 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str14, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        double double8 = dormandPrince853Integrator6.getMaxStep();
        double[] doubleArray11 = null;
        double[] doubleArray16 = new double[] { (-1.0d), 0L };
        double[] doubleArray17 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray16, doubleArray17);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator19 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray11, doubleArray17);
        dormandPrince853Integrator19.setMinReduction((double) (byte) 0);
        java.lang.String str22 = dormandPrince853Integrator19.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator27.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler29 = dormandPrince853Integrator27.getStepHandler();
        dormandPrince853Integrator19.setStepHandler(stepHandler29);
        dormandPrince853Integrator6.setStepHandler(stepHandler29);
        int int32 = dormandPrince853Integrator6.getOrder();
        double double33 = dormandPrince853Integrator6.getCurrentStepStart();
        java.lang.String str34 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setSafety((double) 'a');
        dormandPrince853Integrator6.setMinReduction(0.0d);
        dormandPrince853Integrator6.setMinReduction((double) (short) 100);
        dormandPrince853Integrator6.setInitialStepSize((double) '4');
        double double43 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str22, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertNotNull(stepHandler29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str34, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 31.622776601683793d + "'", double43 == 31.622776601683793d);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, 1.0d, (double) 100.0f, 97.0d);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9.848857801796104d + "'", double5 == 9.848857801796104d);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 10.0f, (double) (short) 1, (int) 'a');
        double double20 = dormandPrince853Integrator10.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction21, (double) (byte) 1, 18.708286933869708d, (int) '#');
        double double26 = dormandPrince853Integrator10.getSafety();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        double double13 = dormandPrince853Integrator10.getSafety();
        dormandPrince853Integrator10.setMaxGrowth((double) (-1));
        dormandPrince853Integrator10.setMaxGrowth((double) (-1L));
        double double18 = dormandPrince853Integrator10.getMaxGrowth();
        double double19 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator10.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction21 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction21, (double) (byte) 100, 0.0d, (int) '4');
        dormandPrince853Integrator10.setMaxGrowth((double) '#');
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.9d + "'", double13 == 0.9d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1.0d) + "'", double18 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler20);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), (double) ' ', 97.0d, (double) (short) 1);
        int int5 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction16, (double) (-1L), (double) 8, (int) (byte) 100);
        dormandPrince853Integrator6.setInitialStepSize((double) 10.0f);
        double double23 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 31.622776601683793d + "'", double23 == 31.622776601683793d);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) 0.0f, (double) (-1.0f), (double) 10);
        double double5 = dormandPrince853Integrator4.getMaxGrowth();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction6 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction6, (double) 100L, (double) ' ', (int) (byte) 0);
        double double11 = dormandPrince853Integrator4.getSafety();
        org.apache.commons.math.ode.FirstOrderDifferentialEquations firstOrderDifferentialEquations12 = null;
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        double[] doubleArray25 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 0, doubleArray23, doubleArray25);
        double[] doubleArray31 = new double[] { (-1.0d), 0L };
        double[] doubleArray32 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator33 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray31, doubleArray32);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 31.622776601683793d, doubleArray23, doubleArray32);
        double[] doubleArray38 = null;
        double[] doubleArray47 = new double[] { (-1.0d), 0L };
        double[] doubleArray48 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray47, doubleArray48);
        double[] doubleArray50 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 0, doubleArray48, doubleArray50);
        double[] doubleArray58 = new double[] { (-1.0d), 0L };
        double[] doubleArray59 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray58, doubleArray59);
        double[] doubleArray63 = null;
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray63, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator72 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray58, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator73 = new org.apache.commons.math.ode.DormandPrince853Integrator(32.0d, 31.144823004794873d, doubleArray48, doubleArray58);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator(1.4142135623730951d, (double) (byte) 10, doubleArray38, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            dormandPrince853Integrator4.integrate(firstOrderDifferentialEquations12, (double) 0, doubleArray23, (double) (-1.0f), doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.9d + "'", double11 == 0.9d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 10, (double) 100L, (double) (-1.0f));
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) '#', (double) (byte) 10, (double) (byte) 10, (double) 10);
        org.apache.commons.math.ode.StepHandler stepHandler11 = dormandPrince853Integrator10.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler11);
        double double13 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertNotNull(stepHandler11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(stepHandler14);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        double[] doubleArray6 = new double[] { (-1.0d), 0L };
        double[] doubleArray7 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator8 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray6, doubleArray7);
        double[] doubleArray9 = null;
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, (double) (short) 0, doubleArray7, doubleArray9);
        double double11 = dormandPrince853Integrator10.getMinReduction();
        dormandPrince853Integrator10.setMaxGrowth(8.0d);
        int int14 = dormandPrince853Integrator10.getOrder();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.2d + "'", double11 == 0.2d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setMaxGrowth((double) 1L);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 0, (double) 10L, (int) '4');
        dormandPrince853Integrator10.setMaxGrowth((double) (byte) 0);
        dormandPrince853Integrator10.setMaxGrowth((double) 0L);
        java.lang.String str24 = dormandPrince853Integrator10.getName();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str24, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 59.16079783099616d, (double) 0L, (double) 100.0f);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double[] doubleArray22 = new double[] { (-1.0d), 0L };
        double[] doubleArray23 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray22, doubleArray23);
        double[] doubleArray29 = null;
        double[] doubleArray34 = new double[] { (-1.0d), 0L };
        double[] doubleArray35 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray34, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray29, doubleArray35);
        double[] doubleArray44 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator45 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray35, doubleArray44);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray23, doubleArray35);
        double[] doubleArray49 = null;
        double[] doubleArray54 = new double[] { (-1.0d), 0L };
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray54, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator57 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray49, doubleArray55);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator58 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) '#', doubleArray35, doubleArray55);
        double[] doubleArray63 = null;
        double[] doubleArray68 = new double[] { (-1.0d), 0L };
        double[] doubleArray69 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator70 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray68, doubleArray69);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator71 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray63, doubleArray69);
        double[] doubleArray78 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray69, doubleArray78);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator84 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler85 = dormandPrince853Integrator84.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler86 = dormandPrince853Integrator84.getStepHandler();
        dormandPrince853Integrator79.setStepHandler(stepHandler86);
        dormandPrince853Integrator58.setStepHandler(stepHandler86);
        dormandPrince853Integrator6.setStepHandler(stepHandler86);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction90 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction90, (double) '#', (double) (byte) 1, (int) ' ');
        double double95 = dormandPrince853Integrator6.getSafety();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(stepHandler85);
        org.junit.Assert.assertNotNull(stepHandler86);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.9d + "'", double95 == 0.9d);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        double double8 = dormandPrince853Integrator6.getSafety();
        dormandPrince853Integrator6.setInitialStepSize(0.0d);
        dormandPrince853Integrator6.setMaxGrowth((double) 10);
        double double13 = dormandPrince853Integrator6.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9d + "'", double8 == 0.9d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, (double) (byte) 10, 100.0d, (double) (short) 10);
        double double5 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety(31.622776601683793d);
        java.lang.String str8 = dormandPrince853Integrator4.getName();
        dormandPrince853Integrator4.setSafety(10.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str8, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) ' ', (double) (short) -1, 97.0d, (double) ' ');
        double double5 = dormandPrince853Integrator4.getMaxStep();
        double double6 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMaxGrowth(2.5298221281347035d);
        double double9 = dormandPrince853Integrator4.getMinReduction();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.2d + "'", double9 == 0.2d);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator4.setMaxGrowth((double) '#');
        int int7 = dormandPrince853Integrator4.getOrder();
        double double8 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction((-0.0d));
        double double11 = dormandPrince853Integrator4.getCurrentStepStart();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) -1, 0.2d, (double) (byte) 1, 1.4142135623730951d);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 10, (double) 100L, (double) (-1.0f));
        double[] doubleArray14 = new double[] { (-1.0d), 0L };
        double[] doubleArray15 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray14, doubleArray15);
        double double17 = dormandPrince853Integrator16.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler18 = dormandPrince853Integrator16.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction19 = null;
        dormandPrince853Integrator16.addSwitchingFunction(switchingFunction19, (double) 0, (double) 10, (int) '4');
        double double24 = dormandPrince853Integrator16.getMinStep();
        double double25 = dormandPrince853Integrator16.getMaxStep();
        java.lang.String str26 = dormandPrince853Integrator16.getName();
        double double27 = dormandPrince853Integrator16.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator16.getStepHandler();
        dormandPrince853Integrator9.setStepHandler(stepHandler28);
        double double30 = dormandPrince853Integrator9.getSafety();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction31 = null;
        dormandPrince853Integrator9.addSwitchingFunction(switchingFunction31, (double) 1, (double) (-1L), (int) (short) 1);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator40 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (-1.0d), (double) (short) -1, (double) (short) 10);
        int int41 = dormandPrince853Integrator40.getOrder();
        double double42 = dormandPrince853Integrator40.getMinStep();
        double double43 = dormandPrince853Integrator40.getMaxGrowth();
        dormandPrince853Integrator40.setMinReduction(0.2d);
        dormandPrince853Integrator40.setMinReduction(31.144823004794873d);
        double[] doubleArray54 = new double[] { (-1.0d), 0L };
        double[] doubleArray55 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray54, doubleArray55);
        double[] doubleArray61 = new double[] { (-1.0d), 0L };
        double[] doubleArray62 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator63 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray61, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray54, doubleArray62);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator69 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) (-1L), (-1.0d), (double) ' ');
        dormandPrince853Integrator69.setInitialStepSize(0.2d);
        dormandPrince853Integrator69.setMinReduction(0.0d);
        java.lang.String str74 = dormandPrince853Integrator69.getName();
        org.apache.commons.math.ode.StepHandler stepHandler75 = dormandPrince853Integrator69.getStepHandler();
        dormandPrince853Integrator64.setStepHandler(stepHandler75);
        dormandPrince853Integrator40.setStepHandler(stepHandler75);
        dormandPrince853Integrator9.setStepHandler(stepHandler75);
        dormandPrince853Integrator4.setStepHandler(stepHandler75);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(stepHandler18);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10.0d + "'", double24 == 10.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str26, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.9d + "'", double30 == 0.9d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str74, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler75);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        double[] doubleArray8 = new double[] { (-1.0d), 0L };
        double[] doubleArray9 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray8, doubleArray9);
        double[] doubleArray13 = null;
        double[] doubleArray18 = new double[] { (-1.0d), 0L };
        double[] doubleArray19 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray18, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray13, doubleArray19);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1, (double) 100, doubleArray8, doubleArray19);
        double[] doubleArray31 = null;
        double[] doubleArray36 = new double[] { (-1.0d), 0L };
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray36, doubleArray37);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator39 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray31, doubleArray37);
        double[] doubleArray46 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator47 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray37, doubleArray46);
        double[] doubleArray50 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray37, doubleArray50);
        double[] doubleArray58 = null;
        double[] doubleArray63 = new double[] { (-1.0d), 0L };
        double[] doubleArray64 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator65 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray63, doubleArray64);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator66 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray58, doubleArray64);
        double[] doubleArray73 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray64, doubleArray73);
        double[] doubleArray77 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray64, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray37, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator80 = new org.apache.commons.math.ode.DormandPrince853Integrator(100.0d, 0.0d, doubleArray8, doubleArray37);
        double double81 = dormandPrince853Integrator80.getMaxStep();
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(6.841052550594828d, 8.0d, 35.0d, 15.905414575341013d);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double16 = dormandPrince853Integrator6.getMaxStep();
        double double17 = dormandPrince853Integrator6.getMinStep();
        double double18 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setMinReduction((double) 0);
        double double21 = dormandPrince853Integrator6.getSafety();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 31.622776601683793d + "'", double15 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.9d + "'", double21 == 0.9d);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        dormandPrince853Integrator6.setMinReduction(Double.NaN);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction12, (double) (-1), 52.0d, (int) 'a');
        double double17 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setInitialStepSize((double) 0.0f);
        double double20 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) 0.0f, (double) (short) 1, (double) 8);
        double double5 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setMinReduction(32.0d);
        int int8 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getMaxStep();
        double double7 = dormandPrince853Integrator4.getMaxGrowth();
        int int8 = dormandPrince853Integrator4.getOrder();
        double double9 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9d + "'", double9 == 0.9d);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinStep();
        double double15 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction16 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction16, (double) (-1L), (double) 8, (int) (byte) 100);
        double[] doubleArray23 = null;
        double[] doubleArray28 = new double[] { (-1.0d), 0L };
        double[] doubleArray29 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray28, doubleArray29);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray23, doubleArray29);
        double[] doubleArray36 = new double[] { (-1.0d), 0L };
        double[] doubleArray37 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator38 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray36, doubleArray37);
        org.apache.commons.math.ode.StepHandler stepHandler39 = dormandPrince853Integrator38.getStepHandler();
        dormandPrince853Integrator31.setStepHandler(stepHandler39);
        dormandPrince853Integrator6.setStepHandler(stepHandler39);
        double double42 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(stepHandler39);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        dormandPrince853Integrator6.setMaxGrowth((double) 0L);
        double double9 = dormandPrince853Integrator6.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler10 = dormandPrince853Integrator6.getStepHandler();
        double double11 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double12 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 31.622776601683793d + "'", double11 == 31.622776601683793d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 31.622776601683793d + "'", double12 == 31.622776601683793d);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 0, (double) 100, (double) 10.0f, (double) (short) 100);
        double double5 = dormandPrince853Integrator4.getMaxStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        double[] doubleArray6 = null;
        double[] doubleArray11 = new double[] { (-1.0d), 0L };
        double[] doubleArray12 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator13 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray11, doubleArray12);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator14 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray6, doubleArray12);
        double[] doubleArray21 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray12, doubleArray21);
        double[] doubleArray27 = new double[] { (-1.0d), 0L };
        double[] doubleArray28 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator29 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray27, doubleArray28);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator30 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 100, (double) ' ', doubleArray12, doubleArray28);
        java.lang.Class<?> wildcardClass31 = dormandPrince853Integrator30.getClass();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        int int6 = dormandPrince853Integrator4.getOrder();
        dormandPrince853Integrator4.setMaxGrowth((double) 100L);
        dormandPrince853Integrator4.setMaxGrowth((double) 10L);
        double[] doubleArray15 = null;
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator23 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray15, doubleArray21);
        double[] doubleArray30 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray21, doubleArray30);
        dormandPrince853Integrator31.setMaxGrowth((double) (byte) 10);
        double double34 = dormandPrince853Integrator31.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler35 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler35);
        dormandPrince853Integrator4.setInitialStepSize((double) 1.0f);
        double[] doubleArray41 = null;
        double[] doubleArray46 = new double[] { (-1.0d), 0L };
        double[] doubleArray47 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator48 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray46, doubleArray47);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator49 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray41, doubleArray47);
        dormandPrince853Integrator49.setMinReduction((double) 100);
        dormandPrince853Integrator49.setMaxGrowth((double) 1L);
        double double54 = dormandPrince853Integrator49.getMinStep();
        int int55 = dormandPrince853Integrator49.getOrder();
        org.apache.commons.math.ode.StepHandler stepHandler56 = dormandPrince853Integrator49.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler56);
        int int58 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler35);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(stepHandler56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler5 = dormandPrince853Integrator4.getStepHandler();
        double double6 = dormandPrince853Integrator4.getCurrentStepStart();
        double double7 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setMinReduction((double) (short) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) 100);
        dormandPrince853Integrator4.setInitialStepSize((double) (short) 10);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction14 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction14, (double) '4', 100.0d, (int) (byte) 10);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator4.getStepHandler();
        double double20 = dormandPrince853Integrator4.getCurrentStepStart();
        double double21 = dormandPrince853Integrator4.getMaxGrowth();
        org.junit.Assert.assertNotNull(stepHandler5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1L), (double) (-1L), 59.16079783099616d, (double) (byte) 0);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setMaxGrowth((double) 10.0f);
        dormandPrince853Integrator6.setMinReduction(Double.NaN);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction12 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction12, (double) (-1), 52.0d, (int) 'a');
        double double17 = dormandPrince853Integrator6.getCurrentStepStart();
        dormandPrince853Integrator6.setInitialStepSize((double) 0.0f);
        int int20 = dormandPrince853Integrator6.getOrder();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        double[] doubleArray8 = null;
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator16 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray8, doubleArray14);
        double[] doubleArray23 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator24 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray14, doubleArray23);
        double[] doubleArray27 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray14, doubleArray27);
        double[] doubleArray35 = new double[] { 10, (-1), (short) -1, 100.0d };
        double[] doubleArray44 = null;
        double[] doubleArray49 = new double[] { (-1.0d), 0L };
        double[] doubleArray50 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator51 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray49, doubleArray50);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator52 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray44, doubleArray50);
        double[] doubleArray59 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator60 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray50, doubleArray59);
        double[] doubleArray63 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator64 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray50, doubleArray63);
        double[] doubleArray71 = null;
        double[] doubleArray76 = new double[] { (-1.0d), 0L };
        double[] doubleArray77 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator78 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray76, doubleArray77);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator79 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray71, doubleArray77);
        double[] doubleArray86 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator87 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray77, doubleArray86);
        double[] doubleArray90 = new double[] { (short) 0, (-1L) };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator91 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, (double) 0.0f, doubleArray77, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator92 = new org.apache.commons.math.ode.DormandPrince853Integrator(Double.NaN, (double) 1L, doubleArray50, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator93 = new org.apache.commons.math.ode.DormandPrince853Integrator((-1.0d), 1.0d, doubleArray35, doubleArray90);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator94 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 1L, (double) 100, doubleArray27, doubleArray35);
        java.lang.String str95 = dormandPrince853Integrator94.getName();
        double double96 = dormandPrince853Integrator94.getCurrentSignedStepsize();
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, -1.0]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str95, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 10.0d + "'", double96 == 10.0d);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 32.0d, (double) ' ', (-1));
        double double33 = dormandPrince853Integrator20.getCurrentStepStart();
        double double34 = dormandPrince853Integrator20.getMaxGrowth();
        double double35 = dormandPrince853Integrator20.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.2d + "'", double35 == 0.2d);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setSafety((double) (short) 0);
        java.lang.String str17 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setInitialStepSize((double) 100);
        double double20 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) 100);
        dormandPrince853Integrator10.setSafety(0.0d);
        java.lang.String str15 = dormandPrince853Integrator10.getName();
        java.lang.String str16 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator21 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double22 = dormandPrince853Integrator21.getCurrentSignedStepsize();
        dormandPrince853Integrator21.setInitialStepSize((double) (byte) 0);
        dormandPrince853Integrator21.setMinReduction((double) (short) 100);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator31 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) 'a', 1.0d, (double) (byte) 1);
        double double32 = dormandPrince853Integrator31.getMaxStep();
        double double33 = dormandPrince853Integrator31.getSafety();
        org.apache.commons.math.ode.StepHandler stepHandler34 = dormandPrince853Integrator31.getStepHandler();
        dormandPrince853Integrator21.setStepHandler(stepHandler34);
        dormandPrince853Integrator10.setStepHandler(stepHandler34);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str16, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 97.0d + "'", double32 == 97.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.9d + "'", double33 == 0.9d);
        org.junit.Assert.assertNotNull(stepHandler34);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator18 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator18.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler20 = dormandPrince853Integrator18.getStepHandler();
        dormandPrince853Integrator10.setStepHandler(stepHandler20);
        double double22 = dormandPrince853Integrator10.getSafety();
        double double23 = dormandPrince853Integrator10.getMaxStep();
        dormandPrince853Integrator10.setMinReduction(35.0d);
        double double26 = dormandPrince853Integrator10.getSafety();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(stepHandler20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9d + "'", double22 == 0.9d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.9d + "'", double26 == 0.9d);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        double[] doubleArray4 = null;
        double[] doubleArray9 = new double[] { (-1.0d), 0L };
        double[] doubleArray10 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator11 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray9, doubleArray10);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray4, doubleArray10);
        double[] doubleArray19 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator20 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray10, doubleArray19);
        dormandPrince853Integrator20.setMaxGrowth((double) (byte) 10);
        double double23 = dormandPrince853Integrator20.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler24 = dormandPrince853Integrator20.getStepHandler();
        int int25 = dormandPrince853Integrator20.getOrder();
        dormandPrince853Integrator20.setSafety((double) (-1.0f));
        org.apache.commons.math.ode.SwitchingFunction switchingFunction28 = null;
        dormandPrince853Integrator20.addSwitchingFunction(switchingFunction28, 32.0d, (double) ' ', (-1));
        double double33 = dormandPrince853Integrator20.getCurrentStepStart();
        double double34 = dormandPrince853Integrator20.getMaxGrowth();
        double double35 = dormandPrince853Integrator20.getCurrentStepStart();
        dormandPrince853Integrator20.setMinReduction((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        double[] doubleArray2 = null;
        double[] doubleArray7 = new double[] { (-1.0d), 0L };
        double[] doubleArray8 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator9 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray7, doubleArray8);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator10 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray2, doubleArray8);
        dormandPrince853Integrator10.setMinReduction((double) (byte) 0);
        java.lang.String str13 = dormandPrince853Integrator10.getName();
        double double14 = dormandPrince853Integrator10.getMinReduction();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction15 = null;
        dormandPrince853Integrator10.addSwitchingFunction(switchingFunction15, (double) 10.0f, (double) (short) 1, (int) 'a');
        dormandPrince853Integrator10.setMinReduction((double) 10.0f);
        double double22 = dormandPrince853Integrator10.getMinReduction();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setMaxGrowth((double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2d + "'", double7 == 0.2d);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10L, 22.80350850198276d, (double) 0L, 1.4142135623730951d);
        double[] doubleArray13 = new double[] { (-1.0d), 0L };
        double[] doubleArray14 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator15 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray13, doubleArray14);
        double[] doubleArray20 = null;
        double[] doubleArray25 = new double[] { (-1.0d), 0L };
        double[] doubleArray26 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator27 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray25, doubleArray26);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator28 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray20, doubleArray26);
        double[] doubleArray35 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator36 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray26, doubleArray35);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator37 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.0d, 52.0d, doubleArray14, doubleArray26);
        double[] doubleArray44 = new double[] { (-1.0d), 0L };
        double[] doubleArray45 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator46 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray44, doubleArray45);
        double[] doubleArray51 = new double[] { (-1.0d), 0L };
        double[] doubleArray52 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator53 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray51, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator54 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, 52.0d, doubleArray44, doubleArray52);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator55 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 100L, (double) (-1L), doubleArray14, doubleArray44);
        double double56 = dormandPrince853Integrator55.getMinReduction();
        org.apache.commons.math.ode.StepHandler stepHandler57 = dormandPrince853Integrator55.getStepHandler();
        double double58 = dormandPrince853Integrator55.getSafety();
        double double59 = dormandPrince853Integrator55.getCurrentStepStart();
        dormandPrince853Integrator55.setInitialStepSize(10.0d);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction62 = null;
        dormandPrince853Integrator55.addSwitchingFunction(switchingFunction62, (double) 8, (double) 100, (int) (byte) 1);
        org.apache.commons.math.ode.StepHandler stepHandler67 = dormandPrince853Integrator55.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler67);
        org.apache.commons.math.ode.SwitchingFunction switchingFunction69 = null;
        dormandPrince853Integrator4.addSwitchingFunction(switchingFunction69, (double) (short) -1, (double) 0L, (int) '#');
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.2d + "'", double56 == 0.2d);
        org.junit.Assert.assertNotNull(stepHandler57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.9d + "'", double58 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(stepHandler67);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((-0.0d), 0.0d, (double) 0L, 0.0d);
        dormandPrince853Integrator4.setMinReduction((double) 1.0f);
        java.lang.String str7 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str7, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (-1.0d), (double) (byte) 1, (double) (byte) 0);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        dormandPrince853Integrator4.setSafety((double) 1L);
        double double8 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler9 = dormandPrince853Integrator4.getStepHandler();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(stepHandler9);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator6.getStepHandler();
        dormandPrince853Integrator6.setInitialStepSize(1.0d);
        java.lang.String str10 = dormandPrince853Integrator6.getName();
        double double11 = dormandPrince853Integrator6.getMinStep();
        dormandPrince853Integrator6.setMaxGrowth(0.2d);
        double double14 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        dormandPrince853Integrator6.setMaxGrowth(1.4142135623730951d);
        dormandPrince853Integrator6.setMinReduction(8.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str10, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 31.622776601683793d + "'", double14 == 31.622776601683793d);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (-1), (double) (byte) 10, (double) 10, (double) 100.0f);
        dormandPrince853Integrator4.setMinReduction(52.0d);
        int int7 = dormandPrince853Integrator4.getOrder();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator12 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double13 = dormandPrince853Integrator12.getMinReduction();
        double double14 = dormandPrince853Integrator12.getSafety();
        double double15 = dormandPrince853Integrator12.getCurrentStepStart();
        double double16 = dormandPrince853Integrator12.getMinStep();
        dormandPrince853Integrator12.setInitialStepSize((double) 100.0f);
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator12.getStepHandler();
        dormandPrince853Integrator4.setStepHandler(stepHandler19);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.2d + "'", double13 == 0.2d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9d + "'", double14 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        org.apache.commons.math.ode.StepHandler stepHandler14 = dormandPrince853Integrator6.getStepHandler();
        double double15 = dormandPrince853Integrator6.getMaxGrowth();
        double double16 = dormandPrince853Integrator6.getMinStep();
        double double17 = dormandPrince853Integrator6.getCurrentSignedStepsize();
        double double18 = dormandPrince853Integrator6.getCurrentStepStart();
        double double19 = dormandPrince853Integrator6.getCurrentStepStart();
        double double20 = dormandPrince853Integrator6.getCurrentStepStart();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertNotNull(stepHandler14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 31.622776601683793d + "'", double17 == 31.622776601683793d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double5 = dormandPrince853Integrator4.getSafety();
        double double6 = dormandPrince853Integrator4.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler7 = dormandPrince853Integrator4.getStepHandler();
        double double8 = dormandPrince853Integrator4.getMinReduction();
        double double9 = dormandPrince853Integrator4.getCurrentSignedStepsize();
        dormandPrince853Integrator4.setSafety(32.0d);
        double double12 = dormandPrince853Integrator4.getMinStep();
        java.lang.String str13 = dormandPrince853Integrator4.getName();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.2d + "'", double8 == 0.2d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 22.80350850198276d + "'", double9 == 22.80350850198276d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str13, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) -1, 59.16079783099616d, 31.144823004794873d, (double) (short) 100);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(97.0d, 52.0d, (double) 0.0f, 47.753019278348006d);
        double double5 = dormandPrince853Integrator4.getSafety();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9d + "'", double5 == 0.9d);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getCurrentStepStart();
        double double15 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setMaxGrowth((double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (short) 1, (double) 0L, (double) 1L, (double) 1);
        double double5 = dormandPrince853Integrator4.getMinReduction();
        double double6 = dormandPrince853Integrator4.getSafety();
        dormandPrince853Integrator4.setSafety((double) 10.0f);
        double double9 = dormandPrince853Integrator4.getCurrentStepStart();
        dormandPrince853Integrator4.setMinReduction(10.0d);
        double double12 = dormandPrince853Integrator4.getMinStep();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.2d + "'", double5 == 0.2d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9d + "'", double6 == 0.9d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator4 = new org.apache.commons.math.ode.DormandPrince853Integrator(0.9d, (double) (short) 100, 31.622776601683793d, 0.2d);
        double double5 = dormandPrince853Integrator4.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler6 = dormandPrince853Integrator4.getStepHandler();
        int int7 = dormandPrince853Integrator4.getOrder();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(stepHandler6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        dormandPrince853Integrator6.setSafety((double) (short) 0);
        java.lang.String str17 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setInitialStepSize(2.5298221281347035d);
        dormandPrince853Integrator6.setSafety(2.8284271247461903d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str17, "Dormand-Prince 8 (5, 3)");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) (short) 10, Double.NaN, (int) (byte) -1);
        double double14 = dormandPrince853Integrator6.getMinReduction();
        java.lang.String str15 = dormandPrince853Integrator6.getName();
        dormandPrince853Integrator6.setMinReduction((double) 10L);
        double double18 = dormandPrince853Integrator6.getMaxGrowth();
        org.apache.commons.math.ode.StepHandler stepHandler19 = dormandPrince853Integrator6.getStepHandler();
        double[] doubleArray24 = new double[] { (-1.0d), 0L };
        double[] doubleArray25 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator26 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray24, doubleArray25);
        double double27 = dormandPrince853Integrator26.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler28 = dormandPrince853Integrator26.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction29 = null;
        dormandPrince853Integrator26.addSwitchingFunction(switchingFunction29, (double) 0, (double) 10, (int) '4');
        double double34 = dormandPrince853Integrator26.getMinStep();
        double double35 = dormandPrince853Integrator26.getMaxStep();
        java.lang.String str36 = dormandPrince853Integrator26.getName();
        double double37 = dormandPrince853Integrator26.getMaxStep();
        org.apache.commons.math.ode.StepHandler stepHandler38 = dormandPrince853Integrator26.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler38);
        dormandPrince853Integrator6.setMinReduction(8.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str15, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(stepHandler28);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str36, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(stepHandler38);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        double[] doubleArray4 = new double[] { (-1.0d), 0L };
        double[] doubleArray5 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator6 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray4, doubleArray5);
        double double7 = dormandPrince853Integrator6.getCurrentStepStart();
        org.apache.commons.math.ode.StepHandler stepHandler8 = dormandPrince853Integrator6.getStepHandler();
        org.apache.commons.math.ode.SwitchingFunction switchingFunction9 = null;
        dormandPrince853Integrator6.addSwitchingFunction(switchingFunction9, (double) 0, (double) 10, (int) '4');
        double double14 = dormandPrince853Integrator6.getMinReduction();
        double double15 = dormandPrince853Integrator6.getMinReduction();
        double[] doubleArray20 = new double[] { (-1.0d), 0L };
        double[] doubleArray21 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator22 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray20, doubleArray21);
        org.apache.commons.math.ode.StepHandler stepHandler23 = dormandPrince853Integrator22.getStepHandler();
        double double24 = dormandPrince853Integrator22.getMaxStep();
        double[] doubleArray27 = null;
        double[] doubleArray32 = new double[] { (-1.0d), 0L };
        double[] doubleArray33 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator34 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray32, doubleArray33);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator35 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray27, doubleArray33);
        dormandPrince853Integrator35.setMinReduction((double) (byte) 0);
        java.lang.String str38 = dormandPrince853Integrator35.getName();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator43 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        org.apache.commons.math.ode.StepHandler stepHandler44 = dormandPrince853Integrator43.getStepHandler();
        org.apache.commons.math.ode.StepHandler stepHandler45 = dormandPrince853Integrator43.getStepHandler();
        dormandPrince853Integrator35.setStepHandler(stepHandler45);
        dormandPrince853Integrator22.setStepHandler(stepHandler45);
        dormandPrince853Integrator6.setStepHandler(stepHandler45);
        java.lang.String str49 = dormandPrince853Integrator6.getName();
        double double50 = dormandPrince853Integrator6.getMaxGrowth();
        double double51 = dormandPrince853Integrator6.getMinStep();
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator56 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) '4', (double) '4', (double) '4');
        double double57 = dormandPrince853Integrator56.getSafety();
        int int58 = dormandPrince853Integrator56.getOrder();
        dormandPrince853Integrator56.setMaxGrowth((double) 100L);
        dormandPrince853Integrator56.setMaxGrowth((double) 10L);
        double[] doubleArray67 = null;
        double[] doubleArray72 = new double[] { (-1.0d), 0L };
        double[] doubleArray73 = new double[] {};
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator74 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) (byte) 10, (double) (short) 100, doubleArray72, doubleArray73);
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator75 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10, (double) 10, doubleArray67, doubleArray73);
        double[] doubleArray82 = new double[] { 0.0d, '#', (short) 1, (short) 100, 'a', 100.0d };
        org.apache.commons.math.ode.DormandPrince853Integrator dormandPrince853Integrator83 = new org.apache.commons.math.ode.DormandPrince853Integrator((double) 10.0f, (double) (-1.0f), doubleArray73, doubleArray82);
        dormandPrince853Integrator83.setMaxGrowth((double) (byte) 10);
        double double86 = dormandPrince853Integrator83.getMinStep();
        org.apache.commons.math.ode.StepHandler stepHandler87 = dormandPrince853Integrator83.getStepHandler();
        dormandPrince853Integrator56.setStepHandler(stepHandler87);
        org.apache.commons.math.ode.StepHandler stepHandler89 = dormandPrince853Integrator56.getStepHandler();
        dormandPrince853Integrator6.setStepHandler(stepHandler89);
        double double91 = dormandPrince853Integrator6.getMaxGrowth();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(stepHandler8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.2d + "'", double14 == 0.2d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.2d + "'", double15 == 0.2d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(stepHandler23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str38, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertNotNull(stepHandler44);
        org.junit.Assert.assertNotNull(stepHandler45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dormand-Prince 8 (5, 3)" + "'", str49, "Dormand-Prince 8 (5, 3)");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.9d + "'", double57 == 0.9d);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 35.0, 1.0, 100.0, 97.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 10.0d + "'", double86 == 10.0d);
        org.junit.Assert.assertNotNull(stepHandler87);
        org.junit.Assert.assertNotNull(stepHandler89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 10.0d + "'", double91 == 10.0d);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        java.lang.String str28 = property10.getName();
        org.joda.time.DateTimeField dateTimeField29 = property10.getField();
        int int30 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "dayOfMonth" + "'", str28, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        int int28 = monthDay1.getMonthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = monthDay1.getFieldTypes();
        org.joda.time.MonthDay monthDay31 = monthDay1.plusMonths(9);
        org.joda.time.Chronology chronology32 = monthDay1.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = property14.addToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay22 = property14.setCopy((int) (short) 10);
        java.util.Locale locale23 = null;
        int int24 = property14.getMaximumShortTextLength(locale23);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addWrapFieldToCopy((int) (short) 1);
        boolean boolean47 = monthDay26.isBefore((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = monthDay46.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay51 = monthDay49.plusMonths(1);
        int int52 = monthDay49.size();
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay56.property(dateTimeFieldType62);
        int int64 = property63.get();
        org.joda.time.DurationField durationField65 = property63.getDurationField();
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = monthDay71.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property76 = monthDay69.property(dateTimeFieldType75);
        boolean boolean77 = property63.equals((java.lang.Object) monthDay69);
        int int78 = property63.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property63.getFieldType();
        org.joda.time.MonthDay monthDay81 = monthDay49.withField(dateTimeFieldType79, (int) (byte) 1);
        int int82 = monthDay3.indexOf(dateTimeFieldType79);
        org.joda.time.MonthDay monthDay84 = monthDay3.minusMonths((int) ' ');
        org.joda.time.Chronology chronology85 = monthDay3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay86 = new org.joda.time.MonthDay(1, 100, chronology85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = monthDay0.toString("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay3 = new org.joda.time.MonthDay(25, (int) (byte) 10, chronology2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        org.joda.time.MonthDay monthDay16 = property11.addToCopy(11);
        org.joda.time.MonthDay monthDay18 = property11.addToCopy(12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        int int20 = property10.getMaximumValueOverall();
        java.lang.String str21 = property10.getAsString();
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay23.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        int int41 = property40.get();
        org.joda.time.MonthDay monthDay43 = property40.addWrapFieldToCopy((int) (short) 1);
        boolean boolean44 = monthDay23.isBefore((org.joda.time.ReadablePartial) monthDay43);
        org.joda.time.MonthDay monthDay46 = monthDay43.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay50 = monthDay48.minusDays((int) '#');
        boolean boolean51 = monthDay46.isBefore((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay53 = monthDay50.plusMonths((int) (byte) 1);
        int int54 = property10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay56 = property10.addToCopy(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(monthDay56);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy(30);
        org.joda.time.DurationField durationField15 = property10.getRangeDurationField();
        java.lang.String str16 = property10.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[dayOfMonth]" + "'", str16, "Property[dayOfMonth]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.joda.time.Chronology chronology18 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property33 = monthDay32.dayOfMonth();
        int int34 = property33.getMaximumValueOverall();
        int int35 = property33.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay37 = property33.setCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property33.getFieldType();
        int int39 = monthDay17.get(dateTimeFieldType38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay41.plus(readablePeriod46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay51.property(dateTimeFieldType57);
        int int59 = property58.get();
        org.joda.time.MonthDay monthDay61 = property58.addWrapFieldToCopy((int) (short) 1);
        boolean boolean62 = monthDay41.isBefore((org.joda.time.ReadablePartial) monthDay61);
        org.joda.time.MonthDay monthDay64 = monthDay61.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay66 = monthDay64.plusMonths(1);
        int int67 = monthDay66.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = monthDay66.getFields();
        org.joda.time.Chronology chronology69 = monthDay66.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType38, chronology69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 31 + "'", int34 == 31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.lang.String str18 = property6.getAsShortText();
        org.joda.time.DateTimeField dateTimeField19 = property6.getField();
        int int20 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(0, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay.Property property9 = monthDay1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay5 = monthDay2.withPeriodAdded(readablePeriod3, 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        int int12 = monthDay5.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.MonthDay monthDay36 = property33.addWrapFieldToCopy((int) (short) 1);
        boolean boolean37 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay16.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology40 = monthDay39.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay14.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((long) 12, chronology40);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str57 = property53.getAsString();
        java.lang.String str58 = property53.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property53.getFieldType();
        int int60 = monthDay42.get(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        java.lang.String str16 = property10.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 8);
        org.joda.time.MonthDay monthDay3 = monthDay1.minusMonths((int) (short) 100);
        org.junit.Assert.assertNotNull(monthDay3);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(100L);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.plus(readablePeriod19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.minus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay47.minus(readablePeriod50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MonthDay monthDay53 = new org.joda.time.MonthDay(dateTimeZone52);
        boolean boolean54 = monthDay51.isEqual((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay56.plus(readablePeriod61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        int int74 = property73.get();
        org.joda.time.MonthDay monthDay76 = property73.addWrapFieldToCopy((int) (short) 1);
        boolean boolean77 = monthDay56.isBefore((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay56.getFieldType(0);
        int int80 = monthDay51.indexOf(dateTimeFieldType79);
        org.joda.time.MonthDay monthDay82 = monthDay22.withField(dateTimeFieldType79, 12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(monthDay82);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 25);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = monthDay12.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [Lorg.joda.time.DateTimeField;");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay28 = monthDay1.withPeriodAdded(readablePeriod26, (int) (byte) -1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay((long) (short) 100, chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.Chronology chronology40 = monthDay33.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = monthDay33.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = monthDay31.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = monthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay1.minus(readablePeriod45);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay49 = monthDay46.withFieldAdded(durationFieldType47, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(monthDay46);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        int int13 = property6.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        int int41 = property39.getMaximumValue();
        org.joda.time.MonthDay monthDay43 = property39.setCopy((int) (short) 1);
        boolean boolean44 = monthDay26.equals((java.lang.Object) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay26.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.plus(readablePeriod47);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValueOverall();
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumTextLength(locale11);
        int int13 = property6.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        int int8 = property6.get();
        org.joda.time.ReadableInstant readableInstant9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = property6.compareTo(readableInstant9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay30 = monthDay25.withDayOfMonth((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = monthDay30.toString(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "--09-10" + "'", str32, "--09-10");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy(0);
        org.joda.time.MonthDay monthDay21 = monthDay19.plusDays((int) 'a');
        org.joda.time.MonthDay.Property property22 = monthDay19.monthOfYear();
        org.joda.time.MonthDay monthDay24 = property22.setCopy((int) (byte) 1);
        java.lang.String str25 = monthDay24.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        org.joda.time.MonthDay monthDay10 = property6.addToCopy(0);
        org.joda.time.DurationField durationField11 = property6.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        java.util.Locale locale13 = null;
        int int14 = property6.getMaximumTextLength(locale13);
        java.util.Locale locale16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property6.setCopy("hi!", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy(9);
        org.joda.time.DurationField durationField29 = property10.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--09-10");
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = monthDay31.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        java.lang.String str22 = property10.getAsText();
        int int23 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay2.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        int int20 = property19.get();
        org.joda.time.MonthDay monthDay22 = property19.addWrapFieldToCopy((int) (short) 1);
        boolean boolean23 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = monthDay2.getFields();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay2.minus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays(31);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay30.plus(readablePeriod35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        int int48 = property47.get();
        org.joda.time.MonthDay monthDay50 = property47.addWrapFieldToCopy((int) (short) 1);
        boolean boolean51 = monthDay30.isBefore((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay30.withChronologyRetainFields(chronology52);
        org.joda.time.Chronology chronology54 = monthDay53.getChronology();
        int[] intArray55 = monthDay53.getValues();
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay63 = monthDay53.withField(dateTimeFieldType61, 10);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay69.dayOfMonth();
        org.joda.time.Chronology chronology75 = monthDay69.getChronology();
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.now(chronology75);
        org.joda.time.MonthDay monthDay77 = monthDay67.withChronologyRetainFields(chronology75);
        org.joda.time.Chronology chronology78 = monthDay67.getChronology();
        org.joda.time.MonthDay monthDay79 = new org.joda.time.MonthDay((java.lang.Object) monthDay63, chronology78);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay82 = monthDay26.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay(0L, chronology78);
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.now(chronology78);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        java.lang.String str19 = property14.getAsString();
        org.joda.time.MonthDay monthDay20 = property14.getMonthDay();
        org.joda.time.DurationField durationField21 = property14.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        java.util.Locale locale28 = null;
        int int29 = property10.getMaximumShortTextLength(locale28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        int int28 = monthDay27.getMonthOfYear();
        org.joda.time.MonthDay monthDay30 = monthDay27.withMonthOfYear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay27.minus(readablePeriod31);
        java.lang.String str33 = monthDay32.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "--01-02" + "'", str33, "--01-02");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = monthDay1.minusDays((int) (short) 1);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        int int31 = monthDay30.getMonthOfYear();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        java.util.Locale locale43 = null;
        int int44 = property42.getMaximumTextLength(locale43);
        org.joda.time.MonthDay monthDay46 = property42.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.minus(readablePeriod47);
        boolean boolean49 = monthDay30.isAfter((org.joda.time.ReadablePartial) monthDay46);
        boolean boolean50 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay46);
        java.util.Locale locale52 = null;
        java.lang.String str53 = monthDay1.toString("--02-02", locale52);
        java.lang.String str54 = monthDay1.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "--02-02" + "'", str53, "--02-02");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "--01-01" + "'", str54, "--01-01");
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int30 = monthDay28.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay28);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.util.Locale locale16 = null;
        org.joda.time.MonthDay monthDay17 = property10.setCopy("25", locale16);
        java.lang.String str18 = property10.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        int int28 = monthDay15.getDayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = monthDay15.toString(dateTimeFormatter29);
        org.joda.time.MonthDay.Property property31 = monthDay15.dayOfMonth();
        java.lang.String str32 = property31.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--01-01" + "'", str30, "--01-01");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        int int17 = property10.get();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property10.getAsText(locale18);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        java.lang.String str14 = monthDay12.toString("1");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--09-01");
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = monthDay12.getFieldTypes();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        int int41 = monthDay40.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = monthDay40.getFields();
        org.joda.time.Chronology chronology43 = monthDay40.getChronology();
        org.joda.time.MonthDay monthDay44 = monthDay12.withChronologyRetainFields(chronology43);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay44);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        java.lang.String str70 = monthDay26.toString("--01-09");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "--01-09" + "'", str70, "--01-09");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay.Property property27 = monthDay26.monthOfYear();
        java.lang.String str28 = property27.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.plus(readablePeriod14);
        int int16 = monthDay15.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay15.plus(readablePeriod17);
        java.lang.Object obj19 = null;
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay25.dayOfMonth();
        org.joda.time.Chronology chronology31 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.now(chronology31);
        org.joda.time.MonthDay monthDay33 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay(obj19, chronology31);
        int int35 = monthDay15.compareTo((org.joda.time.ReadablePartial) monthDay34);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getDayOfMonth();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.Chronology chronology33 = monthDay27.getChronology();
        org.joda.time.Chronology chronology34 = monthDay27.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = monthDay27.toDateTime(readableInstant35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay38.getFieldType(0);
        int int62 = monthDay27.get(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay24.property(dateTimeFieldType61);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        org.joda.time.MonthDay.Property property75 = monthDay67.monthOfYear();
        org.joda.time.MonthDay monthDay77 = property75.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay85.withChronologyRetainFields(chronology86);
        org.joda.time.MonthDay monthDay89 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MonthDay monthDay91 = monthDay89.withChronologyRetainFields(chronology90);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = monthDay89.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property94 = monthDay87.property(dateTimeFieldType93);
        int int95 = monthDay79.indexOf(dateTimeFieldType93);
        int int96 = monthDay77.get(dateTimeFieldType93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay98 = monthDay24.withField(dateTimeFieldType93, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.DurationField durationField37 = property35.getDurationField();
        java.util.Locale locale38 = null;
        int int39 = property35.getMaximumTextLength(locale38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.Chronology chronology47 = monthDay41.getChronology();
        org.joda.time.Chronology chronology48 = monthDay41.getChronology();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = monthDay41.toDateTime(readableInstant49);
        int int51 = property35.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = property10.compareTo((org.joda.time.ReadableInstant) dateTime50);
        java.lang.String str53 = property10.getAsText();
        int int54 = property10.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.DurationField durationField30 = property28.getDurationField();
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        boolean boolean42 = property28.equals((java.lang.Object) monthDay34);
        org.joda.time.MonthDay.Property property43 = monthDay34.dayOfMonth();
        org.joda.time.MonthDay.Property property44 = monthDay34.monthOfYear();
        boolean boolean45 = property11.equals((java.lang.Object) property44);
        org.joda.time.DurationField durationField46 = property11.getRangeDurationField();
        java.lang.String str47 = property11.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "monthOfYear" + "'", str47, "monthOfYear");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property6.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property6.getFieldType();
        int int21 = property6.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsShortText(locale13);
        int int15 = property10.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        org.joda.time.DurationField durationField23 = property6.getDurationField();
        java.lang.String str24 = property6.getAsShortText();
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        java.util.Locale locale37 = null;
        int int38 = property36.getMaximumTextLength(locale37);
        int int39 = property36.getMaximumValue();
        org.joda.time.MonthDay monthDay41 = property36.addWrapFieldToCopy((int) '#');
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.minus(readablePeriod42);
        int int44 = property6.compareTo((org.joda.time.ReadablePartial) monthDay41);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(dateTimeZone45);
        org.joda.time.MonthDay monthDay48 = monthDay46.minusDays(100);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay50.dayOfMonth();
        org.joda.time.Chronology chronology56 = monthDay50.getChronology();
        org.joda.time.Chronology chronology57 = monthDay50.getChronology();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = monthDay50.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = monthDay46.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        int int61 = property6.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property6.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay15 = monthDay12.withPeriodAdded(readablePeriod13, 1);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        int int22 = monthDay15.indexOf(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay15.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        int int31 = monthDay15.get(dateTimeFieldType30);
        org.joda.time.MonthDay monthDay33 = monthDay15.plusDays(0);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay35.plus(readablePeriod40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        int int53 = property52.get();
        org.joda.time.MonthDay monthDay55 = property52.addWrapFieldToCopy((int) (short) 1);
        boolean boolean56 = monthDay35.isBefore((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.MonthDay monthDay58 = monthDay55.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay60 = monthDay58.plusMonths(1);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        boolean boolean69 = monthDay62.isSupported(dateTimeFieldType68);
        boolean boolean70 = monthDay58.isSupported(dateTimeFieldType68);
        int int71 = monthDay33.indexOf(dateTimeFieldType68);
        boolean boolean72 = monthDay10.isSupported(dateTimeFieldType68);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay10.plus(readablePeriod73);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(monthDay74);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(2, 2);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField(0);
        org.joda.time.ReadablePartial readablePartial5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = monthDay2.isAfter(readablePartial5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((-1));
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = monthDay29.toString(dateTimeFormatter32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = monthDay29.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay36 = monthDay29.withMonthOfYear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "--09-02" + "'", str33, "--09-02");
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy(0);
        java.lang.String str20 = monthDay19.toString();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.DurationField durationField33 = property31.getDurationField();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay37.property(dateTimeFieldType43);
        boolean boolean45 = property31.equals((java.lang.Object) monthDay37);
        java.util.Locale locale46 = null;
        java.lang.String str47 = property31.getAsShortText(locale46);
        java.lang.String str48 = property31.getAsShortText();
        java.lang.String str49 = property31.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property31.getFieldType();
        org.joda.time.MonthDay monthDay52 = monthDay19.withField(dateTimeFieldType50, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = monthDay52.isSupported(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "--01-01" + "'", str20, "--01-01");
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Property[dayOfMonth]" + "'", str49, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.Chronology chronology9 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((long) (short) 0, chronology9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.MonthDay monthDay35 = monthDay32.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay37 = monthDay35.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay35.minus(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay(dateTimeZone40);
        boolean boolean42 = monthDay39.isEqual((org.joda.time.ReadablePartial) monthDay41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.plus(readablePeriod49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.MonthDay monthDay64 = property61.addWrapFieldToCopy((int) (short) 1);
        boolean boolean65 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay44.getFieldType(0);
        int int68 = monthDay39.indexOf(dateTimeFieldType67);
        int int69 = monthDay39.getDayOfMonth();
        org.joda.time.MonthDay monthDay71 = monthDay39.minusDays((int) (short) 0);
        int int72 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay74 = new org.joda.time.MonthDay(0L);
        boolean boolean75 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay74);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.MonthDay.Property property22 = monthDay5.property(dateTimeFieldType21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.minusDays(31);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay65.plus(readablePeriod70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property82 = monthDay75.property(dateTimeFieldType81);
        int int83 = property82.get();
        org.joda.time.MonthDay monthDay85 = property82.addWrapFieldToCopy((int) (short) 1);
        boolean boolean86 = monthDay65.isBefore((org.joda.time.ReadablePartial) monthDay85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay65.withChronologyRetainFields(chronology87);
        org.joda.time.Chronology chronology89 = monthDay88.getChronology();
        org.joda.time.MonthDay monthDay90 = monthDay63.withChronologyRetainFields(chronology89);
        org.joda.time.MonthDay monthDay91 = monthDay49.withChronologyRetainFields(chronology89);
        org.joda.time.Chronology chronology92 = monthDay91.getChronology();
        org.joda.time.MonthDay monthDay93 = monthDay5.withChronologyRetainFields(chronology92);
        org.joda.time.MonthDay monthDay94 = new org.joda.time.MonthDay((int) (short) 1, 12, chronology92);
        org.joda.time.MonthDay monthDay96 = monthDay94.minusDays((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.MonthDay monthDay98 = monthDay94.plus(readablePeriod97);
        int int99 = monthDay94.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertNotNull(monthDay96);
        org.junit.Assert.assertNotNull(monthDay98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 12 + "'", int99 == 12);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        int int14 = monthDay5.getDayOfMonth();
        org.joda.time.MonthDay.Property property15 = monthDay5.dayOfMonth();
        int int16 = monthDay5.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay5.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        org.joda.time.MonthDay.Property property30 = monthDay22.monthOfYear();
        int int31 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay.Property property32 = monthDay22.dayOfMonth();
        int int33 = monthDay22.getDayOfMonth();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay42 = monthDay22.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay43 = monthDay18.withChronologyRetainFields(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay(9, (int) (byte) 0, chronology41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay43);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay31 = property10.setCopy("dayOfMonth", locale30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        org.joda.time.MonthDay monthDay6 = monthDay4.withDayOfMonth(30);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property17 = monthDay10.property(dateTimeFieldType16);
        int int18 = property17.get();
        int int19 = property17.getMaximumValue();
        org.joda.time.MonthDay monthDay21 = property17.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay23.plus(readablePeriod28);
        int int30 = monthDay23.getDayOfMonth();
        int int31 = property17.compareTo((org.joda.time.ReadablePartial) monthDay23);
        java.lang.String str32 = property17.getName();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property17.getAsShortText(locale33);
        org.joda.time.DurationField durationField35 = property17.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property17.getFieldType();
        org.joda.time.MonthDay.Property property37 = monthDay4.property(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "dayOfMonth" + "'", str32, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(1, 3);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay5 = monthDay2.withFieldAdded(durationFieldType3, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay(chronology8);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = monthDay1.plusMonths((int) (byte) 1);
        int[] intArray10 = monthDay9.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2, 1]");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        int int7 = property6.getMinimumValue();
        java.lang.String str8 = property6.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        java.util.Locale locale23 = null;
        int int24 = property6.getMaximumShortTextLength(locale23);
        java.lang.String str25 = property6.getAsString();
        org.joda.time.DurationField durationField26 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DurationField durationField25 = property10.getDurationField();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        int int28 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = monthDay24.minusMonths(9);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay((-1L), chronology36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay((java.lang.Object) monthDay37);
        java.util.Locale locale40 = null;
        java.lang.String str41 = monthDay38.toString("2", locale40);
        boolean boolean42 = monthDay27.isAfter((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.DateTimeField dateTimeField44 = monthDay38.getField(1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.lang.String str18 = property6.getAsShortText();
        org.joda.time.DateTimeField dateTimeField19 = property6.getField();
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay24 = monthDay21.withPeriodAdded(readablePeriod22, 1);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        int int31 = monthDay24.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay24.withChronologyRetainFields(chronology32);
        int int34 = property6.compareTo((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay36.plus(readablePeriod41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        boolean boolean57 = monthDay36.isBefore((org.joda.time.ReadablePartial) monthDay56);
        org.joda.time.MonthDay monthDay59 = monthDay56.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay61 = monthDay59.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay59.minus(readablePeriod62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        org.joda.time.MonthDay.Property property75 = monthDay67.monthOfYear();
        org.joda.time.MonthDay monthDay77 = property75.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay85.withChronologyRetainFields(chronology86);
        org.joda.time.MonthDay monthDay89 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MonthDay monthDay91 = monthDay89.withChronologyRetainFields(chronology90);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = monthDay89.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property94 = monthDay87.property(dateTimeFieldType93);
        int int95 = monthDay79.indexOf(dateTimeFieldType93);
        int int96 = monthDay77.get(dateTimeFieldType93);
        int int97 = monthDay63.indexOf(dateTimeFieldType93);
        org.joda.time.MonthDay.Property property98 = monthDay24.property(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        org.joda.time.DateTimeField dateTimeField47 = property10.getField();
        org.joda.time.DurationField durationField48 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DurationField durationField15 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = monthDay1.getFields();
        org.joda.time.MonthDay.Property property25 = monthDay1.monthOfYear();
        org.joda.time.MonthDay.Property property26 = monthDay1.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        int int54 = monthDay53.getMonthOfYear();
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay58.property(dateTimeFieldType64);
        java.util.Locale locale66 = null;
        int int67 = property65.getMaximumTextLength(locale66);
        org.joda.time.MonthDay monthDay69 = property65.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.minus(readablePeriod70);
        boolean boolean72 = monthDay53.isAfter((org.joda.time.ReadablePartial) monthDay69);
        boolean boolean73 = monthDay1.equals((java.lang.Object) monthDay69);
        int int74 = monthDay1.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.lang.String str15 = property10.getName();
        java.util.Locale locale16 = null;
        int int17 = property10.getMaximumShortTextLength(locale16);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        java.util.Locale locale27 = null;
        int int28 = property24.getMaximumTextLength(locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.Chronology chronology37 = monthDay30.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = monthDay30.toDateTime(readableInstant38);
        int int40 = property24.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int41 = property10.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int42 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        int int32 = monthDay31.getMonthOfYear();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        java.util.Locale locale44 = null;
        int int45 = property43.getMaximumTextLength(locale44);
        org.joda.time.MonthDay monthDay47 = property43.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.minus(readablePeriod48);
        boolean boolean50 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay47);
        boolean boolean51 = monthDay4.equals((java.lang.Object) monthDay31);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay53.plus(readablePeriod58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property70 = monthDay63.property(dateTimeFieldType69);
        int int71 = property70.get();
        org.joda.time.MonthDay monthDay73 = property70.addWrapFieldToCopy((int) (short) 1);
        boolean boolean74 = monthDay53.isBefore((org.joda.time.ReadablePartial) monthDay73);
        org.joda.time.MonthDay monthDay76 = monthDay73.minusMonths((int) (byte) 100);
        int int77 = monthDay76.getDayOfMonth();
        boolean boolean78 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.DurationFieldType durationFieldType79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay81 = monthDay31.withFieldAdded(durationFieldType79, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.MonthDay monthDay44 = property41.getMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = monthDay44.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = monthDay44.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay49 = monthDay47.plusMonths(1);
        int int50 = monthDay47.size();
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.DurationField durationField63 = property61.getDurationField();
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        boolean boolean75 = property61.equals((java.lang.Object) monthDay67);
        int int76 = property61.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property61.getFieldType();
        org.joda.time.MonthDay monthDay79 = monthDay47.withField(dateTimeFieldType77, (int) (byte) 1);
        int int80 = monthDay1.indexOf(dateTimeFieldType77);
        org.joda.time.DateTimeField dateTimeField82 = monthDay1.getField((int) (byte) 0);
        org.joda.time.MonthDay.Property property83 = monthDay1.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        java.lang.String str16 = property11.getAsShortText();
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay19 = property11.setCopy("--08-02", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--08-02\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Jan" + "'", str16, "Jan");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        java.lang.String str20 = property10.getName();
        java.util.Locale locale21 = null;
        int int22 = property10.getMaximumShortTextLength(locale21);
        int int23 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfMonth" + "'", str20, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        int int11 = property6.getMaximumValueOverall();
        int int12 = property6.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay23 = property10.setCopy((int) (short) 1);
        org.joda.time.DurationField durationField24 = property10.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays(31);
        org.joda.time.MonthDay monthDay30 = monthDay28.plusDays((int) (byte) 10);
        org.joda.time.Chronology chronology31 = monthDay30.getChronology();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay(chronology31);
        org.joda.time.Chronology chronology33 = monthDay32.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay(31, (int) '#', chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay21.minusDays(31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = monthDay21.getFieldTypes();
        org.joda.time.MonthDay.Property property28 = monthDay21.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay10 = monthDay1.plusMonths((int) ' ');
        int int11 = monthDay1.getMonthOfYear();
        org.joda.time.MonthDay monthDay13 = monthDay1.minusDays((int) (short) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        int int14 = property10.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.toString();
        java.util.Locale locale16 = null;
        int int17 = property10.getMaximumShortTextLength(locale16);
        int int18 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        int int19 = property14.getMinimumValue();
        java.lang.String str20 = property14.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = monthDay56.plusDays(2);
        boolean boolean59 = monthDay24.isEqual((org.joda.time.ReadablePartial) monthDay56);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay64 = monthDay61.withPeriodAdded(readablePeriod62, 1);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        int int71 = monthDay64.indexOf(dateTimeFieldType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay64.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay.Property property74 = monthDay73.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property74.getFieldType();
        int int76 = monthDay24.indexOf(dateTimeFieldType75);
        org.joda.time.Chronology chronology77 = monthDay24.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property11.getAsShortText(locale13);
        int int15 = property11.getMinimumValueOverall();
        java.lang.String str16 = property11.getAsString();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.DurationField durationField29 = property27.getDurationField();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        boolean boolean41 = property27.equals((java.lang.Object) monthDay33);
        org.joda.time.DateTimeField dateTimeField42 = property27.getField();
        java.util.Locale locale43 = null;
        int int44 = property27.getMaximumShortTextLength(locale43);
        java.lang.String str45 = property27.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property27.getFieldType();
        boolean boolean47 = property11.equals((java.lang.Object) property27);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Jan" + "'", str14, "Jan");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "dayOfMonth" + "'", str45, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        org.joda.time.DurationField durationField10 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay26 = monthDay4.withPeriodAdded(readablePeriod24, (int) '4');
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay29.dayOfMonth();
        org.joda.time.Chronology chronology35 = monthDay29.getChronology();
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((-1L), chronology35);
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay41 = monthDay39.minusDays((int) '#');
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay43.dayOfMonth();
        org.joda.time.Chronology chronology49 = monthDay43.getChronology();
        org.joda.time.Chronology chronology50 = monthDay43.getChronology();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = monthDay43.toDateTime(readableInstant51);
        org.joda.time.MonthDay monthDay54 = monthDay43.plusMonths((int) ' ');
        boolean boolean55 = monthDay39.isAfter((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay57.dayOfMonth();
        org.joda.time.MonthDay monthDay64 = property62.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay66 = property62.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = monthDay68.minusMonths((int) (byte) -1);
        boolean boolean73 = property62.equals((java.lang.Object) monthDay72);
        int int74 = property62.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property62.getFieldType();
        org.joda.time.MonthDay.Property property76 = monthDay54.property(dateTimeFieldType75);
        int int77 = monthDay37.indexOf(dateTimeFieldType75);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = monthDay79.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property84 = monthDay79.dayOfMonth();
        org.joda.time.Chronology chronology85 = monthDay79.getChronology();
        org.joda.time.Chronology chronology86 = monthDay79.getChronology();
        org.joda.time.MonthDay monthDay87 = org.joda.time.MonthDay.now(chronology86);
        org.joda.time.MonthDay monthDay88 = monthDay37.withChronologyRetainFields(chronology86);
        org.joda.time.MonthDay monthDay89 = new org.joda.time.MonthDay(chronology86);
        org.joda.time.MonthDay monthDay91 = monthDay89.minusDays((int) (short) 0);
        boolean boolean92 = monthDay4.isAfter((org.joda.time.ReadablePartial) monthDay89);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 31 + "'", int74 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("2");
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.withChronologyRetainFields(chronology5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property13 = monthDay8.dayOfMonth();
        org.joda.time.Chronology chronology14 = monthDay8.getChronology();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.now(chronology14);
        org.joda.time.MonthDay monthDay16 = monthDay6.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(10L, chronology14);
        org.joda.time.MonthDay monthDay18 = monthDay1.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(chronology14);
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(chronology14);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay(chronology14);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property6.getFieldType();
        org.joda.time.DurationField durationField20 = property6.getDurationField();
        org.joda.time.DurationField durationField21 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.now(chronology22);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        org.joda.time.MonthDay.Property property39 = monthDay31.monthOfYear();
        java.lang.String str40 = property39.getAsShortText();
        int int41 = property39.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property39.getFieldType();
        org.joda.time.MonthDay monthDay44 = monthDay27.withField(dateTimeFieldType42, (int) (short) 1);
        org.joda.time.MonthDay monthDay46 = monthDay27.withDayOfMonth(12);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.minus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay53 = monthDay50.withPeriodAdded(readablePeriod51, 1);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        int int60 = monthDay53.indexOf(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay53.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay.Property property63 = monthDay62.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property63.getFieldType();
        org.joda.time.MonthDay monthDay66 = monthDay46.withField(dateTimeFieldType64, 12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Jan" + "'", str40, "Jan");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        java.lang.String str37 = monthDay32.toString("--02-02");
        int int38 = monthDay32.getDayOfMonth();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        org.joda.time.MonthDay.Property property52 = monthDay44.monthOfYear();
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property69 = monthDay62.property(dateTimeFieldType68);
        int int70 = monthDay54.indexOf(dateTimeFieldType68);
        boolean boolean71 = monthDay44.equals((java.lang.Object) int70);
        org.joda.time.MonthDay monthDay73 = monthDay44.withMonthOfYear(9);
        int int75 = monthDay73.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = monthDay73.getFieldTypes();
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = monthDay78.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property83 = monthDay78.dayOfMonth();
        org.joda.time.Chronology chronology84 = monthDay78.getChronology();
        org.joda.time.Chronology chronology85 = monthDay78.getChronology();
        org.joda.time.MonthDay monthDay86 = monthDay73.withChronologyRetainFields(chronology85);
        org.joda.time.MonthDay monthDay87 = new org.joda.time.MonthDay((int) (byte) 10, (int) (byte) 1, chronology85);
        boolean boolean88 = monthDay32.equals((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--02-02" + "'", str37, "--02-02");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay16.getFields();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.DurationField durationField38 = property36.getDurationField();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        boolean boolean50 = property36.equals((java.lang.Object) monthDay42);
        int int51 = property36.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property36.getFieldType();
        org.joda.time.MonthDay monthDay54 = monthDay16.withField(dateTimeFieldType52, (int) (short) 10);
        org.joda.time.MonthDay monthDay56 = monthDay16.minusDays((-1));
        org.joda.time.MonthDay monthDay58 = monthDay56.minusMonths((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.MonthDay monthDay60 = new org.joda.time.MonthDay(dateTimeZone59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay64.property(dateTimeFieldType70);
        int int72 = property71.get();
        int int73 = property71.getMaximumValue();
        org.joda.time.MonthDay monthDay75 = property71.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay80 = monthDay77.withPeriodAdded(readablePeriod78, 1);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MonthDay monthDay84 = monthDay82.withChronologyRetainFields(chronology83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = monthDay82.getFieldType((int) (byte) 1);
        int int87 = monthDay80.indexOf(dateTimeFieldType86);
        boolean boolean88 = monthDay75.isSupported(dateTimeFieldType86);
        int int89 = monthDay60.get(dateTimeFieldType86);
        int int90 = monthDay56.indexOf(dateTimeFieldType86);
        org.joda.time.MonthDay monthDay92 = monthDay56.plusDays(11);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 31 + "'", int73 == 31);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 25 + "'", int89 == 25);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(monthDay92);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        int int25 = property10.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property10.getFieldType();
        int int27 = property10.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay29.getFields();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.withPeriodAdded(readablePeriod33, 0);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay38 = monthDay35.withFieldAdded(durationFieldType36, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(monthDay35);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        org.joda.time.MonthDay monthDay12 = property6.setCopy((int) (short) 1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = monthDay12.toString("--09-10", locale14);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--09-10" + "'", str15, "--09-10");
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        java.util.Locale locale18 = null;
        org.joda.time.MonthDay monthDay19 = property14.setCopy("2", locale18);
        java.lang.String str20 = property14.getAsString();
        java.lang.String str21 = property14.getAsText();
        java.util.Locale locale22 = null;
        int int23 = property14.getMaximumTextLength(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property14.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        java.util.Locale locale28 = null;
        java.lang.String str29 = property10.getAsShortText(locale28);
        org.joda.time.MonthDay monthDay31 = property10.addToCopy(30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay30.plusDays((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = monthDay30.toDateTime(readableInstant43);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay20.withPeriodAdded(readablePeriod21, 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        int int30 = monthDay23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay23.get(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = monthDay23.isSupported(dateTimeFieldType40);
        int int42 = monthDay18.compareTo((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay44 = monthDay18.minusMonths((int) ' ');
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(10L);
        boolean boolean47 = monthDay18.isAfter((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay49.plus(readablePeriod54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay59.property(dateTimeFieldType65);
        int int67 = property66.get();
        org.joda.time.MonthDay monthDay69 = property66.addWrapFieldToCopy((int) (short) 1);
        boolean boolean70 = monthDay49.isBefore((org.joda.time.ReadablePartial) monthDay69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay49.withChronologyRetainFields(chronology71);
        org.joda.time.Chronology chronology73 = monthDay72.getChronology();
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay78 = monthDay75.withPeriodAdded(readablePeriod76, 1);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay80.withChronologyRetainFields(chronology81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = monthDay80.getFieldType((int) (byte) 1);
        int int85 = monthDay78.indexOf(dateTimeFieldType84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MonthDay monthDay87 = monthDay78.withChronologyRetainFields(chronology86);
        boolean boolean88 = monthDay72.isAfter((org.joda.time.ReadablePartial) monthDay78);
        org.joda.time.MonthDay monthDay90 = monthDay78.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay92 = monthDay90.minusDays(100);
        boolean boolean93 = monthDay46.equals((java.lang.Object) monthDay90);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(monthDay92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("--09-02", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy(30);
        java.lang.String str15 = monthDay14.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--01-31" + "'", str15, "--01-31");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        java.lang.String str45 = monthDay6.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "--01-01" + "'", str45, "--01-01");
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addToCopy((int) (byte) 100);
        java.lang.String str18 = property14.toString();
        java.lang.String str19 = property14.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[dayOfMonth]" + "'", str18, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(2, 2);
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.withChronologyRetainFields(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = monthDay4.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay4.plus(readablePeriod9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.MonthDay monthDay24 = property21.addWrapFieldToCopy((int) (short) 1);
        boolean boolean25 = monthDay4.isBefore((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.MonthDay monthDay27 = monthDay24.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay29 = monthDay27.plusMonths(1);
        int int30 = monthDay27.size();
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.DurationField durationField43 = property41.getDurationField();
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        boolean boolean55 = property41.equals((java.lang.Object) monthDay47);
        int int56 = property41.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property41.getFieldType();
        org.joda.time.MonthDay monthDay59 = monthDay27.withField(dateTimeFieldType57, (int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay2.property(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay28 = monthDay1.withPeriodAdded(readablePeriod26, (int) (byte) -1);
        org.joda.time.Chronology chronology29 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.now(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.minus(readablePeriod31);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        org.joda.time.DurationField durationField16 = property14.getDurationField();
        java.lang.String str17 = property14.getAsShortText();
        java.lang.String str18 = property14.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2" + "'", str17, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (byte) 1, 9);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        int int9 = property6.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        int int20 = property10.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField21 = property10.getField();
        int int22 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay10 = monthDay1.withPeriodAdded(readablePeriod8, 9);
        org.joda.time.DateTimeField dateTimeField12 = monthDay10.getField(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = monthDay10.toString(dateTimeFormatter13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str29 = property25.getAsString();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = monthDay31.indexOf(dateTimeFieldType45);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay51.property(dateTimeFieldType57);
        int int59 = property58.get();
        org.joda.time.MonthDay monthDay61 = property58.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property72 = monthDay65.property(dateTimeFieldType71);
        int int73 = property72.get();
        org.joda.time.DurationField durationField74 = property72.getDurationField();
        java.util.Locale locale75 = null;
        int int76 = property72.getMaximumTextLength(locale75);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = monthDay78.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property83 = monthDay78.dayOfMonth();
        org.joda.time.Chronology chronology84 = monthDay78.getChronology();
        org.joda.time.Chronology chronology85 = monthDay78.getChronology();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = monthDay78.toDateTime(readableInstant86);
        int int88 = property72.compareTo((org.joda.time.ReadableInstant) dateTime87);
        int int89 = property58.compareTo((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = monthDay31.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int int91 = property25.compareTo((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime92 = monthDay10.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        java.lang.Class<?> wildcardClass93 = dateTime92.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--01-01" + "'", str14, "--01-01");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((java.lang.Object) monthDay2, chronology3);
        java.lang.String str5 = monthDay2.toString();
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay7.plus(readablePeriod12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.MonthDay monthDay27 = property24.addWrapFieldToCopy((int) (short) 1);
        boolean boolean28 = monthDay7.isBefore((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay7.withChronologyRetainFields(chronology29);
        int int31 = monthDay2.compareTo((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.ReadablePartial readablePartial32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = monthDay2.isBefore(readablePartial32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--11-25" + "'", str5, "--11-25");
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.Object obj0 = null;
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        org.joda.time.MonthDay.Property property12 = monthDay4.monthOfYear();
        int int13 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay.Property property14 = monthDay4.dayOfMonth();
        int int15 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = monthDay4.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.now(chronology23);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(obj0, chronology23);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(12);
        org.joda.time.Chronology chronology32 = monthDay31.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.now(chronology7);
        int[] intArray9 = monthDay8.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[11, 25]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumTextLength(locale25);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.minus(readablePeriod29);
        boolean boolean31 = property11.equals((java.lang.Object) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        org.joda.time.MonthDay.Property property43 = monthDay35.monthOfYear();
        int int44 = monthDay35.getDayOfMonth();
        org.joda.time.MonthDay.Property property45 = monthDay35.dayOfMonth();
        int int46 = monthDay35.getDayOfMonth();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.MonthDay monthDay55 = monthDay35.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay(chronology54);
        org.joda.time.MonthDay monthDay57 = monthDay30.withChronologyRetainFields(chronology54);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.plus(readablePeriod58);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusMonths(1);
        int int45 = monthDay16.compareTo((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay42.plus(readablePeriod46);
        int[] intArray48 = monthDay42.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[9, 2]");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = monthDay26.getFields();
        org.joda.time.MonthDay monthDay30 = monthDay26.withMonthOfYear((int) (byte) 1);
        java.util.Locale locale32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = monthDay30.toString("February", locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy(9);
        java.lang.String str29 = property10.getAsShortText();
        int int30 = property10.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.monthOfYear();
        int[] intArray47 = monthDay41.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[9, 2]");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        int int9 = monthDay4.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay3.withPeriodAdded(readablePeriod4, 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay3.plus(readablePeriod7);
        int int9 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay12 = monthDay8.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        java.lang.String str24 = property23.getAsText();
        org.joda.time.MonthDay monthDay26 = property23.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.plus(readablePeriod27);
        int int29 = monthDay28.getMonthOfYear();
        boolean boolean30 = monthDay12.isEqual((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay32 = monthDay28.plusMonths((int) 'a');
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(monthDay32);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        java.util.Locale locale48 = null;
        java.lang.String str49 = monthDay45.toString("--08-02", locale48);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "--08-02" + "'", str49, "--08-02");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        int int32 = monthDay31.getMonthOfYear();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        java.util.Locale locale44 = null;
        int int45 = property43.getMaximumTextLength(locale44);
        org.joda.time.MonthDay monthDay47 = property43.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.minus(readablePeriod48);
        boolean boolean50 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay47);
        boolean boolean51 = monthDay4.equals((java.lang.Object) monthDay31);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay53.plus(readablePeriod58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property70 = monthDay63.property(dateTimeFieldType69);
        int int71 = property70.get();
        org.joda.time.MonthDay monthDay73 = property70.addWrapFieldToCopy((int) (short) 1);
        boolean boolean74 = monthDay53.isBefore((org.joda.time.ReadablePartial) monthDay73);
        org.joda.time.MonthDay monthDay76 = monthDay73.minusMonths((int) (byte) 100);
        int int77 = monthDay76.getDayOfMonth();
        boolean boolean78 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay76);
        int int79 = monthDay31.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        java.lang.String str14 = property11.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Jan" + "'", str14, "Jan");
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        int int43 = monthDay13.compareTo((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay13.plus(readablePeriod44);
        org.joda.time.MonthDay.Property property46 = monthDay45.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(dateTimeZone14);
        org.joda.time.MonthDay monthDay17 = monthDay15.minusDays(100);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = monthDay19.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = monthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = monthDay3.isAfter((org.joda.time.ReadablePartial) monthDay15);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property14.getMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = monthDay16.getValue(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay16);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays(31);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay33.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.plus(readablePeriod49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.MonthDay monthDay64 = property61.addWrapFieldToCopy((int) (short) 1);
        boolean boolean65 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay44.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology68 = monthDay67.getChronology();
        org.joda.time.MonthDay monthDay69 = monthDay42.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay70 = monthDay28.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay(10L, chronology68);
        org.joda.time.MonthDay monthDay72 = new org.joda.time.MonthDay((long) 30, chronology68);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay70);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = monthDay1.plusMonths((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = monthDay6.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay61 = monthDay58.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay63 = monthDay61.plusMonths(1);
        int int64 = monthDay61.size();
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.DurationField durationField77 = property75.getDurationField();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property88 = monthDay81.property(dateTimeFieldType87);
        boolean boolean89 = property75.equals((java.lang.Object) monthDay81);
        int int90 = property75.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property75.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay61.withField(dateTimeFieldType91, (int) (byte) 1);
        int int94 = monthDay15.indexOf(dateTimeFieldType91);
        org.joda.time.MonthDay monthDay96 = monthDay13.withField(dateTimeFieldType91, 11);
        int[] intArray97 = monthDay96.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = null;
        java.lang.String str99 = monthDay96.toString(dateTimeFormatter98);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(monthDay96);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[1, 11]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "--01-11" + "'", str99, "--01-11");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        java.lang.String str11 = property6.getAsString();
        org.joda.time.MonthDay monthDay13 = property6.addWrapFieldToCopy(10);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay21.dayOfMonth();
        org.joda.time.Chronology chronology27 = monthDay21.getChronology();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.now(chronology27);
        org.joda.time.MonthDay monthDay29 = monthDay19.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay19.minus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        int int44 = property42.getMaximumValue();
        org.joda.time.MonthDay monthDay46 = property42.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay48.plus(readablePeriod53);
        int int55 = monthDay48.getDayOfMonth();
        int int56 = property42.compareTo((org.joda.time.ReadablePartial) monthDay48);
        boolean boolean57 = monthDay31.isBefore((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.Chronology chronology58 = monthDay48.getChronology();
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay((long) 2, chronology58);
        org.joda.time.MonthDay monthDay60 = new org.joda.time.MonthDay(chronology58);
        org.joda.time.MonthDay monthDay61 = new org.joda.time.MonthDay(0L, chronology58);
        boolean boolean62 = property6.equals((java.lang.Object) chronology58);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = property10.addToCopy(11);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.Chronology chronology9 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.now(chronology9);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((int) 'a', 12, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = property20.setCopy(1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = monthDay22.getFieldTypes();
        java.lang.String str24 = monthDay22.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "--01-01" + "'", str24, "--01-01");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay6 = monthDay4.minusDays((int) '#');
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property13 = monthDay8.dayOfMonth();
        org.joda.time.Chronology chronology14 = monthDay8.getChronology();
        org.joda.time.Chronology chronology15 = monthDay8.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = monthDay8.toDateTime(readableInstant16);
        org.joda.time.MonthDay monthDay19 = monthDay8.plusMonths((int) ' ');
        boolean boolean20 = monthDay4.isAfter((org.joda.time.ReadablePartial) monthDay19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay22.dayOfMonth();
        org.joda.time.MonthDay monthDay29 = property27.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay31 = property27.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = monthDay33.minusMonths((int) (byte) -1);
        boolean boolean38 = property27.equals((java.lang.Object) monthDay37);
        int int39 = property27.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property27.getFieldType();
        org.joda.time.MonthDay.Property property41 = monthDay19.property(dateTimeFieldType40);
        int int42 = monthDay0.get(dateTimeFieldType40);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property57 = monthDay56.dayOfMonth();
        int int58 = property57.getMaximumValueOverall();
        java.util.Locale locale60 = null;
        org.joda.time.MonthDay monthDay61 = property57.setCopy("1", locale60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay67.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property72 = monthDay65.property(dateTimeFieldType71);
        int int73 = property72.get();
        org.joda.time.MonthDay monthDay75 = property72.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str76 = property72.getAsString();
        java.lang.String str77 = property72.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property72.getFieldType();
        org.joda.time.MonthDay.Property property79 = monthDay61.property(dateTimeFieldType78);
        org.joda.time.MonthDay.Property property80 = monthDay0.property(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 25 + "'", int42 == 25);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 31 + "'", int58 == 31);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy((int) '4');
        org.joda.time.Chronology chronology29 = monthDay28.getChronology();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(chronology29);
        int int31 = monthDay30.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 25 + "'", int31 == 25);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addWrapFieldToCopy((int) (short) 10);
        int int18 = property14.getMinimumValueOverall();
        org.joda.time.DurationField durationField19 = property14.getDurationField();
        org.joda.time.MonthDay monthDay20 = property14.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = monthDay24.toString(dateTimeFormatter25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay.Property property41 = monthDay40.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.MonthDay monthDay44 = monthDay24.withField(dateTimeFieldType42, 2);
        org.joda.time.MonthDay monthDay46 = monthDay44.plusMonths(1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "--09-02" + "'", str26, "--09-02");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        org.joda.time.MonthDay monthDay42 = property40.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = monthDay44.indexOf(dateTimeFieldType58);
        int int61 = monthDay42.get(dateTimeFieldType58);
        int int62 = monthDay28.indexOf(dateTimeFieldType58);
        org.joda.time.Chronology chronology63 = monthDay28.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.util.Locale locale14 = null;
        java.lang.String str15 = property10.getAsText(locale14);
        org.joda.time.DateTimeField dateTimeField16 = property10.getField();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str31 = property27.getAsString();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        int int49 = monthDay33.indexOf(dateTimeFieldType47);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        int int61 = property60.get();
        org.joda.time.MonthDay monthDay63 = property60.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        int int75 = property74.get();
        org.joda.time.DurationField durationField76 = property74.getDurationField();
        java.util.Locale locale77 = null;
        int int78 = property74.getMaximumTextLength(locale77);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay80.withChronologyRetainFields(chronology81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = monthDay80.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property85 = monthDay80.dayOfMonth();
        org.joda.time.Chronology chronology86 = monthDay80.getChronology();
        org.joda.time.Chronology chronology87 = monthDay80.getChronology();
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = monthDay80.toDateTime(readableInstant88);
        int int90 = property74.compareTo((org.joda.time.ReadableInstant) dateTime89);
        int int91 = property60.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime92 = monthDay33.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        int int93 = property27.compareTo((org.joda.time.ReadableInstant) dateTime89);
        int int94 = property10.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(10L, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = monthDay15.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay4.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        int int40 = monthDay33.getDayOfMonth();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) monthDay33);
        boolean boolean42 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay33);
        org.joda.time.Chronology chronology43 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 2, chronology43);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        boolean boolean54 = monthDay47.isSupported(dateTimeFieldType53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay58 = monthDay56.minusDays((int) '#');
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay60.dayOfMonth();
        org.joda.time.Chronology chronology66 = monthDay60.getChronology();
        org.joda.time.Chronology chronology67 = monthDay60.getChronology();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = monthDay60.toDateTime(readableInstant68);
        org.joda.time.MonthDay monthDay71 = monthDay60.plusMonths((int) ' ');
        boolean boolean72 = monthDay56.isAfter((org.joda.time.ReadablePartial) monthDay71);
        boolean boolean73 = monthDay47.isBefore((org.joda.time.ReadablePartial) monthDay71);
        org.joda.time.Chronology chronology74 = monthDay71.getChronology();
        org.joda.time.MonthDay monthDay75 = new org.joda.time.MonthDay((long) 0, chronology74);
        org.joda.time.MonthDay monthDay76 = monthDay44.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay78 = monthDay44.withDayOfMonth(4);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay72.dayOfMonth();
        org.joda.time.Chronology chronology78 = monthDay72.getChronology();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay80 = monthDay70.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay81 = monthDay16.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay(10L);
        int[] intArray86 = monthDay85.getValues();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay85.plus(readablePeriod87);
        boolean boolean89 = monthDay83.equals((java.lang.Object) monthDay88);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay29.getFields();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.withPeriodAdded(readablePeriod33, 0);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property50 = monthDay49.dayOfMonth();
        int int51 = property50.getMaximumValueOverall();
        int int52 = property50.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay54 = property50.setCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        org.joda.time.MonthDay monthDay57 = monthDay35.withField(dateTimeFieldType55, 8);
        int int58 = monthDay57.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("2");
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.now(chronology23);
        org.joda.time.MonthDay monthDay25 = monthDay15.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(10L, chronology23);
        org.joda.time.MonthDay monthDay27 = monthDay10.withChronologyRetainFields(chronology23);
        boolean boolean28 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay27);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = monthDay27.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay30.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 2);
        boolean boolean45 = monthDay30.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        int int57 = property56.get();
        org.joda.time.MonthDay monthDay59 = property56.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay61 = monthDay59.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.minus(readablePeriod62);
        org.joda.time.Chronology chronology64 = monthDay63.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay44.withChronologyRetainFields(chronology64);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = monthDay45.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay12.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology36 = monthDay35.getChronology();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology36);
        org.joda.time.MonthDay monthDay38 = monthDay1.withChronologyRetainFields(chronology36);
        int int39 = monthDay38.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay33.getFieldType(0);
        int int57 = monthDay28.indexOf(dateTimeFieldType56);
        int int58 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = monthDay28.minusDays((int) (short) 0);
        org.joda.time.MonthDay.Property property61 = monthDay60.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = monthDay41.getFieldTypes();
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        int int61 = property60.get();
        org.joda.time.MonthDay monthDay63 = property60.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str64 = property60.getAsString();
        java.lang.String str65 = property60.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property60.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay68 = monthDay41.withField(dateTimeFieldType66, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        java.util.Locale locale31 = null;
        java.lang.String str32 = property10.getAsShortText(locale31);
        org.joda.time.MonthDay monthDay34 = property10.addWrapFieldToCopy((int) (byte) 1);
        java.lang.String str35 = monthDay34.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "--01-02" + "'", str35, "--01-02");
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property14.getFieldType();
        java.lang.String str17 = property14.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay10 = monthDay1.plusMonths((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay12 = monthDay10.withMonthOfYear((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.now(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.now(chronology22);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        java.lang.String str27 = monthDay24.toString();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = monthDay29.getFields();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay29.minus(readablePeriod52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay56 = monthDay29.withPeriodAdded(readablePeriod54, (int) (byte) -1);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = new org.joda.time.MonthDay((long) (short) 100, chronology58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay61.dayOfMonth();
        org.joda.time.Chronology chronology67 = monthDay61.getChronology();
        org.joda.time.Chronology chronology68 = monthDay61.getChronology();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = monthDay61.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime71 = monthDay59.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime72 = monthDay29.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = monthDay24.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.MonthDay monthDay76 = monthDay24.withPeriodAdded(readablePeriod74, 3);
        org.joda.time.MonthDay monthDay78 = monthDay24.withDayOfMonth((int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "--01-01" + "'", str27, "--01-01");
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay19 = monthDay16.withPeriodAdded(readablePeriod17, 1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        int int26 = monthDay19.indexOf(dateTimeFieldType25);
        boolean boolean27 = monthDay14.isSupported(dateTimeFieldType25);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        org.joda.time.MonthDay.Property property39 = monthDay31.monthOfYear();
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        org.joda.time.MonthDay.Property property48 = monthDay31.property(dateTimeFieldType47);
        java.lang.String str49 = property48.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property48.getFieldType();
        int int51 = monthDay14.indexOf(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = monthDay14.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Property[dayOfMonth]" + "'", str49, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        java.lang.String str28 = property10.getName();
        int int29 = property10.get();
        int int30 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "dayOfMonth" + "'", str28, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((java.lang.Object) monthDay4);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay14.withChronologyRetainFields(chronology36);
        org.joda.time.Chronology chronology38 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay43 = monthDay40.withPeriodAdded(readablePeriod41, 1);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        int int50 = monthDay43.indexOf(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay43.withChronologyRetainFields(chronology51);
        boolean boolean53 = monthDay37.isAfter((org.joda.time.ReadablePartial) monthDay43);
        org.joda.time.MonthDay monthDay55 = monthDay43.plusDays((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray56 = monthDay43.getFields();
        int int57 = monthDay4.compareTo((org.joda.time.ReadablePartial) monthDay43);
        java.util.Locale locale59 = null;
        java.lang.String str60 = monthDay43.toString("--01-31", locale59);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "--01-31" + "'", str60, "--01-31");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("2");
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property15 = monthDay10.dayOfMonth();
        org.joda.time.Chronology chronology16 = monthDay10.getChronology();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.now(chronology16);
        org.joda.time.MonthDay monthDay18 = monthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(10L, chronology16);
        org.joda.time.MonthDay monthDay20 = monthDay3.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay((int) (byte) 1, (int) (short) -1, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        java.lang.String str28 = property10.getName();
        org.joda.time.DateTimeField dateTimeField29 = property10.getField();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay31.plus(readablePeriod36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        int int49 = property48.get();
        org.joda.time.MonthDay monthDay51 = property48.addWrapFieldToCopy((int) (short) 1);
        boolean boolean52 = monthDay31.isBefore((org.joda.time.ReadablePartial) monthDay51);
        org.joda.time.MonthDay monthDay54 = monthDay51.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay56 = monthDay54.plusMonths(1);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        boolean boolean65 = monthDay58.isSupported(dateTimeFieldType64);
        boolean boolean66 = monthDay54.isSupported(dateTimeFieldType64);
        org.joda.time.Chronology chronology67 = monthDay54.getChronology();
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay69.dayOfMonth();
        org.joda.time.MonthDay monthDay76 = property74.addWrapFieldToCopy(1);
        java.util.Locale locale77 = null;
        java.lang.String str78 = property74.getAsText(locale77);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay80.withChronologyRetainFields(chronology81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = monthDay80.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property85 = monthDay80.dayOfMonth();
        org.joda.time.Chronology chronology86 = monthDay80.getChronology();
        org.joda.time.Chronology chronology87 = monthDay80.getChronology();
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = monthDay80.toDateTime(readableInstant88);
        int int90 = property74.compareTo((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime91 = monthDay54.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        int int92 = property10.compareTo((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "dayOfMonth" + "'", str28, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology14 = monthDay3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = monthDay18.indexOf(dateTimeFieldType32);
        org.joda.time.MonthDay monthDay36 = monthDay3.withField(dateTimeFieldType32, 12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay34 = monthDay24.withField(dateTimeFieldType32, 10);
        org.joda.time.MonthDay monthDay36 = monthDay24.plusMonths((int) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        java.lang.String str15 = property11.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property11.setCopy(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        int int29 = monthDay28.size();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay33.property(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay33.monthOfYear();
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property58 = monthDay51.property(dateTimeFieldType57);
        int int59 = monthDay43.indexOf(dateTimeFieldType57);
        boolean boolean60 = monthDay33.equals((java.lang.Object) int59);
        org.joda.time.MonthDay monthDay62 = monthDay33.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay64 = monthDay62.minusMonths(100);
        int int65 = monthDay28.compareTo((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.MonthDay monthDay67 = monthDay64.minusDays(2);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        java.util.Locale locale27 = null;
        java.lang.String str28 = monthDay24.toString("--01-01", locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        java.lang.String str42 = monthDay32.toString("--11-24");
        boolean boolean43 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay32);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = monthDay24.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "--01-01" + "'", str28, "--01-01");
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "--11-24" + "'", str42, "--11-24");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(30, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.MonthDay monthDay14 = property11.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property11.getFieldType();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        org.joda.time.DurationField durationField28 = property26.getDurationField();
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        boolean boolean40 = property26.equals((java.lang.Object) monthDay32);
        org.joda.time.DateTimeField dateTimeField41 = property26.getField();
        java.util.Locale locale42 = null;
        int int43 = property26.getMaximumShortTextLength(locale42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        org.joda.time.MonthDay.Property property55 = monthDay47.monthOfYear();
        int int56 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay.Property property57 = monthDay47.dayOfMonth();
        int int58 = monthDay47.getDayOfMonth();
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay60.dayOfMonth();
        org.joda.time.Chronology chronology66 = monthDay60.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay47.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = new org.joda.time.MonthDay((java.lang.Object) locale42, chronology66);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay(chronology66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay((java.lang.Object) dateTimeFieldType15, chronology66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        org.joda.time.Chronology chronology13 = monthDay7.getChronology();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology13);
        org.joda.time.MonthDay monthDay15 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay5.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        int int30 = property28.getMaximumValue();
        org.joda.time.MonthDay monthDay32 = property28.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        int int41 = monthDay34.getDayOfMonth();
        int int42 = property28.compareTo((org.joda.time.ReadablePartial) monthDay34);
        boolean boolean43 = monthDay17.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.Chronology chronology44 = monthDay34.getChronology();
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((long) 2, chronology44);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay((long) 10, chronology44);
        int int47 = monthDay46.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 31 + "'", int30 == 31);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay28.plus(readablePeriod33);
        int int35 = monthDay34.getMonthOfYear();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        java.util.Locale locale47 = null;
        int int48 = property46.getMaximumTextLength(locale47);
        org.joda.time.MonthDay monthDay50 = property46.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.minus(readablePeriod51);
        boolean boolean53 = monthDay34.isAfter((org.joda.time.ReadablePartial) monthDay50);
        boolean boolean54 = monthDay21.isBefore((org.joda.time.ReadablePartial) monthDay34);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = monthDay21.getValue(25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        java.lang.String str18 = property10.getAsText();
        int int19 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay29.withPeriodAdded(readablePeriod30, 1);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay32.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay32.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.now();
        boolean boolean43 = monthDay41.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((java.lang.Object) monthDay41);
        boolean boolean45 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay44);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((long) 28, chronology1);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay60.plus(readablePeriod65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay70.property(dateTimeFieldType76);
        int int78 = property77.get();
        org.joda.time.MonthDay monthDay80 = property77.addWrapFieldToCopy((int) (short) 1);
        boolean boolean81 = monthDay60.isBefore((org.joda.time.ReadablePartial) monthDay80);
        org.joda.time.MonthDay monthDay83 = monthDay80.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay85 = monthDay83.plusMonths(1);
        int int86 = monthDay57.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int87 = monthDay25.compareTo((org.joda.time.ReadablePartial) monthDay83);
        int int88 = monthDay83.getMonthOfYear();
        org.joda.time.MonthDay monthDay90 = monthDay83.plusDays(100);
        org.joda.time.MonthDay.Property property91 = monthDay90.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType93 = monthDay90.getFieldType(8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay7.dayOfMonth();
        org.joda.time.Chronology chronology13 = monthDay7.getChronology();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now(chronology13);
        org.joda.time.MonthDay monthDay15 = monthDay5.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = new org.joda.time.MonthDay(10L, chronology13);
        org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay(chronology13);
        org.joda.time.MonthDay monthDay18 = new org.joda.time.MonthDay((long) ' ', chronology13);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay15);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        java.lang.String str11 = property6.getAsString();
        org.joda.time.MonthDay monthDay13 = property6.addWrapFieldToCopy(10);
        org.joda.time.DurationField durationField14 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        int int26 = property10.getMaximumValueOverall();
        java.lang.String str27 = property10.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.util.Locale locale44 = null;
        java.lang.String str45 = property41.getAsText(locale44);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2" + "'", str45, "2");
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        java.lang.String str44 = property41.getAsShortText();
        java.util.Locale locale45 = null;
        int int46 = property41.getMaximumTextLength(locale45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.MonthDay monthDay60 = property57.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str61 = property57.getAsString();
        java.lang.String str62 = property57.getAsText();
        org.joda.time.DurationField durationField63 = property57.getRangeDurationField();
        int int64 = property57.getMinimumValue();
        org.joda.time.MonthDay monthDay66 = property57.addToCopy(0);
        org.joda.time.MonthDay monthDay68 = monthDay66.plusDays((int) 'a');
        int int69 = property41.compareTo((org.joda.time.ReadablePartial) monthDay66);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        int int39 = monthDay32.getDayOfMonth();
        int int40 = property26.compareTo((org.joda.time.ReadablePartial) monthDay32);
        boolean boolean41 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology42 = monthDay32.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = monthDay32.getValue(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        int int26 = property10.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property10.getFieldType();
        org.joda.time.MonthDay monthDay28 = property10.getMonthDay();
        java.lang.String str29 = property10.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[dayOfMonth]" + "'", str29, "Property[dayOfMonth]");
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay30.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay44.dayOfMonth();
        org.joda.time.Chronology chronology50 = monthDay44.getChronology();
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        boolean boolean62 = monthDay44.isSupported(dateTimeFieldType60);
        org.joda.time.MonthDay.Property property63 = monthDay44.monthOfYear();
        org.joda.time.MonthDay monthDay65 = property63.setCopy(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay65.getFieldType((int) (byte) 1);
        int int68 = monthDay30.get(dateTimeFieldType67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay30.minus(readablePeriod69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.minus(readablePeriod71);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        java.lang.String str37 = monthDay32.toString("--02-02");
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay40 = monthDay32.withPeriodAdded(readablePeriod38, (int) (byte) 1);
        org.joda.time.MonthDay monthDay42 = monthDay32.plusDays(11);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--02-02" + "'", str37, "--02-02");
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        int int39 = monthDay32.getDayOfMonth();
        int int40 = property26.compareTo((org.joda.time.ReadablePartial) monthDay32);
        boolean boolean41 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        java.lang.String str42 = monthDay15.toString();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay46 = monthDay44.minusDays((int) '#');
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.Chronology chronology55 = monthDay48.getChronology();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = monthDay48.toDateTime(readableInstant56);
        org.joda.time.MonthDay monthDay59 = monthDay48.plusMonths((int) ' ');
        boolean boolean60 = monthDay44.isAfter((org.joda.time.ReadablePartial) monthDay59);
        org.joda.time.Chronology chronology61 = monthDay59.getChronology();
        org.joda.time.MonthDay monthDay62 = monthDay15.withChronologyRetainFields(chronology61);
        org.joda.time.Chronology chronology63 = monthDay15.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "--01-01" + "'", str42, "--01-01");
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        boolean boolean68 = monthDay61.isSupported(dateTimeFieldType67);
        boolean boolean69 = monthDay57.isSupported(dateTimeFieldType67);
        org.joda.time.Chronology chronology70 = monthDay57.getChronology();
        org.joda.time.MonthDay monthDay71 = monthDay32.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.now(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.now(chronology70);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay73);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        java.lang.String str15 = property10.getAsText();
        int int16 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        java.util.Locale locale22 = null;
        int int23 = property6.getMaximumShortTextLength(locale22);
        org.joda.time.DurationField durationField24 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((-1L), chronology11);
        org.joda.time.MonthDay monthDay13 = new org.joda.time.MonthDay((java.lang.Object) monthDay12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay17 = monthDay15.minusDays((int) '#');
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = monthDay19.toDateTime(readableInstant27);
        org.joda.time.MonthDay monthDay30 = monthDay19.plusMonths((int) ' ');
        boolean boolean31 = monthDay15.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.MonthDay monthDay40 = property38.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay42 = property38.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = monthDay44.minusMonths((int) (byte) -1);
        boolean boolean49 = property38.equals((java.lang.Object) monthDay48);
        int int50 = property38.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property38.getFieldType();
        org.joda.time.MonthDay.Property property52 = monthDay30.property(dateTimeFieldType51);
        int int53 = monthDay13.indexOf(dateTimeFieldType51);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay55.dayOfMonth();
        org.joda.time.Chronology chronology61 = monthDay55.getChronology();
        org.joda.time.Chronology chronology62 = monthDay55.getChronology();
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.now(chronology62);
        org.joda.time.MonthDay monthDay64 = monthDay13.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = new org.joda.time.MonthDay((-1L), chronology62);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.now(chronology62);
        org.joda.time.MonthDay monthDay67 = new org.joda.time.MonthDay((long) '#', chronology62);
        org.joda.time.MonthDay monthDay68 = new org.joda.time.MonthDay((long) 0, chronology62);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 31 + "'", int50 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((long) (short) 100, chronology1);
        org.joda.time.DateTimeField dateTimeField4 = monthDay2.getField((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        int int20 = monthDay4.get(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = monthDay4.plusDays(0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay4.minus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        int int37 = property35.getMaximumValue();
        org.joda.time.MonthDay monthDay38 = property35.getMonthDay();
        boolean boolean39 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay38);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        int int27 = property10.getMinimumValueOverall();
        java.lang.String str28 = property10.getAsText();
        int int29 = property10.get();
        org.joda.time.DurationField durationField30 = property10.getRangeDurationField();
        java.lang.String str31 = property10.toString();
        java.util.Locale locale32 = null;
        int int33 = property10.getMaximumTextLength(locale32);
        org.joda.time.MonthDay monthDay35 = property10.addWrapFieldToCopy((int) (short) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[dayOfMonth]" + "'", str31, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(monthDay35);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = monthDay6.isSupported(dateTimeFieldType22);
        org.joda.time.MonthDay.Property property25 = monthDay6.monthOfYear();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.DurationField durationField38 = property36.getDurationField();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        boolean boolean50 = property36.equals((java.lang.Object) monthDay42);
        int int51 = property36.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property36.getFieldType();
        boolean boolean53 = monthDay6.isSupported(dateTimeFieldType52);
        org.joda.time.MonthDay monthDay55 = monthDay1.withField(dateTimeFieldType52, 30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = monthDay55.toString(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "--01-30" + "'", str57, "--01-30");
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        java.lang.String str15 = property14.toString();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = monthDay17.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay27 = monthDay17.plusDays(31);
        int int28 = property14.compareTo((org.joda.time.ReadablePartial) monthDay27);
        int[] intArray29 = monthDay27.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2, 1]");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (byte) 0);
        int int15 = property10.getMinimumValue();
        java.lang.String str16 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfMonth" + "'", str16, "dayOfMonth");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        org.joda.time.MonthDay monthDay30 = property10.addToCopy((int) '4');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        java.util.Locale locale31 = null;
        java.lang.String str32 = property10.getAsShortText(locale31);
        org.joda.time.MonthDay monthDay34 = property10.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay34.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        java.lang.String str28 = property10.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay30 = property10.setCopy((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "dayOfMonth" + "'", str28, "dayOfMonth");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay72.dayOfMonth();
        org.joda.time.Chronology chronology78 = monthDay72.getChronology();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay80 = monthDay70.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay81 = monthDay16.withChronologyRetainFields(chronology78);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.MonthDay monthDay84 = monthDay16.withPeriodAdded(readablePeriod82, 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay84);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay((int) (short) -1, 30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.plus(readablePeriod34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        boolean boolean50 = monthDay29.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.MonthDay monthDay52 = monthDay49.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay54 = monthDay52.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay52.minus(readablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.MonthDay monthDay58 = new org.joda.time.MonthDay(dateTimeZone57);
        boolean boolean59 = monthDay56.isEqual((org.joda.time.ReadablePartial) monthDay58);
        boolean boolean60 = monthDay16.equals((java.lang.Object) monthDay56);
        org.joda.time.MonthDay.Property property61 = monthDay56.dayOfMonth();
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.MonthDay monthDay66 = monthDay63.withPeriodAdded(readablePeriod64, 1);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        int int73 = monthDay66.indexOf(dateTimeFieldType72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay66.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay77 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) 1);
        int int82 = monthDay66.get(dateTimeFieldType81);
        org.joda.time.MonthDay monthDay84 = monthDay66.plusDays(0);
        int int85 = property61.compareTo((org.joda.time.ReadablePartial) monthDay66);
        int int86 = property10.compareTo((org.joda.time.ReadablePartial) monthDay66);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.setCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property14.getFieldType();
        java.util.Locale locale20 = null;
        int int21 = property14.getMaximumShortTextLength(locale20);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        java.lang.String str15 = property14.toString();
        int int16 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        int int26 = property10.getMaximumValueOverall();
        int int27 = property10.get();
        java.lang.String str28 = property10.getAsShortText();
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        int int35 = monthDay30.getDayOfMonth();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay37.plus(readablePeriod42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        int int55 = property54.get();
        org.joda.time.MonthDay monthDay57 = property54.addWrapFieldToCopy((int) (short) 1);
        boolean boolean58 = monthDay37.isBefore((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.MonthDay monthDay60 = monthDay57.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay62 = monthDay60.plusMonths(1);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        boolean boolean71 = monthDay64.isSupported(dateTimeFieldType70);
        boolean boolean72 = monthDay60.isSupported(dateTimeFieldType70);
        org.joda.time.Chronology chronology73 = monthDay60.getChronology();
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay75.dayOfMonth();
        org.joda.time.MonthDay monthDay82 = property80.addWrapFieldToCopy(1);
        java.util.Locale locale83 = null;
        java.lang.String str84 = property80.getAsText(locale83);
        org.joda.time.MonthDay monthDay86 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay86.withChronologyRetainFields(chronology87);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = monthDay86.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property91 = monthDay86.dayOfMonth();
        org.joda.time.Chronology chronology92 = monthDay86.getChronology();
        org.joda.time.Chronology chronology93 = monthDay86.getChronology();
        org.joda.time.ReadableInstant readableInstant94 = null;
        org.joda.time.DateTime dateTime95 = monthDay86.toDateTime(readableInstant94);
        int int96 = property80.compareTo((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime97 = monthDay60.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime98 = monthDay30.toDateTime((org.joda.time.ReadableInstant) dateTime97);
        int int99 = property10.compareTo((org.joda.time.ReadableInstant) dateTime98);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1" + "'", str84, "1");
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay39.withPeriodAdded(readablePeriod40, 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        int int49 = monthDay42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay42.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay.Property property52 = monthDay51.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.MonthDay.Property property54 = monthDay37.property(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.joda.time.MonthDay monthDay57 = property54.addWrapFieldToCopy((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay59 = monthDay57.withMonthOfYear((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(monthDay57);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        org.joda.time.MonthDay monthDay16 = property11.addToCopy(11);
        org.joda.time.MonthDay monthDay18 = property11.addToCopy((int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay38.minus(readablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay(dateTimeZone43);
        boolean boolean45 = monthDay42.isEqual((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        int int65 = property64.get();
        org.joda.time.MonthDay monthDay67 = property64.addWrapFieldToCopy((int) (short) 1);
        boolean boolean68 = monthDay47.isBefore((org.joda.time.ReadablePartial) monthDay67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay47.getFieldType(0);
        int int71 = monthDay42.indexOf(dateTimeFieldType70);
        boolean boolean72 = monthDay13.isSupported(dateTimeFieldType70);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay13.minus(readablePeriod73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay13.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(monthDay74);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay2.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        int int20 = property19.get();
        org.joda.time.MonthDay monthDay22 = property19.addWrapFieldToCopy((int) (short) 1);
        boolean boolean23 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = monthDay2.getFields();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay2.minus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = monthDay26.minusDays(31);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay30.plus(readablePeriod35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        int int48 = property47.get();
        org.joda.time.MonthDay monthDay50 = property47.addWrapFieldToCopy((int) (short) 1);
        boolean boolean51 = monthDay30.isBefore((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay30.withChronologyRetainFields(chronology52);
        org.joda.time.Chronology chronology54 = monthDay53.getChronology();
        int[] intArray55 = monthDay53.getValues();
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay63 = monthDay53.withField(dateTimeFieldType61, 10);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay69.dayOfMonth();
        org.joda.time.Chronology chronology75 = monthDay69.getChronology();
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.now(chronology75);
        org.joda.time.MonthDay monthDay77 = monthDay67.withChronologyRetainFields(chronology75);
        org.joda.time.Chronology chronology78 = monthDay67.getChronology();
        org.joda.time.MonthDay monthDay79 = new org.joda.time.MonthDay((java.lang.Object) monthDay63, chronology78);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay82 = monthDay26.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((-1L), chronology78);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay34 = monthDay24.withField(dateTimeFieldType32, 10);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.plus(readablePeriod35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.plus(readablePeriod37);
        java.util.Locale locale40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = monthDay36.toString("hi!", locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        int int14 = monthDay5.getDayOfMonth();
        org.joda.time.MonthDay.Property property15 = monthDay5.dayOfMonth();
        int int16 = monthDay5.getDayOfMonth();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay18.dayOfMonth();
        org.joda.time.Chronology chronology24 = monthDay18.getChronology();
        org.joda.time.MonthDay monthDay25 = monthDay5.withChronologyRetainFields(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay((int) (byte) -1, (-1), chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        java.lang.Class<?> wildcardClass31 = property10.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay27.plus(readablePeriod31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay27.plus(readablePeriod33);
        org.joda.time.MonthDay monthDay36 = monthDay27.withDayOfMonth((int) (short) 10);
        boolean boolean37 = monthDay25.equals((java.lang.Object) monthDay27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = monthDay25.toString("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = monthDay56.plusDays(2);
        boolean boolean59 = monthDay24.isEqual((org.joda.time.ReadablePartial) monthDay56);
        int int60 = monthDay24.size();
        java.lang.String str61 = monthDay24.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "--01-01" + "'", str61, "--01-01");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        int int41 = monthDay13.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay26.minus(readablePeriod28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay16.plus(readablePeriod39);
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = monthDay40.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        int int18 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay20.dayOfMonth();
        org.joda.time.Chronology chronology26 = monthDay20.getChronology();
        org.joda.time.Chronology chronology27 = monthDay20.getChronology();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = monthDay20.toDateTime(readableInstant28);
        org.joda.time.MonthDay monthDay31 = monthDay20.plusMonths((int) ' ');
        int int32 = property10.compareTo((org.joda.time.ReadablePartial) monthDay20);
        java.util.Locale locale33 = null;
        int int34 = property10.getMaximumTextLength(locale33);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusMonths(1);
        int int45 = monthDay16.compareTo((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        int int65 = property64.get();
        org.joda.time.MonthDay monthDay67 = property64.addWrapFieldToCopy((int) (short) 1);
        boolean boolean68 = monthDay47.isBefore((org.joda.time.ReadablePartial) monthDay67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay47.withChronologyRetainFields(chronology69);
        org.joda.time.Chronology chronology71 = monthDay70.getChronology();
        org.joda.time.MonthDay monthDay72 = new org.joda.time.MonthDay(chronology71);
        org.joda.time.MonthDay monthDay74 = monthDay72.plusMonths((int) '#');
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = monthDay76.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property81 = monthDay76.dayOfMonth();
        org.joda.time.MonthDay monthDay83 = property81.addWrapFieldToCopy(1);
        int int84 = property81.getMaximumValue();
        int int85 = property81.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property81.getFieldType();
        int int87 = monthDay72.get(dateTimeFieldType86);
        boolean boolean88 = monthDay16.isAfter((org.joda.time.ReadablePartial) monthDay72);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 31 + "'", int84 == 31);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 31 + "'", int85 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 25 + "'", int87 == 25);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy((int) '4');
        int int29 = property10.get();
        java.util.Locale locale30 = null;
        int int31 = property10.getMaximumTextLength(locale30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        int int37 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay.Property property38 = monthDay28.dayOfMonth();
        int int39 = monthDay28.getDayOfMonth();
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.Chronology chronology47 = monthDay41.getChronology();
        org.joda.time.MonthDay monthDay48 = monthDay28.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay(chronology47);
        boolean boolean50 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = monthDay49.toDateTime(readableInstant51);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.MonthDay monthDay37 = property34.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property38 = monthDay37.dayOfMonth();
        int int39 = property38.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay41 = property38.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property38.getFieldType();
        org.joda.time.MonthDay.Property property43 = monthDay1.property(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = monthDay19.getFields();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 1);
        boolean boolean26 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay22);
        boolean boolean27 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay.Property property28 = monthDay22.dayOfMonth();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property28.getAsText(locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property28.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        org.joda.time.MonthDay.Property property39 = monthDay31.monthOfYear();
        int int40 = monthDay31.getDayOfMonth();
        org.joda.time.MonthDay.Property property41 = monthDay31.dayOfMonth();
        int int42 = monthDay31.getDayOfMonth();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay44.dayOfMonth();
        org.joda.time.Chronology chronology50 = monthDay44.getChronology();
        org.joda.time.MonthDay monthDay51 = monthDay31.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay((java.lang.Object) locale26, chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.now(chronology50);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.now(chronology50);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay54);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        org.joda.time.DurationField durationField39 = property38.getDurationField();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay42.dayOfMonth();
        org.joda.time.Chronology chronology48 = monthDay42.getChronology();
        org.joda.time.MonthDay monthDay49 = new org.joda.time.MonthDay((-1L), chronology48);
        boolean boolean50 = property38.equals((java.lang.Object) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay52 = property38.setCopy(31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("2");
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.now(chronology23);
        org.joda.time.MonthDay monthDay25 = monthDay15.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(10L, chronology23);
        org.joda.time.MonthDay monthDay27 = monthDay10.withChronologyRetainFields(chronology23);
        boolean boolean28 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = monthDay4.toString(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--01-01" + "'", str30, "--01-01");
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.now(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay((java.lang.Object) chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay10);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        int int49 = property48.get();
        org.joda.time.MonthDay monthDay51 = property48.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property52 = monthDay51.dayOfMonth();
        int int53 = property52.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay55 = property52.addWrapFieldToCopy((int) (short) 10);
        int int56 = property52.getMinimumValueOverall();
        boolean boolean57 = monthDay37.equals((java.lang.Object) property52);
        org.joda.time.DurationField durationField58 = property52.getRangeDurationField();
        org.joda.time.MonthDay monthDay60 = property52.addWrapFieldToCopy((int) '#');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(monthDay60);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = monthDay3.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay((java.lang.Object) monthDay9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay14 = monthDay12.minusDays((int) '#');
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        org.joda.time.MonthDay monthDay27 = monthDay16.plusMonths((int) ' ');
        boolean boolean28 = monthDay12.isAfter((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.MonthDay monthDay37 = property35.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay39 = property35.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = monthDay41.minusMonths((int) (byte) -1);
        boolean boolean46 = property35.equals((java.lang.Object) monthDay45);
        int int47 = property35.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property35.getFieldType();
        org.joda.time.MonthDay.Property property49 = monthDay27.property(dateTimeFieldType48);
        int int50 = monthDay10.indexOf(dateTimeFieldType48);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay52.dayOfMonth();
        org.joda.time.Chronology chronology58 = monthDay52.getChronology();
        org.joda.time.Chronology chronology59 = monthDay52.getChronology();
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.now(chronology59);
        org.joda.time.MonthDay monthDay61 = monthDay10.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay(chronology59);
        org.joda.time.MonthDay monthDay64 = monthDay62.minusDays((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.MonthDay monthDay67 = monthDay62.withPeriodAdded(readablePeriod65, (int) (short) 0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay67);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay50.plus(readablePeriod55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        org.joda.time.MonthDay monthDay70 = property67.addWrapFieldToCopy((int) (short) 1);
        boolean boolean71 = monthDay50.isBefore((org.joda.time.ReadablePartial) monthDay70);
        org.joda.time.MonthDay monthDay73 = monthDay70.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay75 = monthDay73.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay73.minus(readablePeriod76);
        int int78 = monthDay77.size();
        boolean boolean79 = monthDay41.isBefore((org.joda.time.ReadablePartial) monthDay77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType81 = monthDay77.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy(0);
        java.util.Locale locale20 = null;
        int int21 = property10.getMaximumShortTextLength(locale20);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = monthDay13.withField(dateTimeFieldType14, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay20 = monthDay17.withPeriodAdded(readablePeriod18, 1);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        int int27 = monthDay20.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay20.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay31.dayOfMonth();
        org.joda.time.Chronology chronology37 = monthDay31.getChronology();
        org.joda.time.Chronology chronology38 = monthDay31.getChronology();
        boolean boolean39 = monthDay20.isEqual((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = monthDay31.toString(dateTimeFormatter40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay31.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay47.property(dateTimeFieldType53);
        int int55 = property54.get();
        org.joda.time.MonthDay monthDay57 = property54.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str58 = property54.getAsString();
        java.lang.String str59 = property54.getAsText();
        org.joda.time.DurationField durationField60 = property54.getRangeDurationField();
        int int61 = property54.getMinimumValue();
        org.joda.time.MonthDay monthDay63 = property54.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        int int75 = property74.get();
        org.joda.time.DurationField durationField76 = property74.getDurationField();
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MonthDay monthDay84 = monthDay82.withChronologyRetainFields(chronology83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = monthDay82.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property87 = monthDay80.property(dateTimeFieldType86);
        boolean boolean88 = property74.equals((java.lang.Object) monthDay80);
        org.joda.time.MonthDay monthDay89 = new org.joda.time.MonthDay((java.lang.Object) monthDay80);
        boolean boolean90 = property54.equals((java.lang.Object) monthDay89);
        boolean boolean91 = monthDay43.isAfter((org.joda.time.ReadablePartial) monthDay89);
        boolean boolean92 = property14.equals((java.lang.Object) boolean91);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "--01-01" + "'", str41, "--01-01");
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        org.joda.time.MonthDay.Property property57 = monthDay49.monthOfYear();
        int int58 = monthDay49.getDayOfMonth();
        boolean boolean59 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay((long) (short) 100, chronology61);
        int int63 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay62);
        int int64 = monthDay1.getDayOfMonth();
        org.joda.time.Chronology chronology65 = monthDay1.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(chronology65);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = monthDay1.toString(dateTimeFormatter6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = monthDay9.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay9.plus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        org.joda.time.MonthDay monthDay29 = property26.addWrapFieldToCopy((int) (short) 1);
        boolean boolean30 = monthDay9.isBefore((org.joda.time.ReadablePartial) monthDay29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay9.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        org.joda.time.MonthDay.Property property44 = monthDay36.monthOfYear();
        int int45 = monthDay36.getDayOfMonth();
        org.joda.time.MonthDay.Property property46 = monthDay36.dayOfMonth();
        int int47 = monthDay36.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay36.plus(readablePeriod48);
        boolean boolean50 = monthDay32.isBefore((org.joda.time.ReadablePartial) monthDay36);
        boolean boolean51 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay55.property(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay55.monthOfYear();
        int int64 = monthDay55.getDayOfMonth();
        org.joda.time.MonthDay.Property property65 = monthDay55.dayOfMonth();
        int int66 = monthDay55.getDayOfMonth();
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay68.dayOfMonth();
        org.joda.time.Chronology chronology74 = monthDay68.getChronology();
        org.joda.time.MonthDay monthDay75 = monthDay55.withChronologyRetainFields(chronology74);
        org.joda.time.MonthDay monthDay76 = new org.joda.time.MonthDay(chronology74);
        org.joda.time.MonthDay monthDay77 = new org.joda.time.MonthDay(chronology74);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.now(chronology74);
        boolean boolean79 = monthDay32.equals((java.lang.Object) monthDay78);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--01-01" + "'", str7, "--01-01");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (byte) 0);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        int int13 = property12.get();
        int int14 = property12.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property12.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        int int25 = monthDay18.getDayOfMonth();
        int int26 = property12.compareTo((org.joda.time.ReadablePartial) monthDay18);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = monthDay18.getFields();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        boolean boolean52 = property38.equals((java.lang.Object) monthDay44);
        int int53 = property38.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property38.getFieldType();
        org.joda.time.MonthDay monthDay56 = monthDay18.withField(dateTimeFieldType54, (int) (short) 10);
        org.joda.time.MonthDay monthDay58 = monthDay18.minusDays((-1));
        org.joda.time.MonthDay monthDay60 = monthDay58.minusMonths((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay(dateTimeZone61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        int int74 = property73.get();
        int int75 = property73.getMaximumValue();
        org.joda.time.MonthDay monthDay77 = property73.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.MonthDay monthDay82 = monthDay79.withPeriodAdded(readablePeriod80, 1);
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay84.withChronologyRetainFields(chronology85);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = monthDay84.getFieldType((int) (byte) 1);
        int int89 = monthDay82.indexOf(dateTimeFieldType88);
        boolean boolean90 = monthDay77.isSupported(dateTimeFieldType88);
        int int91 = monthDay62.get(dateTimeFieldType88);
        int int92 = monthDay58.indexOf(dateTimeFieldType88);
        boolean boolean93 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay58);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 31 + "'", int75 == 31);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 25 + "'", int91 == 25);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy(1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.DurationField durationField33 = property31.getDurationField();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay37.property(dateTimeFieldType43);
        boolean boolean45 = property31.equals((java.lang.Object) monthDay37);
        int int46 = property31.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property31.getFieldType();
        boolean boolean48 = monthDay1.isSupported(dateTimeFieldType47);
        int int49 = monthDay1.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        int int44 = property41.getMinimumValue();
        org.joda.time.MonthDay monthDay46 = property41.addToCopy((int) ' ');
        org.joda.time.DurationField durationField47 = property41.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay21.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays(31);
        int int29 = monthDay26.size();
        org.joda.time.MonthDay.Property property30 = monthDay26.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay28.plus(readablePeriod33);
        int int35 = monthDay34.getMonthOfYear();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        java.util.Locale locale47 = null;
        int int48 = property46.getMaximumTextLength(locale47);
        org.joda.time.MonthDay monthDay50 = property46.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.minus(readablePeriod51);
        boolean boolean53 = monthDay34.isAfter((org.joda.time.ReadablePartial) monthDay50);
        boolean boolean54 = monthDay21.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay56 = monthDay21.plusDays((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay59 = monthDay56.withPeriodAdded(readablePeriod57, (int) (byte) 1);
        java.util.Locale locale61 = null;
        java.lang.String str62 = monthDay59.toString("--01-31", locale61);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "--01-31" + "'", str62, "--01-31");
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(chronology22);
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology22);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = monthDay24.minusMonths(9);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.MonthDay monthDay37 = new org.joda.time.MonthDay((-1L), chronology36);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay((java.lang.Object) monthDay37);
        java.util.Locale locale40 = null;
        java.lang.String str41 = monthDay38.toString("2", locale40);
        boolean boolean42 = monthDay27.isAfter((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.plus(readablePeriod49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.MonthDay monthDay64 = property61.addWrapFieldToCopy((int) (short) 1);
        boolean boolean65 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay44.getFieldType(0);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay69.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property74.getFieldType();
        boolean boolean76 = monthDay44.isSupported(dateTimeFieldType75);
        boolean boolean77 = monthDay27.isSupported(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay4 = monthDay2.minusDays((int) '#');
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.Chronology chronology13 = monthDay6.getChronology();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = monthDay6.toDateTime(readableInstant14);
        org.joda.time.MonthDay monthDay17 = monthDay6.plusMonths((int) ' ');
        boolean boolean18 = monthDay2.isAfter((org.joda.time.ReadablePartial) monthDay17);
        org.joda.time.Chronology chronology19 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay((long) (byte) 0, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay22 = monthDay20.withMonthOfYear(31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay30.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays(100);
        int int46 = monthDay44.getValue(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.plus(readablePeriod17);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = monthDay18.getValue(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now();
        boolean boolean15 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay14);
        int int16 = monthDay13.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        java.util.Locale locale31 = null;
        java.lang.String str32 = property10.getAsShortText(locale31);
        org.joda.time.MonthDay monthDay34 = property10.addWrapFieldToCopy((int) (byte) 1);
        int int35 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.lang.String str11 = property10.getAsText();
        org.joda.time.MonthDay monthDay13 = property10.setCopy((int) (byte) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        org.joda.time.MonthDay.Property property25 = monthDay17.monthOfYear();
        int int26 = monthDay17.getDayOfMonth();
        org.joda.time.MonthDay.Property property27 = monthDay17.dayOfMonth();
        int int28 = monthDay17.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay17.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        org.joda.time.MonthDay.Property property42 = monthDay34.monthOfYear();
        int int43 = monthDay34.getDayOfMonth();
        org.joda.time.MonthDay.Property property44 = monthDay34.dayOfMonth();
        int int45 = monthDay34.getDayOfMonth();
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay47.dayOfMonth();
        org.joda.time.Chronology chronology53 = monthDay47.getChronology();
        org.joda.time.MonthDay monthDay54 = monthDay34.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay55 = monthDay30.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.plus(readablePeriod56);
        boolean boolean58 = monthDay13.isAfter((org.joda.time.ReadablePartial) monthDay55);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay15.withChronologyRetainFields(chronology37);
        org.joda.time.Chronology chronology39 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay13.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.MonthDay monthDay65 = monthDay62.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay67 = monthDay65.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay65.minus(readablePeriod68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay74 = monthDay71.withPeriodAdded(readablePeriod72, 1);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = monthDay76.getFieldType((int) (byte) 1);
        int int81 = monthDay74.indexOf(dateTimeFieldType80);
        org.joda.time.MonthDay.Property property82 = monthDay69.property(dateTimeFieldType80);
        boolean boolean83 = monthDay13.equals((java.lang.Object) dateTimeFieldType80);
        int int84 = monthDay13.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        int int20 = property10.getMaximumValueOverall();
        int int21 = property10.get();
        int int22 = property10.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        boolean boolean35 = monthDay28.isSupported(dateTimeFieldType34);
        boolean boolean36 = monthDay24.isSupported(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.now(chronology37);
        int[] intArray39 = monthDay38.getValues();
        java.lang.Class<?> wildcardClass40 = intArray39.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[11, 25]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        int[] intArray2 = monthDay1.getValues();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.plus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay(dateTimeZone5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property17 = monthDay10.property(dateTimeFieldType16);
        int int18 = property17.get();
        int int19 = property17.getMaximumValue();
        org.joda.time.MonthDay monthDay21 = property17.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay26 = monthDay23.withPeriodAdded(readablePeriod24, 1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        int int33 = monthDay26.indexOf(dateTimeFieldType32);
        boolean boolean34 = monthDay21.isSupported(dateTimeFieldType32);
        int int35 = monthDay6.get(dateTimeFieldType32);
        org.joda.time.MonthDay monthDay37 = monthDay4.withField(dateTimeFieldType32, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = monthDay4.getChronology();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        int int50 = property49.get();
        org.joda.time.MonthDay monthDay52 = property49.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str53 = property49.getAsString();
        java.lang.String str54 = property49.getAsText();
        org.joda.time.DurationField durationField55 = property49.getRangeDurationField();
        int int56 = property49.getMinimumValue();
        org.joda.time.MonthDay monthDay58 = property49.addToCopy(0);
        org.joda.time.MonthDay.Property property59 = monthDay58.dayOfMonth();
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property70 = monthDay63.property(dateTimeFieldType69);
        int int71 = property70.get();
        org.joda.time.DurationField durationField72 = property70.getDurationField();
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = monthDay78.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property83 = monthDay76.property(dateTimeFieldType82);
        boolean boolean84 = property70.equals((java.lang.Object) monthDay76);
        int int85 = property70.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property70.getFieldType();
        int int87 = property70.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay89 = property70.addToCopy((int) 'a');
        org.joda.time.MonthDay.Property property90 = monthDay89.dayOfMonth();
        boolean boolean91 = monthDay58.isBefore((org.joda.time.ReadablePartial) monthDay89);
        int int92 = monthDay4.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 25 + "'", int35 == 25);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 31 + "'", int87 == 31);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.now();
        boolean boolean15 = monthDay13.isBefore((org.joda.time.ReadablePartial) monthDay14);
        org.joda.time.MonthDay monthDay16 = new org.joda.time.MonthDay((java.lang.Object) monthDay13);
        java.lang.String str17 = monthDay16.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "--01-01" + "'", str17, "--01-01");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = monthDay3.minusDays((int) (byte) 1);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.plusMonths(1);
        int int41 = monthDay40.getDayOfMonth();
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        java.util.Locale locale53 = null;
        int int54 = property52.getMaximumTextLength(locale53);
        java.util.Locale locale55 = null;
        int int56 = property52.getMaximumShortTextLength(locale55);
        org.joda.time.DateTimeField dateTimeField57 = property52.getField();
        int int58 = property52.getMaximumValue();
        int int59 = property52.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property52.getFieldType();
        boolean boolean61 = monthDay40.isSupported(dateTimeFieldType60);
        org.joda.time.MonthDay.Property property62 = monthDay3.property(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 31 + "'", int58 == 31);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.lang.Object obj0 = null;
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(obj0, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = monthDay15.toString("November");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: N");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property10.getAsText(locale15);
        org.joda.time.DurationField durationField17 = property10.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay21.dayOfMonth();
        org.joda.time.Chronology chronology27 = monthDay21.getChronology();
        org.joda.time.Chronology chronology28 = monthDay21.getChronology();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = monthDay21.toDateTime(readableInstant29);
        org.joda.time.MonthDay monthDay32 = monthDay21.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay34.plus(readablePeriod39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        int int52 = property51.get();
        org.joda.time.MonthDay monthDay54 = property51.addWrapFieldToCopy((int) (short) 1);
        boolean boolean55 = monthDay34.isBefore((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.MonthDay monthDay57 = monthDay54.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay59 = monthDay57.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay57.minus(readablePeriod60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.MonthDay monthDay63 = new org.joda.time.MonthDay(dateTimeZone62);
        boolean boolean64 = monthDay61.isEqual((org.joda.time.ReadablePartial) monthDay63);
        boolean boolean65 = monthDay21.equals((java.lang.Object) monthDay61);
        org.joda.time.MonthDay monthDay67 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MonthDay monthDay69 = monthDay67.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = monthDay71.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property76 = monthDay69.property(dateTimeFieldType75);
        org.joda.time.MonthDay.Property property77 = monthDay69.monthOfYear();
        int int78 = monthDay69.getDayOfMonth();
        boolean boolean79 = monthDay21.isEqual((org.joda.time.ReadablePartial) monthDay69);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MonthDay monthDay82 = new org.joda.time.MonthDay((long) (short) 100, chronology81);
        int int83 = monthDay21.compareTo((org.joda.time.ReadablePartial) monthDay82);
        boolean boolean84 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DurationFieldType durationFieldType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay87 = monthDay19.withFieldAdded(durationFieldType85, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay14.getFields();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay14.minus(readablePeriod37);
        boolean boolean39 = monthDay1.equals((java.lang.Object) monthDay38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        java.util.Locale locale51 = null;
        int int52 = property50.getMaximumTextLength(locale51);
        org.joda.time.MonthDay monthDay54 = property50.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay((java.lang.Object) monthDay54);
        boolean boolean56 = monthDay38.isAfter((org.joda.time.ReadablePartial) monthDay55);
        int int57 = monthDay55.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField59 = monthDay55.getField(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay2.plus(readablePeriod7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        int int20 = property19.get();
        org.joda.time.MonthDay monthDay22 = property19.addWrapFieldToCopy((int) (short) 1);
        boolean boolean23 = monthDay2.isBefore((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay monthDay25 = monthDay22.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay27 = monthDay25.minusDays(31);
        org.joda.time.MonthDay monthDay29 = monthDay27.plusDays((int) (byte) 10);
        org.joda.time.Chronology chronology30 = monthDay29.getChronology();
        org.joda.time.MonthDay monthDay31 = new org.joda.time.MonthDay(chronology30);
        org.joda.time.Chronology chronology32 = monthDay31.getChronology();
        org.joda.time.MonthDay monthDay33 = new org.joda.time.MonthDay((long) 1, chronology32);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.Chronology chronology29 = monthDay28.getChronology();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(chronology29);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.now(chronology29);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.plus(readablePeriod42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay45.plus(readablePeriod50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay57.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property62 = monthDay55.property(dateTimeFieldType61);
        int int63 = property62.get();
        org.joda.time.MonthDay monthDay65 = property62.addWrapFieldToCopy((int) (short) 1);
        boolean boolean66 = monthDay45.isBefore((org.joda.time.ReadablePartial) monthDay65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay45.withChronologyRetainFields(chronology67);
        org.joda.time.Chronology chronology69 = monthDay68.getChronology();
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay74 = monthDay71.withPeriodAdded(readablePeriod72, 1);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = monthDay76.getFieldType((int) (byte) 1);
        int int81 = monthDay74.indexOf(dateTimeFieldType80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MonthDay monthDay83 = monthDay74.withChronologyRetainFields(chronology82);
        boolean boolean84 = monthDay68.isAfter((org.joda.time.ReadablePartial) monthDay74);
        org.joda.time.MonthDay monthDay86 = monthDay74.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay88 = monthDay86.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = monthDay86.getFieldType(0);
        org.joda.time.MonthDay.Property property91 = monthDay41.property(dateTimeFieldType90);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray92 = monthDay41.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray92);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        java.util.Locale locale18 = null;
        org.joda.time.MonthDay monthDay19 = property14.setCopy("2", locale18);
        java.lang.String str20 = property14.getAsString();
        java.lang.String str21 = property14.getAsText();
        java.util.Locale locale22 = null;
        int int23 = property14.getMaximumTextLength(locale22);
        org.joda.time.DurationField durationField24 = property14.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        java.lang.String str15 = property11.getAsShortText();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay17.plus(readablePeriod22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.MonthDay monthDay37 = property34.addWrapFieldToCopy((int) (short) 1);
        boolean boolean38 = monthDay17.isBefore((org.joda.time.ReadablePartial) monthDay37);
        org.joda.time.MonthDay monthDay40 = monthDay37.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay42 = monthDay40.plusMonths(1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        boolean boolean51 = monthDay44.isSupported(dateTimeFieldType50);
        boolean boolean52 = monthDay40.isSupported(dateTimeFieldType50);
        org.joda.time.Chronology chronology53 = monthDay40.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay((java.lang.Object) str15, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Jan\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        org.joda.time.MonthDay monthDay29 = property26.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str30 = property26.getAsString();
        java.lang.String str31 = property26.getAsText();
        org.joda.time.DurationField durationField32 = property26.getRangeDurationField();
        int int33 = property26.getMinimumValue();
        org.joda.time.MonthDay monthDay35 = property26.addToCopy(0);
        org.joda.time.MonthDay.Property property36 = monthDay35.dayOfMonth();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        org.joda.time.MonthDay.Property property48 = monthDay40.monthOfYear();
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay50.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        org.joda.time.MonthDay.Property property57 = monthDay40.property(dateTimeFieldType56);
        org.joda.time.MonthDay.Property property58 = monthDay35.property(dateTimeFieldType56);
        int int59 = monthDay15.get(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(100);
        java.util.Locale locale13 = null;
        java.lang.String str14 = property10.getAsText(locale13);
        org.joda.time.DurationField durationField15 = property10.getRangeDurationField();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        java.util.Locale locale17 = null;
        int int18 = property10.getMaximumTextLength(locale17);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay48 = monthDay45.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = monthDay1.minusDays((int) (short) 1);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        int int31 = monthDay30.getMonthOfYear();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        java.util.Locale locale43 = null;
        int int44 = property42.getMaximumTextLength(locale43);
        org.joda.time.MonthDay monthDay46 = property42.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.minus(readablePeriod47);
        boolean boolean49 = monthDay30.isAfter((org.joda.time.ReadablePartial) monthDay46);
        boolean boolean50 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField52 = monthDay46.getField(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        java.util.Locale locale15 = null;
        int int16 = property14.getMaximumShortTextLength(locale15);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = monthDay1.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay11 = monthDay1.plusDays(31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = monthDay11.toString(dateTimeFormatter12);
        int int14 = monthDay11.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--02-01" + "'", str13, "--02-01");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.MonthDay monthDay26 = property24.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = monthDay30.minusMonths((int) (byte) -1);
        boolean boolean35 = property24.equals((java.lang.Object) monthDay34);
        int int36 = property24.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property24.getFieldType();
        org.joda.time.MonthDay.Property property38 = monthDay16.property(dateTimeFieldType37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        int int50 = property49.get();
        org.joda.time.MonthDay monthDay52 = property49.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property53 = monthDay52.dayOfMonth();
        int int54 = property53.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 10);
        int int57 = monthDay16.compareTo((org.joda.time.ReadablePartial) monthDay56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay59 = monthDay16.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay51 = property14.addWrapFieldToCopy((int) '#');
        org.joda.time.MonthDay monthDay52 = property14.getMonthDay();
        java.util.Locale locale53 = null;
        java.lang.String str54 = property14.getAsText(locale53);
        org.joda.time.MonthDay monthDay55 = property14.getMonthDay();
        org.joda.time.DurationField durationField56 = property14.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2" + "'", str54, "2");
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) monthDay14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        org.joda.time.MonthDay.Property property27 = monthDay19.monthOfYear();
        int int28 = monthDay19.getDayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay19.dayOfMonth();
        int int30 = monthDay19.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay19.plus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        org.joda.time.MonthDay.Property property44 = monthDay36.monthOfYear();
        int int45 = monthDay36.getDayOfMonth();
        org.joda.time.MonthDay.Property property46 = monthDay36.dayOfMonth();
        int int47 = monthDay36.getDayOfMonth();
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay49.dayOfMonth();
        org.joda.time.Chronology chronology55 = monthDay49.getChronology();
        org.joda.time.MonthDay monthDay56 = monthDay36.withChronologyRetainFields(chronology55);
        org.joda.time.MonthDay monthDay57 = monthDay32.withChronologyRetainFields(chronology55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = monthDay32.toString(dateTimeFormatter58);
        boolean boolean60 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        java.lang.String str61 = monthDay15.toString();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay15.minus(readablePeriod62);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "--01-01" + "'", str59, "--01-01");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "--01-01" + "'", str61, "--01-01");
        org.junit.Assert.assertNotNull(monthDay63);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay4.property(dateTimeFieldType10);
        org.joda.time.MonthDay.Property property12 = monthDay4.monthOfYear();
        int int13 = monthDay4.getDayOfMonth();
        org.joda.time.MonthDay.Property property14 = monthDay4.dayOfMonth();
        int int15 = monthDay4.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay4.plus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        org.joda.time.MonthDay.Property property29 = monthDay21.monthOfYear();
        int int30 = monthDay21.getDayOfMonth();
        org.joda.time.MonthDay.Property property31 = monthDay21.dayOfMonth();
        int int32 = monthDay21.getDayOfMonth();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay34.dayOfMonth();
        org.joda.time.Chronology chronology40 = monthDay34.getChronology();
        org.joda.time.MonthDay monthDay41 = monthDay21.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay42 = monthDay17.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        org.joda.time.MonthDay.Property property54 = monthDay46.monthOfYear();
        int int55 = monthDay46.getDayOfMonth();
        org.joda.time.MonthDay.Property property56 = monthDay46.dayOfMonth();
        int int57 = monthDay46.getDayOfMonth();
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay59.dayOfMonth();
        org.joda.time.Chronology chronology65 = monthDay59.getChronology();
        org.joda.time.MonthDay monthDay66 = monthDay46.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay67 = new org.joda.time.MonthDay((java.lang.Object) monthDay17, chronology65);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay73.dayOfMonth();
        org.joda.time.Chronology chronology79 = monthDay73.getChronology();
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(chronology79);
        org.joda.time.MonthDay monthDay81 = monthDay71.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = monthDay17.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.now(chronology79);
        org.joda.time.MonthDay monthDay84 = new org.joda.time.MonthDay(10L, chronology79);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        int int24 = property23.getMinimumValueOverall();
        java.lang.String str25 = property23.getAsString();
        java.lang.String str26 = property23.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Jan" + "'", str26, "Jan");
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.withChronologyRetainFields(chronology5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property13 = monthDay6.property(dateTimeFieldType12);
        org.joda.time.MonthDay.Property property14 = monthDay6.monthOfYear();
        int int15 = monthDay6.getDayOfMonth();
        org.joda.time.MonthDay.Property property16 = monthDay6.dayOfMonth();
        int int17 = monthDay6.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay6.plus(readablePeriod18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        org.joda.time.MonthDay.Property property31 = monthDay23.monthOfYear();
        int int32 = monthDay23.getDayOfMonth();
        org.joda.time.MonthDay.Property property33 = monthDay23.dayOfMonth();
        int int34 = monthDay23.getDayOfMonth();
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay36.dayOfMonth();
        org.joda.time.Chronology chronology42 = monthDay36.getChronology();
        org.joda.time.MonthDay monthDay43 = monthDay23.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay44 = monthDay19.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        org.joda.time.MonthDay.Property property56 = monthDay48.monthOfYear();
        int int57 = monthDay48.getDayOfMonth();
        org.joda.time.MonthDay.Property property58 = monthDay48.dayOfMonth();
        int int59 = monthDay48.getDayOfMonth();
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay61.dayOfMonth();
        org.joda.time.Chronology chronology67 = monthDay61.getChronology();
        org.joda.time.MonthDay monthDay68 = monthDay48.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay((java.lang.Object) monthDay19, chronology67);
        org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay(8, 11, chronology67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay71 = new org.joda.time.MonthDay((java.lang.Object) "--01-01", chronology67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"--01-01\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(monthDay68);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField(0);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = monthDay43.toString(dateTimeFormatter44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay50 = monthDay47.withPeriodAdded(readablePeriod48, 1);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        int int57 = monthDay50.indexOf(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay50.withChronologyRetainFields(chronology58);
        org.joda.time.MonthDay.Property property60 = monthDay59.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
        org.joda.time.MonthDay monthDay63 = monthDay43.withField(dateTimeFieldType61, 2);
        boolean boolean64 = monthDay16.isEqual((org.joda.time.ReadablePartial) monthDay63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay66 = monthDay63.withDayOfMonth((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "--09-02" + "'", str45, "--09-02");
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        int int13 = property10.getMinimumValue();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay16 = property10.setCopy("Property[dayOfMonth]", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[dayOfMonth]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        org.joda.time.MonthDay.Property property57 = monthDay49.monthOfYear();
        int int58 = monthDay49.getDayOfMonth();
        boolean boolean59 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = new org.joda.time.MonthDay((long) (short) 100, chronology61);
        int int63 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay62);
        int int64 = monthDay62.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay4.withChronologyRetainFields(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = monthDay4.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property9 = monthDay4.dayOfMonth();
        org.joda.time.Chronology chronology10 = monthDay4.getChronology();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay((-1L), chronology10);
        org.joda.time.MonthDay monthDay12 = new org.joda.time.MonthDay((java.lang.Object) monthDay11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) '#');
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay18.dayOfMonth();
        org.joda.time.Chronology chronology24 = monthDay18.getChronology();
        org.joda.time.Chronology chronology25 = monthDay18.getChronology();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = monthDay18.toDateTime(readableInstant26);
        org.joda.time.MonthDay monthDay29 = monthDay18.plusMonths((int) ' ');
        boolean boolean30 = monthDay14.isAfter((org.joda.time.ReadablePartial) monthDay29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay32.dayOfMonth();
        org.joda.time.MonthDay monthDay39 = property37.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay41 = property37.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = monthDay43.minusMonths((int) (byte) -1);
        boolean boolean48 = property37.equals((java.lang.Object) monthDay47);
        int int49 = property37.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property37.getFieldType();
        org.joda.time.MonthDay.Property property51 = monthDay29.property(dateTimeFieldType50);
        int int52 = monthDay12.indexOf(dateTimeFieldType50);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay54.dayOfMonth();
        org.joda.time.Chronology chronology60 = monthDay54.getChronology();
        org.joda.time.Chronology chronology61 = monthDay54.getChronology();
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.now(chronology61);
        org.joda.time.MonthDay monthDay63 = monthDay12.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay monthDay64 = new org.joda.time.MonthDay((-1L), chronology61);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay66.plus(readablePeriod71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MonthDay monthDay80 = monthDay78.withChronologyRetainFields(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = monthDay78.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property83 = monthDay76.property(dateTimeFieldType82);
        int int84 = property83.get();
        org.joda.time.MonthDay monthDay86 = property83.addWrapFieldToCopy((int) (short) 1);
        boolean boolean87 = monthDay66.isBefore((org.joda.time.ReadablePartial) monthDay86);
        org.joda.time.MonthDay monthDay89 = monthDay86.minusMonths((int) (byte) 100);
        int int90 = monthDay89.getMonthOfYear();
        org.joda.time.MonthDay monthDay92 = monthDay89.withMonthOfYear(1);
        int int93 = monthDay92.getMonthOfYear();
        org.joda.time.MonthDay monthDay95 = monthDay92.withMonthOfYear((int) (short) 1);
        boolean boolean96 = monthDay64.isAfter((org.joda.time.ReadablePartial) monthDay92);
        org.joda.time.Chronology chronology97 = monthDay64.getChronology();
        org.joda.time.MonthDay monthDay98 = new org.joda.time.MonthDay((long) (-1), chronology97);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 31 + "'", int49 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
        org.junit.Assert.assertNotNull(monthDay92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(monthDay95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay49.dayOfMonth();
        org.joda.time.Chronology chronology55 = monthDay49.getChronology();
        org.joda.time.MonthDay monthDay56 = new org.joda.time.MonthDay((-1L), chronology55);
        org.joda.time.MonthDay monthDay57 = new org.joda.time.MonthDay(chronology55);
        org.joda.time.MonthDay monthDay58 = monthDay45.withChronologyRetainFields(chronology55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay58.getFieldType((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(monthDay58);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay70 = monthDay68.minusDays(0);
        int[] intArray71 = monthDay70.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[8, 2]");
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay14.getFields();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay14.minus(readablePeriod37);
        boolean boolean39 = monthDay1.equals((java.lang.Object) monthDay38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        java.util.Locale locale51 = null;
        int int52 = property50.getMaximumTextLength(locale51);
        org.joda.time.MonthDay monthDay54 = property50.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay((java.lang.Object) monthDay54);
        boolean boolean56 = monthDay38.isAfter((org.joda.time.ReadablePartial) monthDay55);
        int int57 = monthDay55.getMonthOfYear();
        org.joda.time.MonthDay monthDay59 = monthDay55.minusMonths(1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(monthDay59);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay14.getFields();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay14.minus(readablePeriod37);
        boolean boolean39 = monthDay1.equals((java.lang.Object) monthDay38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        java.util.Locale locale51 = null;
        int int52 = property50.getMaximumTextLength(locale51);
        org.joda.time.MonthDay monthDay54 = property50.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay((java.lang.Object) monthDay54);
        boolean boolean56 = monthDay38.isAfter((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.MonthDay monthDay58 = monthDay55.minusDays((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MonthDay monthDay61 = monthDay55.withPeriodAdded(readablePeriod59, (int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay61);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay3.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology27 = monthDay26.getChronology();
        org.joda.time.MonthDay monthDay28 = new org.joda.time.MonthDay((long) (short) 0, chronology27);
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay((long) 3, chronology27);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        java.util.Locale locale15 = null;
        org.joda.time.MonthDay monthDay16 = property11.setCopy("2", locale15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        org.joda.time.DurationField durationField29 = property28.getRangeDurationField();
        org.joda.time.MonthDay monthDay31 = property28.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property28.getFieldType();
        org.joda.time.MonthDay.Property property33 = monthDay16.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = monthDay16.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMinimumValueOverall();
        java.lang.String str15 = property11.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[monthOfYear]" + "'", str15, "Property[monthOfYear]");
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.MonthDay monthDay35 = monthDay32.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay37 = monthDay35.minusDays(31);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        int int52 = property50.getMaximumValue();
        org.joda.time.MonthDay monthDay54 = property50.setCopy((int) (short) 1);
        boolean boolean55 = monthDay37.equals((java.lang.Object) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay37.plus(readablePeriod56);
        boolean boolean58 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay57);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 31 + "'", int52 == 31);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusDays(0);
        org.joda.time.MonthDay monthDay32 = monthDay30.plusDays(0);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay30.minus(readablePeriod33);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = monthDay1.getFields();
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        boolean boolean8 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay4);
        org.joda.time.MonthDay monthDay10 = monthDay1.plusDays((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = monthDay10.toString(dateTimeFormatter11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay14.withChronologyRetainFields(chronology36);
        org.joda.time.Chronology chronology38 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay43 = monthDay40.withPeriodAdded(readablePeriod41, 1);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        int int50 = monthDay43.indexOf(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay43.withChronologyRetainFields(chronology51);
        boolean boolean53 = monthDay37.isAfter((org.joda.time.ReadablePartial) monthDay43);
        org.joda.time.MonthDay monthDay55 = monthDay43.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay57 = monthDay55.minusDays(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType(0);
        int int60 = monthDay10.get(dateTimeFieldType59);
        org.joda.time.MonthDay.Property property61 = monthDay10.dayOfMonth();
        int int62 = property61.get();
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--11-24" + "'", str12, "--11-24");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 11 + "'", int60 == 11);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 24 + "'", int62 == 24);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = monthDay1.toString(dateTimeFormatter6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str22 = property18.getAsString();
        java.lang.String str23 = property18.getAsText();
        org.joda.time.MonthDay monthDay24 = property18.getMonthDay();
        boolean boolean25 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = monthDay24.toString(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--01-01" + "'", str7, "--01-01");
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "--01-01" + "'", str27, "--01-01");
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = monthDay23.minusMonths((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = monthDay25.withFieldAdded(durationFieldType26, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = new org.joda.time.MonthDay((-1L), chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(chronology8);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = monthDay11.getFields();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay15 = monthDay11.withPeriodAdded(readablePeriod13, 4);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        org.joda.time.MonthDay.Property property27 = monthDay19.monthOfYear();
        int int28 = monthDay19.getDayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay19.dayOfMonth();
        int int30 = monthDay19.getDayOfMonth();
        boolean boolean31 = monthDay11.isBefore((org.joda.time.ReadablePartial) monthDay19);
        org.joda.time.MonthDay monthDay33 = monthDay19.minusDays((int) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("25", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.MonthDay monthDay4 = monthDay2.minusMonths(31);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        int int18 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay20.dayOfMonth();
        org.joda.time.Chronology chronology26 = monthDay20.getChronology();
        org.joda.time.Chronology chronology27 = monthDay20.getChronology();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = monthDay20.toDateTime(readableInstant28);
        org.joda.time.MonthDay monthDay31 = monthDay20.plusMonths((int) ' ');
        int int32 = property10.compareTo((org.joda.time.ReadablePartial) monthDay20);
        org.joda.time.MonthDay monthDay34 = property10.addWrapFieldToCopy(25);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(monthDay34);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay39.withPeriodAdded(readablePeriod40, 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        int int49 = monthDay42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay42.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay.Property property52 = monthDay51.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.MonthDay.Property property54 = monthDay37.property(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property54.getAsText(locale56);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "25" + "'", str57, "25");
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay16 = monthDay14.minusDays((int) '#');
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay18.dayOfMonth();
        org.joda.time.Chronology chronology24 = monthDay18.getChronology();
        org.joda.time.Chronology chronology25 = monthDay18.getChronology();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = monthDay18.toDateTime(readableInstant26);
        org.joda.time.MonthDay monthDay29 = monthDay18.plusMonths((int) ' ');
        boolean boolean30 = monthDay14.isAfter((org.joda.time.ReadablePartial) monthDay29);
        org.joda.time.Chronology chronology31 = monthDay29.getChronology();
        org.joda.time.MonthDay monthDay32 = new org.joda.time.MonthDay((long) (byte) 0, chronology31);
        org.joda.time.MonthDay monthDay33 = monthDay3.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay(chronology31);
        org.joda.time.MonthDay monthDay36 = monthDay34.withDayOfMonth(10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay36);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology14 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) monthDay3);
        java.lang.String str16 = monthDay3.toString();
        org.joda.time.MonthDay monthDay18 = monthDay3.plusMonths((int) (short) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "--01-01" + "'", str16, "--01-01");
        org.junit.Assert.assertNotNull(monthDay18);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str27 = property10.getAsShortText();
        java.util.Locale locale28 = null;
        int int29 = property10.getMaximumShortTextLength(locale28);
        int int30 = property10.getMinimumValue();
        java.lang.String str31 = property10.getAsString();
        org.joda.time.MonthDay monthDay33 = property10.addWrapFieldToCopy(9);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        boolean boolean30 = property10.equals((java.lang.Object) 0.0d);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay32.withPeriodAdded(readablePeriod33, 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        int int42 = monthDay35.indexOf(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay35.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay.Property property45 = monthDay44.dayOfMonth();
        java.lang.String str46 = property45.toString();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay48.plus(readablePeriod53);
        org.joda.time.MonthDay monthDay56 = monthDay48.plusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay58 = monthDay48.plusDays(31);
        int int59 = property45.compareTo((org.joda.time.ReadablePartial) monthDay58);
        int int60 = property10.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay62 = property10.addToCopy(0);
        int int63 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[dayOfMonth]" + "'", str46, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        java.util.Locale locale28 = null;
        java.lang.String str29 = property10.getAsShortText(locale28);
        org.joda.time.MonthDay monthDay31 = property10.addToCopy(30);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusDays((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay33.getFieldType(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.MonthDay.Property property49 = monthDay41.monthOfYear();
        org.joda.time.MonthDay monthDay50 = property49.getMonthDay();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property49.getAsText(locale51);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "September" + "'", str52, "September");
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValueOverall();
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumTextLength(locale11);
        int int13 = property6.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        java.lang.String str50 = property14.getName();
        int int51 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "dayOfMonth" + "'", str50, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.lang.String str27 = property10.getAsShortText();
        int int28 = property10.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay30 = property10.setCopy("25");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay42.property(dateTimeFieldType48);
        int int50 = property49.get();
        org.joda.time.MonthDay monthDay52 = property49.addWrapFieldToCopy((int) (short) 1);
        boolean boolean53 = monthDay32.isBefore((org.joda.time.ReadablePartial) monthDay52);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = monthDay32.getFields();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay32.minus(readablePeriod55);
        org.joda.time.MonthDay monthDay58 = monthDay56.minusDays(31);
        int int59 = property10.compareTo((org.joda.time.ReadablePartial) monthDay56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.util.Locale locale18 = null;
        java.lang.String str19 = property6.getAsShortText(locale18);
        java.lang.String str20 = property6.getName();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 1);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        int int32 = monthDay25.indexOf(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay25.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay36.dayOfMonth();
        org.joda.time.Chronology chronology42 = monthDay36.getChronology();
        org.joda.time.Chronology chronology43 = monthDay36.getChronology();
        boolean boolean44 = monthDay25.isEqual((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = monthDay36.toString(dateTimeFormatter45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay36.withChronologyRetainFields(chronology47);
        int int49 = monthDay36.getDayOfMonth();
        org.joda.time.MonthDay.Property property50 = monthDay36.monthOfYear();
        int int51 = property6.compareTo((org.joda.time.ReadablePartial) monthDay36);
        int int52 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfMonth" + "'", str20, "dayOfMonth");
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "--01-01" + "'", str46, "--01-01");
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 31 + "'", int52 == 31);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay3.withPeriodAdded(readablePeriod4, 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay3.plus(readablePeriod7);
        int int9 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.MonthDay monthDay12 = monthDay8.withPeriodAdded(readablePeriod10, (int) (byte) 10);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        java.lang.String str24 = property23.getAsText();
        org.joda.time.MonthDay monthDay26 = property23.setCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.plus(readablePeriod27);
        int int29 = monthDay28.getMonthOfYear();
        boolean boolean30 = monthDay12.isEqual((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay35 = monthDay33.minusDays((int) '#');
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay37.dayOfMonth();
        org.joda.time.Chronology chronology43 = monthDay37.getChronology();
        org.joda.time.Chronology chronology44 = monthDay37.getChronology();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = monthDay37.toDateTime(readableInstant45);
        org.joda.time.MonthDay monthDay48 = monthDay37.plusMonths((int) ' ');
        boolean boolean49 = monthDay33.isAfter((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.Chronology chronology50 = monthDay48.getChronology();
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay((long) (byte) 0, chronology50);
        org.joda.time.MonthDay monthDay52 = monthDay28.withChronologyRetainFields(chronology50);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(monthDay52);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay6 = monthDay1.plus(readablePeriod5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = monthDay8.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay8.plus(readablePeriod13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        int int26 = property25.get();
        org.joda.time.MonthDay monthDay28 = property25.addWrapFieldToCopy((int) (short) 1);
        boolean boolean29 = monthDay8.isBefore((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.MonthDay monthDay31 = monthDay28.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusMonths(1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        boolean boolean42 = monthDay35.isSupported(dateTimeFieldType41);
        boolean boolean43 = monthDay31.isSupported(dateTimeFieldType41);
        boolean boolean44 = monthDay6.isAfter((org.joda.time.ReadablePartial) monthDay31);
        org.joda.time.MonthDay monthDay46 = monthDay31.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay.Property property47 = monthDay31.monthOfYear();
        java.lang.String str48 = property47.toString();
        org.joda.time.DurationField durationField49 = property47.getDurationField();
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay51.dayOfMonth();
        org.joda.time.Chronology chronology57 = monthDay51.getChronology();
        org.joda.time.Chronology chronology58 = monthDay51.getChronology();
        org.joda.time.MonthDay monthDay60 = monthDay51.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay62.plus(readablePeriod67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = monthDay74.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property79 = monthDay72.property(dateTimeFieldType78);
        int int80 = property79.get();
        org.joda.time.MonthDay monthDay82 = property79.addWrapFieldToCopy((int) (short) 1);
        boolean boolean83 = monthDay62.isBefore((org.joda.time.ReadablePartial) monthDay82);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = monthDay62.getFieldType(0);
        org.joda.time.MonthDay monthDay87 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MonthDay monthDay89 = monthDay87.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = monthDay87.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property92 = monthDay87.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property92.getFieldType();
        boolean boolean94 = monthDay62.isSupported(dateTimeFieldType93);
        org.joda.time.MonthDay monthDay96 = monthDay51.withField(dateTimeFieldType93, (int) (short) 10);
        int int97 = property47.compareTo((org.joda.time.ReadablePartial) monthDay96);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[monthOfYear]" + "'", str48, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(monthDay96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = monthDay16.plusDays((int) (byte) 0);
        org.joda.time.MonthDay.Property property19 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay16.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = new org.joda.time.MonthDay((java.lang.Object) monthDay2, chronology3);
        int int5 = monthDay2.size();
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.MonthDay monthDay11 = monthDay8.withPeriodAdded(readablePeriod9, 1);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        int int18 = monthDay11.indexOf(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay11.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay22.plus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        org.joda.time.MonthDay monthDay42 = property39.addWrapFieldToCopy((int) (short) 1);
        boolean boolean43 = monthDay22.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay22.withChronologyRetainFields(chronology44);
        org.joda.time.Chronology chronology46 = monthDay45.getChronology();
        org.joda.time.MonthDay monthDay47 = monthDay20.withChronologyRetainFields(chronology46);
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay((long) 9, chronology46);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay53 = monthDay50.withPeriodAdded(readablePeriod51, 1);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        int int60 = monthDay53.indexOf(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay53.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        int int69 = monthDay53.get(dateTimeFieldType68);
        org.joda.time.MonthDay monthDay71 = monthDay53.plusDays(0);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay53.minus(readablePeriod72);
        int int74 = monthDay48.compareTo((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MonthDay monthDay79 = monthDay76.withPeriodAdded(readablePeriod77, 1);
        org.joda.time.MonthDay monthDay81 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MonthDay monthDay83 = monthDay81.withChronologyRetainFields(chronology82);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = monthDay81.getFieldType((int) (byte) 1);
        int int86 = monthDay79.indexOf(dateTimeFieldType85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay79.withChronologyRetainFields(chronology87);
        org.joda.time.MonthDay.Property property89 = monthDay88.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property89.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property89.getFieldType();
        int int92 = property89.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property89.getFieldType();
        boolean boolean94 = monthDay48.isSupported(dateTimeFieldType93);
        org.joda.time.MonthDay monthDay96 = monthDay2.withField(dateTimeFieldType93, (int) (byte) 10);
        java.util.Locale locale98 = null;
        java.lang.String str99 = monthDay96.toString("--02-02", locale98);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 31 + "'", int92 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(monthDay96);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "--02-02" + "'", str99, "--02-02");
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        int int20 = monthDay4.get(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = monthDay4.plusDays(0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay4.minus(readablePeriod23);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay4.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = monthDay4.getFields();
        org.joda.time.MonthDay monthDay28 = monthDay4.plusMonths(10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(monthDay28);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        org.joda.time.MonthDay monthDay10 = property6.addToCopy(0);
        org.joda.time.MonthDay.Property property11 = monthDay10.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        org.joda.time.MonthDay monthDay17 = property10.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        org.joda.time.MonthDay.Property property29 = monthDay17.property(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        int[] intArray2 = monthDay1.getValues();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.plus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay(dateTimeZone5);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property17 = monthDay10.property(dateTimeFieldType16);
        int int18 = property17.get();
        int int19 = property17.getMaximumValue();
        org.joda.time.MonthDay monthDay21 = property17.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay26 = monthDay23.withPeriodAdded(readablePeriod24, 1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        int int33 = monthDay26.indexOf(dateTimeFieldType32);
        boolean boolean34 = monthDay21.isSupported(dateTimeFieldType32);
        int int35 = monthDay6.get(dateTimeFieldType32);
        org.joda.time.MonthDay monthDay37 = monthDay4.withField(dateTimeFieldType32, (int) (byte) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay4.withChronologyRetainFields(chronology38);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 25 + "'", int35 == 25);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        java.lang.String str18 = property6.getAsShortText();
        java.util.Locale locale19 = null;
        int int20 = property6.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        org.joda.time.MonthDay monthDay28 = property26.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        int int31 = property10.compareTo((org.joda.time.ReadablePartial) monthDay30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = monthDay43.toString(dateTimeFormatter44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay50 = monthDay47.withPeriodAdded(readablePeriod48, 1);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        int int57 = monthDay50.indexOf(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay50.withChronologyRetainFields(chronology58);
        org.joda.time.MonthDay.Property property60 = monthDay59.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
        org.joda.time.MonthDay monthDay63 = monthDay43.withField(dateTimeFieldType61, 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay65 = monthDay18.withField(dateTimeFieldType61, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "--09-02" + "'", str45, "--09-02");
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(monthDay63);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property10.getFieldType();
        java.lang.String str30 = property10.getAsString();
        java.util.Locale locale31 = null;
        int int32 = property10.getMaximumTextLength(locale31);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        int int28 = property26.getMaximumValue();
        org.joda.time.MonthDay monthDay30 = property26.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay32.plus(readablePeriod37);
        int int39 = monthDay32.getDayOfMonth();
        int int40 = property26.compareTo((org.joda.time.ReadablePartial) monthDay32);
        boolean boolean41 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay32);
        java.lang.String str42 = monthDay15.toString();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay15.minus(readablePeriod43);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "--01-01" + "'", str42, "--01-01");
        org.junit.Assert.assertNotNull(monthDay44);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        int int7 = property6.getMaximumValueOverall();
        java.lang.String str8 = property6.getAsText();
        java.lang.String str9 = property6.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay();
        boolean boolean20 = property14.equals((java.lang.Object) monthDay19);
        org.joda.time.MonthDay monthDay22 = property14.addToCopy((int) (byte) 100);
        org.joda.time.MonthDay monthDay24 = monthDay22.plusMonths(0);
        org.joda.time.MonthDay monthDay26 = monthDay22.plusDays(28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        java.lang.String str20 = property10.toString();
        int int21 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay23 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        java.lang.String str36 = property34.toString();
        org.joda.time.MonthDay monthDay38 = property34.addWrapFieldToCopy((int) (short) -1);
        boolean boolean39 = property10.equals((java.lang.Object) property34);
        int int40 = property34.getMaximumValue();
        org.joda.time.DurationField durationField41 = property34.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[dayOfMonth]" + "'", str20, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[dayOfMonth]" + "'", str36, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        int int23 = monthDay1.size();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = property34.get();
        org.joda.time.MonthDay monthDay37 = property34.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str38 = property34.getAsString();
        java.lang.String str39 = property34.getAsText();
        org.joda.time.DurationField durationField40 = property34.getRangeDurationField();
        int int41 = property34.getMinimumValue();
        org.joda.time.MonthDay monthDay43 = property34.addWrapFieldToCopy((int) '4');
        int int44 = property34.getMaximumValueOverall();
        int int45 = property34.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property34.getFieldType();
        boolean boolean47 = monthDay1.isSupported(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str27 = property10.toString();
        int int28 = property10.getMinimumValueOverall();
        java.lang.String str29 = property10.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[dayOfMonth]" + "'", str27, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[dayOfMonth]" + "'", str29, "Property[dayOfMonth]");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay.Property property25 = monthDay24.monthOfYear();
        java.lang.String str26 = property25.getAsText();
        java.lang.String str27 = property25.getAsString();
        org.joda.time.MonthDay monthDay29 = property25.addToCopy(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "February" + "'", str26, "February");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2" + "'", str27, "2");
        org.junit.Assert.assertNotNull(monthDay29);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.lang.String str27 = property10.getAsShortText();
        int int28 = property10.getMinimumValueOverall();
        java.lang.String str29 = property10.getName();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfMonth" + "'", str29, "dayOfMonth");
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        int int2 = monthDay1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType4 = monthDay1.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.Chronology chronology28 = monthDay25.getChronology();
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay33 = monthDay31.minusDays((int) '#');
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property40 = monthDay35.dayOfMonth();
        org.joda.time.Chronology chronology41 = monthDay35.getChronology();
        org.joda.time.Chronology chronology42 = monthDay35.getChronology();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = monthDay35.toDateTime(readableInstant43);
        org.joda.time.MonthDay monthDay46 = monthDay35.plusMonths((int) ' ');
        boolean boolean47 = monthDay31.isAfter((org.joda.time.ReadablePartial) monthDay46);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property54 = monthDay49.dayOfMonth();
        org.joda.time.MonthDay monthDay56 = property54.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay58 = property54.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.MonthDay monthDay64 = monthDay60.minusMonths((int) (byte) -1);
        boolean boolean65 = property54.equals((java.lang.Object) monthDay64);
        int int66 = property54.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property54.getFieldType();
        org.joda.time.MonthDay.Property property68 = monthDay46.property(dateTimeFieldType67);
        boolean boolean69 = monthDay29.isSupported(dateTimeFieldType67);
        org.joda.time.MonthDay monthDay71 = monthDay29.minusMonths(30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 31 + "'", int66 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(monthDay71);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.plus(readablePeriod2);
        org.joda.time.MonthDay monthDay5 = monthDay3.withMonthOfYear(4);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        java.util.Locale locale18 = null;
        org.joda.time.MonthDay monthDay19 = property14.setCopy("2", locale18);
        org.joda.time.MonthDay monthDay21 = monthDay19.minusMonths(11);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        int int28 = monthDay1.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay1.withPeriodAdded(readablePeriod29, 31);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        org.joda.time.MonthDay.Property property43 = monthDay1.property(dateTimeFieldType41);
        org.joda.time.MonthDay monthDay45 = monthDay1.minusMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(monthDay45);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsText(locale7);
        int int9 = property6.get();
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        java.util.Locale locale21 = null;
        int int22 = property20.getMaximumTextLength(locale21);
        int int23 = property20.getMinimumValue();
        java.lang.String str24 = property20.getAsText();
        java.lang.String str25 = property20.getAsText();
        boolean boolean26 = property6.equals((java.lang.Object) str25);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        int int9 = property6.getMaximumValue();
        int int10 = property6.getMaximumValueOverall();
        java.util.Locale locale11 = null;
        int int12 = property6.getMaximumShortTextLength(locale11);
        org.joda.time.DurationField durationField13 = property6.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay15 = property6.setCopy(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay10 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay12.getFieldType(0);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay37.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        boolean boolean44 = monthDay12.isSupported(dateTimeFieldType43);
        org.joda.time.MonthDay monthDay46 = monthDay1.withField(dateTimeFieldType43, (int) (short) 10);
        org.joda.time.MonthDay monthDay48 = monthDay1.minusMonths(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay41.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay50.plus(readablePeriod55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay60.property(dateTimeFieldType66);
        int int68 = property67.get();
        org.joda.time.MonthDay monthDay70 = property67.addWrapFieldToCopy((int) (short) 1);
        boolean boolean71 = monthDay50.isBefore((org.joda.time.ReadablePartial) monthDay70);
        org.joda.time.MonthDay monthDay73 = monthDay70.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay75 = monthDay73.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay73.minus(readablePeriod76);
        int int78 = monthDay77.size();
        boolean boolean79 = monthDay41.isBefore((org.joda.time.ReadablePartial) monthDay77);
        java.lang.String str80 = monthDay77.toString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "--09-02" + "'", str80, "--09-02");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        int int13 = property12.get();
        org.joda.time.DurationField durationField14 = property12.getDurationField();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay18.property(dateTimeFieldType24);
        boolean boolean26 = property12.equals((java.lang.Object) monthDay18);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((java.lang.Object) monthDay18);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay32 = monthDay29.withPeriodAdded(readablePeriod30, 1);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay32.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay32.withChronologyRetainFields(chronology40);
        boolean boolean42 = monthDay27.isBefore((org.joda.time.ReadablePartial) monthDay41);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay46 = monthDay44.minusDays((int) '#');
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.Chronology chronology55 = monthDay48.getChronology();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = monthDay48.toDateTime(readableInstant56);
        org.joda.time.MonthDay monthDay59 = monthDay48.plusMonths((int) ' ');
        boolean boolean60 = monthDay44.isAfter((org.joda.time.ReadablePartial) monthDay59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay62.plus(readablePeriod67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.MonthDay monthDay74 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay74.withChronologyRetainFields(chronology75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = monthDay74.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property79 = monthDay72.property(dateTimeFieldType78);
        int int80 = property79.get();
        org.joda.time.MonthDay monthDay82 = property79.addWrapFieldToCopy((int) (short) 1);
        boolean boolean83 = monthDay62.isBefore((org.joda.time.ReadablePartial) monthDay82);
        org.joda.time.MonthDay monthDay85 = monthDay82.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay87 = monthDay85.plusMonths(1);
        int int88 = monthDay59.compareTo((org.joda.time.ReadablePartial) monthDay85);
        int int89 = monthDay27.compareTo((org.joda.time.ReadablePartial) monthDay85);
        int int90 = monthDay85.getMonthOfYear();
        org.joda.time.MonthDay monthDay92 = monthDay85.plusDays(100);
        org.joda.time.MonthDay.Property property93 = monthDay92.dayOfMonth();
        org.joda.time.Chronology chronology94 = monthDay92.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay95 = new org.joda.time.MonthDay(24, 12, chronology94);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
        org.junit.Assert.assertNotNull(monthDay92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(chronology94);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        int int25 = property10.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay27 = property10.setCopy("2");
        java.lang.Class<?> wildcardClass28 = property10.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = monthDay1.getFields();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay1.minus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay27.plus(readablePeriod31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay27.plus(readablePeriod33);
        org.joda.time.MonthDay monthDay36 = monthDay27.withDayOfMonth((int) (short) 10);
        boolean boolean37 = monthDay25.equals((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        int int49 = property48.get();
        org.joda.time.MonthDay monthDay51 = property48.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str52 = property48.getAsString();
        java.lang.String str53 = property48.getAsText();
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay55.dayOfMonth();
        org.joda.time.Chronology chronology61 = monthDay55.getChronology();
        org.joda.time.Chronology chronology62 = monthDay55.getChronology();
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.now(chronology62);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.now(chronology62);
        boolean boolean65 = property48.equals((java.lang.Object) monthDay64);
        boolean boolean66 = monthDay27.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        java.util.Locale locale27 = null;
        int int28 = property10.getMaximumShortTextLength(locale27);
        java.util.Locale locale29 = null;
        int int30 = property10.getMaximumShortTextLength(locale29);
        org.joda.time.MonthDay monthDay32 = property10.setCopy(4);
        org.joda.time.MonthDay monthDay34 = monthDay32.minusDays(11);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        org.joda.time.DurationField durationField18 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str13 = monthDay3.toString("--11-24");
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay3.minus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--11-24" + "'", str13, "--11-24");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.DurationField durationField35 = property33.getDurationField();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        boolean boolean47 = property33.equals((java.lang.Object) monthDay39);
        int int48 = property33.getMaximumValueOverall();
        java.lang.String str49 = property33.getAsShortText();
        java.lang.String str50 = property33.getName();
        boolean boolean51 = property6.equals((java.lang.Object) str50);
        org.joda.time.DurationField durationField52 = property6.getRangeDurationField();
        int int53 = property6.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 31 + "'", int48 == 31);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "dayOfMonth" + "'", str50, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay51 = monthDay48.withPeriodAdded(readablePeriod49, 1);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        int int58 = monthDay51.indexOf(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay51.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        int int67 = monthDay51.get(dateTimeFieldType66);
        org.joda.time.MonthDay monthDay69 = monthDay51.plusDays(0);
        int int70 = property46.compareTo((org.joda.time.ReadablePartial) monthDay51);
        java.lang.Class<?> wildcardClass71 = monthDay51.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = property10.setCopy((int) (short) 1);
        java.lang.String str17 = property10.getAsText();
        java.lang.String str18 = property10.toString();
        org.joda.time.ReadableInstant readableInstant19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = property10.compareTo(readableInstant19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[dayOfMonth]" + "'", str18, "Property[dayOfMonth]");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = monthDay72.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property77 = monthDay72.dayOfMonth();
        org.joda.time.Chronology chronology78 = monthDay72.getChronology();
        org.joda.time.MonthDay monthDay79 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay80 = monthDay70.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay81 = monthDay16.withChronologyRetainFields(chronology78);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.now(chronology78);
        org.joda.time.MonthDay monthDay85 = org.joda.time.MonthDay.now(chronology78);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(monthDay85);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.addWrapFieldToCopy((int) (byte) 1);
        int int19 = property14.getMinimumValueOverall();
        int int20 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        int int13 = property10.getMinimumValue();
        java.lang.String str14 = property10.getAsText();
        org.joda.time.MonthDay monthDay16 = property10.addWrapFieldToCopy(9);
        org.joda.time.DateTimeField dateTimeField18 = monthDay16.getField(0);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = monthDay43.toString(dateTimeFormatter44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.MonthDay monthDay50 = monthDay47.withPeriodAdded(readablePeriod48, 1);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        int int57 = monthDay50.indexOf(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay50.withChronologyRetainFields(chronology58);
        org.joda.time.MonthDay.Property property60 = monthDay59.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
        org.joda.time.MonthDay monthDay63 = monthDay43.withField(dateTimeFieldType61, 2);
        boolean boolean64 = monthDay16.isEqual((org.joda.time.ReadablePartial) monthDay63);
        int int65 = monthDay16.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "--09-02" + "'", str45, "--09-02");
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        java.lang.String str1 = monthDay0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "--11-25" + "'", str1, "--11-25");
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        int int18 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property25 = monthDay20.dayOfMonth();
        org.joda.time.Chronology chronology26 = monthDay20.getChronology();
        org.joda.time.Chronology chronology27 = monthDay20.getChronology();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = monthDay20.toDateTime(readableInstant28);
        org.joda.time.MonthDay monthDay31 = monthDay20.plusMonths((int) ' ');
        int int32 = property10.compareTo((org.joda.time.ReadablePartial) monthDay20);
        org.joda.time.DurationField durationField33 = property10.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay4.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        int int40 = monthDay33.getDayOfMonth();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) monthDay33);
        boolean boolean42 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay33);
        org.joda.time.Chronology chronology43 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) (short) 0, chronology43);
        org.joda.time.MonthDay monthDay46 = monthDay44.plusDays((int) (short) 100);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay46);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumShortTextLength(locale9);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        java.util.Locale locale27 = null;
        int int28 = property24.getMaximumTextLength(locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.Chronology chronology37 = monthDay30.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = monthDay30.toDateTime(readableInstant38);
        int int40 = property24.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int41 = property10.compareTo((org.joda.time.ReadableInstant) dateTime39);
        java.lang.String str42 = property10.toString();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property10.getAsShortText(locale43);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[dayOfMonth]" + "'", str42, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        org.joda.time.MonthDay monthDay18 = property11.getMonthDay();
        org.joda.time.MonthDay monthDay20 = monthDay18.plusDays((int) (byte) 10);
        org.joda.time.MonthDay.Property property21 = monthDay20.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property8 = monthDay3.dayOfMonth();
        org.joda.time.Chronology chronology9 = monthDay3.getChronology();
        org.joda.time.Chronology chronology10 = monthDay3.getChronology();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = monthDay3.toDateTime(readableInstant11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay14.withChronologyRetainFields(chronology36);
        org.joda.time.Chronology chronology38 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.now(chronology38);
        org.joda.time.MonthDay monthDay40 = monthDay3.withChronologyRetainFields(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay41 = new org.joda.time.MonthDay((int) '4', 4, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay40);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay15.plus(readablePeriod20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay25.property(dateTimeFieldType31);
        int int33 = property32.get();
        org.joda.time.MonthDay monthDay35 = property32.addWrapFieldToCopy((int) (short) 1);
        boolean boolean36 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay35);
        org.joda.time.MonthDay monthDay38 = monthDay35.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay40 = monthDay38.minusDays(31);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay45 = monthDay42.withPeriodAdded(readablePeriod43, 1);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        int int52 = monthDay45.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay45.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay56.plus(readablePeriod61);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.MonthDay monthDay68 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = monthDay68.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property73 = monthDay66.property(dateTimeFieldType72);
        int int74 = property73.get();
        org.joda.time.MonthDay monthDay76 = property73.addWrapFieldToCopy((int) (short) 1);
        boolean boolean77 = monthDay56.isBefore((org.joda.time.ReadablePartial) monthDay76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay56.withChronologyRetainFields(chronology78);
        org.joda.time.Chronology chronology80 = monthDay79.getChronology();
        org.joda.time.MonthDay monthDay81 = monthDay54.withChronologyRetainFields(chronology80);
        org.joda.time.MonthDay monthDay82 = monthDay40.withChronologyRetainFields(chronology80);
        org.joda.time.Chronology chronology83 = monthDay82.getChronology();
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.now(chronology83);
        org.joda.time.MonthDay monthDay85 = new org.joda.time.MonthDay((long) (byte) 0, chronology83);
        int int86 = property11.compareTo((org.joda.time.ReadablePartial) monthDay85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay88 = property11.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay37.dayOfMonth();
        org.joda.time.Chronology chronology43 = monthDay37.getChronology();
        org.joda.time.Chronology chronology44 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay45 = monthDay32.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay32.minus(readablePeriod46);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        org.joda.time.MonthDay monthDay19 = property11.addToCopy(0);
        org.joda.time.MonthDay monthDay21 = property11.setCopy(1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (byte) 0);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("--09-02");
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = monthDay9.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property14 = monthDay7.property(dateTimeFieldType13);
        int int15 = property14.get();
        org.joda.time.DurationField durationField16 = property14.getDurationField();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        boolean boolean28 = property14.equals((java.lang.Object) monthDay20);
        java.util.Locale locale29 = null;
        java.lang.String str30 = property14.getAsShortText(locale29);
        java.lang.String str31 = property14.getAsShortText();
        java.lang.String str32 = property14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property14.getFieldType();
        boolean boolean34 = monthDay3.isSupported(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay36 = monthDay1.withField(dateTimeFieldType33, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[dayOfMonth]" + "'", str32, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay37.dayOfMonth();
        org.joda.time.Chronology chronology43 = monthDay37.getChronology();
        org.joda.time.Chronology chronology44 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay45 = monthDay32.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay.Property property46 = monthDay45.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MonthDay monthDay48 = new org.joda.time.MonthDay(dateTimeZone47);
        org.joda.time.MonthDay.Property property49 = monthDay48.dayOfMonth();
        boolean boolean50 = property46.equals((java.lang.Object) property49);
        int int51 = property46.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay53 = property46.addWrapFieldToCopy(28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertNotNull(monthDay53);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        int int17 = property10.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property10.getFieldType();
        org.joda.time.DurationField durationField19 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = property6.getAsText(locale9);
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        org.joda.time.MonthDay monthDay14 = property6.setCopy((int) (byte) 1);
        java.util.Locale locale15 = null;
        java.lang.String str16 = property6.getAsShortText(locale15);
        java.lang.String str17 = property6.getAsText();
        int int18 = property6.get();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay12.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.MonthDay monthDay32 = property29.addWrapFieldToCopy((int) (short) 1);
        boolean boolean33 = monthDay12.isBefore((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay12.withChronologyRetainFields(chronology34);
        org.joda.time.Chronology chronology36 = monthDay35.getChronology();
        java.lang.String str37 = monthDay35.toString();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = monthDay35.toDateTime(readableInstant38);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = property6.compareTo(readableInstant38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "--01-01" + "'", str37, "--01-01");
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        int int17 = property10.getMinimumValue();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property10.getAsText(locale18);
        org.joda.time.MonthDay monthDay21 = property10.addToCopy((int) (short) 10);
        java.util.Locale locale22 = null;
        int int23 = property10.getMaximumTextLength(locale22);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        org.joda.time.MonthDay monthDay34 = monthDay32.minusMonths(100);
        int int35 = monthDay34.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        org.joda.time.MonthDay.Property property29 = monthDay21.monthOfYear();
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = monthDay31.indexOf(dateTimeFieldType45);
        boolean boolean48 = monthDay21.equals((java.lang.Object) int47);
        org.joda.time.MonthDay monthDay50 = monthDay21.withMonthOfYear(9);
        int int52 = monthDay50.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = monthDay50.getFieldTypes();
        java.lang.String str55 = monthDay50.toString("--02-02");
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MonthDay monthDay58 = monthDay50.withPeriodAdded(readablePeriod56, (int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay50.plus(readablePeriod59);
        boolean boolean61 = monthDay17.equals((java.lang.Object) readablePeriod59);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "--02-02" + "'", str55, "--02-02");
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        int int35 = monthDay19.indexOf(dateTimeFieldType33);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        int int61 = property60.get();
        org.joda.time.DurationField durationField62 = property60.getDurationField();
        java.util.Locale locale63 = null;
        int int64 = property60.getMaximumTextLength(locale63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property71 = monthDay66.dayOfMonth();
        org.joda.time.Chronology chronology72 = monthDay66.getChronology();
        org.joda.time.Chronology chronology73 = monthDay66.getChronology();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = monthDay66.toDateTime(readableInstant74);
        int int76 = property60.compareTo((org.joda.time.ReadableInstant) dateTime75);
        int int77 = property46.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime78 = monthDay19.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        int int79 = property6.compareTo((org.joda.time.ReadableInstant) dateTime78);
        java.lang.String str80 = property6.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        boolean boolean19 = monthDay1.isSupported(dateTimeFieldType17);
        org.joda.time.MonthDay.Property property20 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay22 = property20.setCopy(1);
        java.util.Locale locale23 = null;
        int int24 = property20.getMaximumShortTextLength(locale23);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        int int25 = property10.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay27 = property10.setCopy("2");
        org.joda.time.DurationField durationField28 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = monthDay15.getFieldTypes();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        java.lang.String str29 = property28.getAsShortText();
        int int30 = property28.getMinimumValue();
        java.util.Locale locale32 = null;
        org.joda.time.MonthDay monthDay33 = property28.setCopy("2", locale32);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = monthDay39.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property44 = monthDay37.property(dateTimeFieldType43);
        org.joda.time.MonthDay.Property property45 = monthDay37.monthOfYear();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        org.joda.time.MonthDay monthDay48 = property45.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property45.getFieldType();
        org.joda.time.MonthDay.Property property50 = monthDay33.property(dateTimeFieldType49);
        org.joda.time.MonthDay.Property property51 = monthDay15.property(dateTimeFieldType49);
        int int52 = property51.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay53 = property51.getMonthDay();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Jan" + "'", str29, "Jan");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 12 + "'", int52 == 12);
        org.junit.Assert.assertNotNull(monthDay53);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        int int16 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay17 = property10.getMonthDay();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = property28.get();
        org.joda.time.DurationField durationField30 = property28.getDurationField();
        java.util.Locale locale31 = null;
        int int32 = property28.getMaximumTextLength(locale31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay34.dayOfMonth();
        org.joda.time.Chronology chronology40 = monthDay34.getChronology();
        org.joda.time.Chronology chronology41 = monthDay34.getChronology();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = monthDay34.toDateTime(readableInstant42);
        int int44 = property28.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MonthDay monthDay46 = property28.addWrapFieldToCopy((int) '4');
        org.joda.time.Chronology chronology47 = monthDay46.getChronology();
        org.joda.time.MonthDay monthDay48 = monthDay17.withChronologyRetainFields(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay51 = monthDay17.withPeriodAdded(readablePeriod49, (int) 'a');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay51);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        org.joda.time.DurationField durationField44 = property41.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        java.util.Locale locale27 = null;
        int int28 = property24.getMaximumTextLength(locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.Chronology chronology37 = monthDay30.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = monthDay30.toDateTime(readableInstant38);
        int int40 = property24.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int41 = property10.compareTo((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale42 = null;
        int int43 = property10.getMaximumShortTextLength(locale42);
        int int44 = property10.get();
        java.lang.String str45 = property10.toString();
        int int46 = property10.get();
        java.util.Locale locale47 = null;
        int int48 = property10.getMaximumShortTextLength(locale47);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[dayOfMonth]" + "'", str45, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = monthDay28.isSupported(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        java.util.Locale locale15 = null;
        org.joda.time.MonthDay monthDay16 = property11.setCopy("2", locale15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        boolean boolean39 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.MonthDay monthDay41 = monthDay38.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay.Property property42 = monthDay41.monthOfYear();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay44.plus(readablePeriod49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property61 = monthDay54.property(dateTimeFieldType60);
        int int62 = property61.get();
        org.joda.time.MonthDay monthDay64 = property61.addWrapFieldToCopy((int) (short) 1);
        boolean boolean65 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay44.withChronologyRetainFields(chronology66);
        org.joda.time.Chronology chronology68 = monthDay67.getChronology();
        int[] intArray69 = monthDay67.getValues();
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = monthDay71.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay77 = monthDay67.withField(dateTimeFieldType75, 10);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay77.plus(readablePeriod78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.MonthDay monthDay81 = monthDay79.plus(readablePeriod80);
        boolean boolean82 = monthDay41.isBefore((org.joda.time.ReadablePartial) monthDay79);
        boolean boolean83 = monthDay16.equals((java.lang.Object) monthDay41);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay34 = monthDay24.withField(dateTimeFieldType32, 10);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MonthDay monthDay42 = monthDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = monthDay40.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property45 = monthDay40.dayOfMonth();
        org.joda.time.Chronology chronology46 = monthDay40.getChronology();
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.now(chronology46);
        org.joda.time.MonthDay monthDay48 = monthDay38.withChronologyRetainFields(chronology46);
        org.joda.time.Chronology chronology49 = monthDay38.getChronology();
        org.joda.time.MonthDay monthDay50 = new org.joda.time.MonthDay((java.lang.Object) monthDay34, chronology49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = monthDay34.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.lang.String str25 = property10.getAsShortText();
        java.lang.String str26 = property10.toString();
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy(9);
        org.joda.time.DurationField durationField29 = property10.getDurationField();
        org.joda.time.DurationField durationField30 = property10.getRangeDurationField();
        int int31 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfMonth]" + "'", str26, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        java.util.Locale locale28 = null;
        java.lang.String str29 = property10.getAsShortText(locale28);
        org.joda.time.MonthDay monthDay31 = property10.addToCopy(30);
        org.joda.time.MonthDay monthDay33 = monthDay31.plusDays((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay36 = monthDay33.withFieldAdded(durationFieldType34, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay4.minus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        int int29 = property27.getMaximumValue();
        org.joda.time.MonthDay monthDay31 = property27.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        int int40 = monthDay33.getDayOfMonth();
        int int41 = property27.compareTo((org.joda.time.ReadablePartial) monthDay33);
        boolean boolean42 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay33);
        org.joda.time.Chronology chronology43 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 2, chronology43);
        org.joda.time.MonthDay monthDay46 = monthDay44.minusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay48.plus(readablePeriod53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay58.property(dateTimeFieldType64);
        int int66 = property65.get();
        org.joda.time.MonthDay monthDay68 = property65.addWrapFieldToCopy((int) (short) 1);
        boolean boolean69 = monthDay48.isBefore((org.joda.time.ReadablePartial) monthDay68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = monthDay48.getFieldType(0);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.MonthDay monthDay79 = monthDay73.plus(readablePeriod78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.MonthDay monthDay82 = monthDay73.withPeriodAdded(readablePeriod80, 9);
        org.joda.time.DateTimeField dateTimeField84 = monthDay82.getField(1);
        boolean boolean85 = monthDay48.isEqual((org.joda.time.ReadablePartial) monthDay82);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.MonthDay monthDay88 = monthDay48.withPeriodAdded(readablePeriod86, 28);
        boolean boolean89 = monthDay44.isBefore((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay.Property property90 = monthDay48.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(monthDay79);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        java.util.Locale locale39 = null;
        int int40 = property38.getMaximumTextLength(locale39);
        java.util.Locale locale41 = null;
        int int42 = property38.getMaximumShortTextLength(locale41);
        org.joda.time.DateTimeField dateTimeField43 = property38.getField();
        int int44 = property38.getMaximumValue();
        int int45 = property38.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property38.getFieldType();
        boolean boolean47 = monthDay26.isSupported(dateTimeFieldType46);
        org.joda.time.MonthDay monthDay49 = monthDay26.minusMonths((int) (byte) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = monthDay49.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay9 = property6.setCopy("monthOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        boolean boolean31 = monthDay28.isEqual((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay30.getFieldType(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = null;
        int int10 = property6.getMaximumTextLength(locale9);
        org.joda.time.MonthDay monthDay12 = property6.addWrapFieldToCopy((int) (short) 1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(monthDay12);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        int int28 = monthDay27.getMonthOfYear();
        org.joda.time.MonthDay monthDay30 = monthDay27.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = monthDay27.getFields();
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay monthDay34 = property32.setCopy((int) (byte) 10);
        java.util.Locale locale35 = null;
        java.lang.String str36 = property32.getAsShortText(locale35);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2" + "'", str36, "2");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay.Property property25 = monthDay16.dayOfMonth();
        org.joda.time.MonthDay.Property property26 = monthDay16.monthOfYear();
        org.joda.time.MonthDay monthDay28 = property26.addToCopy(4);
        java.util.Locale locale29 = null;
        java.lang.String str30 = property26.getAsText(locale29);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "January" + "'", str30, "January");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        boolean boolean31 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay33 = monthDay30.withDayOfMonth(10);
        org.joda.time.MonthDay monthDay35 = monthDay30.minusDays((int) ' ');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.DateTimeField dateTimeField25 = property10.getField();
        java.util.Locale locale26 = null;
        int int27 = property10.getMaximumShortTextLength(locale26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        org.joda.time.MonthDay.Property property39 = monthDay31.monthOfYear();
        int int40 = monthDay31.getDayOfMonth();
        org.joda.time.MonthDay.Property property41 = monthDay31.dayOfMonth();
        int int42 = monthDay31.getDayOfMonth();
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property49 = monthDay44.dayOfMonth();
        org.joda.time.Chronology chronology50 = monthDay44.getChronology();
        org.joda.time.MonthDay monthDay51 = monthDay31.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay monthDay52 = new org.joda.time.MonthDay((java.lang.Object) locale26, chronology50);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.now(chronology50);
        org.joda.time.MonthDay monthDay54 = new org.joda.time.MonthDay(chronology50);
        org.joda.time.MonthDay monthDay56 = monthDay54.plusDays((int) (byte) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay56);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (byte) 1);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = monthDay7.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property12 = monthDay5.property(dateTimeFieldType11);
        org.joda.time.MonthDay.Property property13 = monthDay5.monthOfYear();
        int int14 = monthDay5.getDayOfMonth();
        org.joda.time.MonthDay.Property property15 = monthDay5.dayOfMonth();
        int int16 = monthDay5.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay5.plus(readablePeriod17);
        org.joda.time.MonthDay monthDay20 = monthDay18.plusDays((int) (byte) 0);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay36 = monthDay34.plusDays(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = monthDay36.getFieldTypes();
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay39.withChronologyRetainFields(chronology40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay41.property(dateTimeFieldType47);
        org.joda.time.MonthDay.Property property49 = monthDay41.monthOfYear();
        java.lang.String str50 = property49.getAsShortText();
        int int51 = property49.getMinimumValue();
        java.util.Locale locale53 = null;
        org.joda.time.MonthDay monthDay54 = property49.setCopy("2", locale53);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay monthDay60 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MonthDay monthDay62 = monthDay60.withChronologyRetainFields(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = monthDay60.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property65 = monthDay58.property(dateTimeFieldType64);
        org.joda.time.MonthDay.Property property66 = monthDay58.monthOfYear();
        org.joda.time.DurationField durationField67 = property66.getRangeDurationField();
        org.joda.time.MonthDay monthDay69 = property66.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property66.getFieldType();
        org.joda.time.MonthDay.Property property71 = monthDay54.property(dateTimeFieldType70);
        org.joda.time.MonthDay.Property property72 = monthDay36.property(dateTimeFieldType70);
        int int73 = monthDay20.get(dateTimeFieldType70);
        int int74 = monthDay1.indexOf(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Jan" + "'", str50, "Jan");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        int[] intArray26 = monthDay24.getValues();
        int[] intArray27 = monthDay24.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 1]");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay.Property property25 = monthDay24.monthOfYear();
        int int26 = property25.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property25.getFieldType();
        org.joda.time.DurationField durationField28 = property25.getRangeDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getDayOfMonth();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property32 = monthDay27.dayOfMonth();
        org.joda.time.Chronology chronology33 = monthDay27.getChronology();
        org.joda.time.Chronology chronology34 = monthDay27.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = monthDay27.toDateTime(readableInstant35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay38.plus(readablePeriod43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = monthDay50.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property55 = monthDay48.property(dateTimeFieldType54);
        int int56 = property55.get();
        org.joda.time.MonthDay monthDay58 = property55.addWrapFieldToCopy((int) (short) 1);
        boolean boolean59 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = monthDay38.getFieldType(0);
        int int62 = monthDay27.get(dateTimeFieldType61);
        org.joda.time.MonthDay.Property property63 = monthDay24.property(dateTimeFieldType61);
        org.joda.time.MonthDay monthDay65 = property63.addWrapFieldToCopy(3);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(monthDay65);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.MonthDay monthDay23 = monthDay3.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = monthDay23.minusMonths((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = monthDay25.withFieldAdded(durationFieldType26, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = monthDay56.plusDays(2);
        boolean boolean59 = monthDay24.isEqual((org.joda.time.ReadablePartial) monthDay56);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay64 = monthDay61.withPeriodAdded(readablePeriod62, 1);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        int int71 = monthDay64.indexOf(dateTimeFieldType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay64.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay.Property property74 = monthDay73.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property74.getFieldType();
        int int76 = monthDay24.indexOf(dateTimeFieldType75);
        int int77 = monthDay24.size();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay30 = monthDay27.withPeriodAdded(readablePeriod28, 1);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        int int37 = monthDay30.indexOf(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay30.withChronologyRetainFields(chronology38);
        boolean boolean40 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.MonthDay monthDay42 = monthDay24.plusDays(2);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay46.property(dateTimeFieldType52);
        int int54 = property53.get();
        org.joda.time.MonthDay monthDay56 = property53.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = monthDay56.plusDays(2);
        boolean boolean59 = monthDay24.isEqual((org.joda.time.ReadablePartial) monthDay56);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.MonthDay monthDay64 = monthDay61.withPeriodAdded(readablePeriod62, 1);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = monthDay66.getFieldType((int) (byte) 1);
        int int71 = monthDay64.indexOf(dateTimeFieldType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay64.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay.Property property74 = monthDay73.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property74.getFieldType();
        int int76 = monthDay24.indexOf(dateTimeFieldType75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = monthDay24.toString("Property[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("--01-31");
        org.junit.Assert.assertNotNull(monthDay1);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay10.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        int int28 = property27.get();
        org.joda.time.MonthDay monthDay30 = property27.addWrapFieldToCopy((int) (short) 1);
        boolean boolean31 = monthDay10.isBefore((org.joda.time.ReadablePartial) monthDay30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay10.withChronologyRetainFields(chronology32);
        org.joda.time.Chronology chronology34 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay8, chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.now(chronology34);
        org.joda.time.MonthDay monthDay39 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay42 = monthDay39.withPeriodAdded(readablePeriod40, 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = monthDay44.getFieldType((int) (byte) 1);
        int int49 = monthDay42.indexOf(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay42.withChronologyRetainFields(chronology50);
        org.joda.time.MonthDay.Property property52 = monthDay51.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        org.joda.time.MonthDay.Property property54 = monthDay37.property(dateTimeFieldType53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.joda.time.MonthDay monthDay57 = property54.addWrapFieldToCopy((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay59 = property54.setCopy("--01-11");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-11\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(monthDay57);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.joda.time.Chronology chronology18 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology18);
        int int20 = monthDay19.getMonthOfYear();
        org.joda.time.MonthDay monthDay22 = monthDay19.minusMonths((int) (byte) -1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertNotNull(monthDay22);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        java.lang.String str15 = property11.getAsShortText();
        org.joda.time.MonthDay monthDay17 = property11.setCopy("2");
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("2");
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay26.dayOfMonth();
        org.joda.time.Chronology chronology32 = monthDay26.getChronology();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.now(chronology32);
        org.joda.time.MonthDay monthDay34 = monthDay24.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay35 = new org.joda.time.MonthDay(10L, chronology32);
        org.joda.time.MonthDay monthDay36 = monthDay19.withChronologyRetainFields(chronology32);
        org.joda.time.MonthDay monthDay37 = monthDay17.withChronologyRetainFields(chronology32);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay37);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        int int11 = property6.getMaximumValueOverall();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property6.getAsText(locale12);
        java.lang.String str14 = property6.getName();
        int int15 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = monthDay16.plusDays((int) (byte) 0);
        int int19 = monthDay18.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay21 = monthDay18.withMonthOfYear((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        int int16 = property14.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay18 = property14.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.plus(readablePeriod19);
        java.lang.Class<?> wildcardClass21 = monthDay20.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("2");
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property15 = monthDay10.dayOfMonth();
        org.joda.time.Chronology chronology16 = monthDay10.getChronology();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.now(chronology16);
        org.joda.time.MonthDay monthDay18 = monthDay8.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(10L, chronology16);
        org.joda.time.MonthDay monthDay20 = monthDay3.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay(chronology16);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.now(chronology16);
        org.joda.time.MonthDay monthDay23 = new org.joda.time.MonthDay((int) (byte) 1, 12, chronology16);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        java.lang.String str15 = property11.getAsShortText();
        int int16 = property11.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay44 = monthDay42.plusMonths(1);
        int int45 = monthDay16.compareTo((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay42.plus(readablePeriod46);
        org.joda.time.MonthDay monthDay49 = monthDay47.minusMonths(12);
        org.joda.time.MonthDay monthDay51 = monthDay49.plusMonths(1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay24.plus(readablePeriod29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.MonthDay monthDay36 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = monthDay36.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property41 = monthDay34.property(dateTimeFieldType40);
        int int42 = property41.get();
        org.joda.time.MonthDay monthDay44 = property41.addWrapFieldToCopy((int) (short) 1);
        boolean boolean45 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay24.withChronologyRetainFields(chronology46);
        org.joda.time.Chronology chronology48 = monthDay47.getChronology();
        int[] intArray49 = monthDay47.getValues();
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay54 = monthDay51.withPeriodAdded(readablePeriod52, 1);
        org.joda.time.MonthDay monthDay56 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay56.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = monthDay56.getFieldType((int) (byte) 1);
        int int61 = monthDay54.indexOf(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay54.withChronologyRetainFields(chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        int int70 = monthDay54.get(dateTimeFieldType69);
        boolean boolean71 = monthDay47.isAfter((org.joda.time.ReadablePartial) monthDay54);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay47.plus(readablePeriod72);
        boolean boolean74 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay73);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay80.withChronologyRetainFields(chronology81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = monthDay80.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property85 = monthDay78.property(dateTimeFieldType84);
        int int86 = property85.get();
        int int87 = property85.getMaximumValue();
        org.joda.time.MonthDay monthDay88 = property85.getMonthDay();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.MonthDay monthDay90 = monthDay88.plus(readablePeriod89);
        int int91 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay90);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 31 + "'", int87 == 31);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(monthDay90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(dateTimeZone0);
        org.joda.time.MonthDay.Property property2 = monthDay1.dayOfMonth();
        java.lang.String str3 = property2.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "25" + "'", str3, "25");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.MonthDay monthDay7 = monthDay4.withPeriodAdded(readablePeriod5, 1);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = monthDay9.getFieldType((int) (byte) 1);
        int int14 = monthDay7.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay7.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay18.plus(readablePeriod23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        int int36 = property35.get();
        org.joda.time.MonthDay monthDay38 = property35.addWrapFieldToCopy((int) (short) 1);
        boolean boolean39 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay18.withChronologyRetainFields(chronology40);
        org.joda.time.Chronology chronology42 = monthDay41.getChronology();
        org.joda.time.MonthDay monthDay43 = monthDay16.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay44 = new org.joda.time.MonthDay((long) 12, chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay(100, (int) '4', chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(monthDay43);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        java.util.Locale locale15 = null;
        org.joda.time.MonthDay monthDay16 = property11.setCopy("2", locale15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        org.joda.time.DurationField durationField29 = property28.getRangeDurationField();
        org.joda.time.MonthDay monthDay31 = property28.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property28.getFieldType();
        org.joda.time.MonthDay.Property property33 = monthDay16.property(dateTimeFieldType32);
        org.joda.time.MonthDay.Property property34 = monthDay16.dayOfMonth();
        java.lang.String str35 = property34.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay24.minus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay33 = monthDay30.withPeriodAdded(readablePeriod31, 1);
        org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MonthDay monthDay37 = monthDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = monthDay35.getFieldType((int) (byte) 1);
        int int40 = monthDay33.indexOf(dateTimeFieldType39);
        org.joda.time.MonthDay.Property property41 = monthDay28.property(dateTimeFieldType39);
        java.util.Locale locale42 = null;
        int int43 = property41.getMaximumShortTextLength(locale42);
        int int44 = property41.getMinimumValue();
        org.joda.time.MonthDay monthDay46 = property41.addToCopy((int) ' ');
        java.lang.String str47 = property41.toString();
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay49.plus(readablePeriod54);
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MonthDay monthDay59 = monthDay57.withChronologyRetainFields(chronology58);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property66 = monthDay59.property(dateTimeFieldType65);
        int int67 = property66.get();
        org.joda.time.MonthDay monthDay69 = property66.addWrapFieldToCopy((int) (short) 1);
        boolean boolean70 = monthDay49.isBefore((org.joda.time.ReadablePartial) monthDay69);
        org.joda.time.MonthDay monthDay72 = monthDay69.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay74 = monthDay72.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.MonthDay monthDay76 = monthDay72.minus(readablePeriod75);
        org.joda.time.MonthDay monthDay78 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.MonthDay monthDay81 = monthDay78.withPeriodAdded(readablePeriod79, 1);
        org.joda.time.MonthDay monthDay83 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MonthDay monthDay85 = monthDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = monthDay83.getFieldType((int) (byte) 1);
        int int88 = monthDay81.indexOf(dateTimeFieldType87);
        org.joda.time.MonthDay.Property property89 = monthDay76.property(dateTimeFieldType87);
        org.joda.time.DateTimeField[] dateTimeFieldArray90 = monthDay76.getFields();
        int int91 = property41.compareTo((org.joda.time.ReadablePartial) monthDay76);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[dayOfMonth]" + "'", str47, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(monthDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTimeFieldArray90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale17 = null;
        org.joda.time.MonthDay monthDay18 = property14.setCopy("1", locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay23 = monthDay20.withPeriodAdded(readablePeriod21, 1);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        int int30 = monthDay23.indexOf(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay23.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        int int39 = monthDay23.get(dateTimeFieldType38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = monthDay23.isSupported(dateTimeFieldType40);
        int int42 = monthDay18.compareTo((org.joda.time.ReadablePartial) monthDay23);
        int int43 = monthDay18.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        int int23 = property6.getMaximumValue();
        org.joda.time.DurationField durationField24 = property6.getDurationField();
        org.joda.time.DurationField durationField25 = property6.getDurationField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusMonths(2);
        org.joda.time.MonthDay.Property property31 = monthDay30.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        int int53 = property52.get();
        int int54 = property52.getMaximumValue();
        org.joda.time.MonthDay monthDay56 = property52.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay58.plus(readablePeriod63);
        int int65 = monthDay58.getDayOfMonth();
        int int66 = property52.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.DateTimeField[] dateTimeFieldArray67 = monthDay58.getFields();
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay71.property(dateTimeFieldType77);
        int int79 = property78.get();
        org.joda.time.DurationField durationField80 = property78.getDurationField();
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MonthDay monthDay84 = monthDay82.withChronologyRetainFields(chronology83);
        org.joda.time.MonthDay monthDay86 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MonthDay monthDay88 = monthDay86.withChronologyRetainFields(chronology87);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = monthDay86.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property91 = monthDay84.property(dateTimeFieldType90);
        boolean boolean92 = property78.equals((java.lang.Object) monthDay84);
        int int93 = property78.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property78.getFieldType();
        org.joda.time.MonthDay monthDay96 = monthDay58.withField(dateTimeFieldType94, (int) (short) 10);
        int int97 = monthDay16.compareTo((org.joda.time.ReadablePartial) monthDay58);
        org.joda.time.MonthDay monthDay99 = monthDay58.minusMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 31 + "'", int54 == 31);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(monthDay96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(monthDay99);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property10.getFieldType();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property10.getAsShortText(locale30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMinimumValueOverall();
        java.util.Locale locale16 = null;
        org.joda.time.MonthDay monthDay17 = property11.setCopy("January", locale16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.DateTimeField[] dateTimeFieldArray41 = monthDay19.getFields();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay19.minus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay46 = monthDay19.withPeriodAdded(readablePeriod44, (int) (byte) -1);
        boolean boolean47 = property11.equals((java.lang.Object) monthDay19);
        org.joda.time.MonthDay monthDay49 = property11.addWrapFieldToCopy((int) (byte) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(monthDay49);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        java.lang.String str25 = property10.getName();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property10.getAsShortText(locale26);
        java.util.Locale locale28 = null;
        java.lang.String str29 = property10.getAsShortText(locale28);
        org.joda.time.MonthDay monthDay31 = property10.addToCopy(30);
        java.util.Locale locale33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay34 = property10.setCopy("--01-30", locale33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--01-30\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfMonth" + "'", str25, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(monthDay31);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay31 = monthDay28.withPeriodAdded(readablePeriod29, 1);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        int int38 = monthDay31.indexOf(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay31.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay42.plus(readablePeriod47);
        org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = monthDay54.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property59 = monthDay52.property(dateTimeFieldType58);
        int int60 = property59.get();
        org.joda.time.MonthDay monthDay62 = property59.addWrapFieldToCopy((int) (short) 1);
        boolean boolean63 = monthDay42.isBefore((org.joda.time.ReadablePartial) monthDay62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay42.withChronologyRetainFields(chronology64);
        org.joda.time.Chronology chronology66 = monthDay65.getChronology();
        org.joda.time.MonthDay monthDay67 = monthDay40.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay68 = monthDay26.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = new org.joda.time.MonthDay((java.lang.Object) monthDay68);
        org.joda.time.MonthDay monthDay71 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MonthDay monthDay73 = monthDay71.withChronologyRetainFields(chronology72);
        org.joda.time.MonthDay monthDay75 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MonthDay monthDay77 = monthDay75.withChronologyRetainFields(chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = monthDay75.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property80 = monthDay73.property(dateTimeFieldType79);
        int int81 = property80.get();
        org.joda.time.MonthDay monthDay83 = property80.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property84 = monthDay83.dayOfMonth();
        int int85 = property84.getMaximumValue();
        java.lang.String str86 = property84.getAsText();
        java.util.Locale locale87 = null;
        java.lang.String str88 = property84.getAsShortText(locale87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property84.getFieldType();
        boolean boolean90 = monthDay68.isSupported(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(monthDay77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(monthDay83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 31 + "'", int85 == 31);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2" + "'", str86, "2");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2" + "'", str88, "2");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.MonthDay monthDay41 = monthDay37.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MonthDay monthDay43 = new org.joda.time.MonthDay(dateTimeZone42);
        boolean boolean44 = monthDay41.isEqual((org.joda.time.ReadablePartial) monthDay43);
        boolean boolean45 = monthDay1.equals((java.lang.Object) monthDay41);
        org.joda.time.MonthDay.Property property46 = monthDay41.dayOfMonth();
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay51 = monthDay48.withPeriodAdded(readablePeriod49, 1);
        org.joda.time.MonthDay monthDay53 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = monthDay53.getFieldType((int) (byte) 1);
        int int58 = monthDay51.indexOf(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay51.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        int int67 = monthDay51.get(dateTimeFieldType66);
        org.joda.time.MonthDay monthDay69 = monthDay51.plusDays(0);
        int int70 = property46.compareTo((org.joda.time.ReadablePartial) monthDay51);
        org.joda.time.DateTimeField dateTimeField71 = property46.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay72 = new org.joda.time.MonthDay((java.lang.Object) property46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MonthDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay24.size();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay44.property(dateTimeFieldType50);
        boolean boolean52 = property38.equals((java.lang.Object) monthDay44);
        int int53 = property38.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property38.getFieldType();
        org.joda.time.MonthDay monthDay56 = monthDay24.withField(dateTimeFieldType54, (int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.MonthDay monthDay59 = monthDay24.withPeriodAdded(readablePeriod57, 9);
        org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = monthDay61.withChronologyRetainFields(chronology62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay61.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay61.plus(readablePeriod66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay71.property(dateTimeFieldType77);
        int int79 = property78.get();
        org.joda.time.MonthDay monthDay81 = property78.addWrapFieldToCopy((int) (short) 1);
        boolean boolean82 = monthDay61.isBefore((org.joda.time.ReadablePartial) monthDay81);
        org.joda.time.MonthDay monthDay84 = monthDay81.minusMonths((int) (byte) 100);
        int int85 = monthDay84.getMonthOfYear();
        org.joda.time.MonthDay monthDay87 = monthDay84.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.MonthDay monthDay89 = monthDay84.plus(readablePeriod88);
        org.joda.time.MonthDay monthDay91 = monthDay89.withDayOfMonth(1);
        boolean boolean92 = monthDay24.isBefore((org.joda.time.ReadablePartial) monthDay91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType94 = monthDay24.getFieldType(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(monthDay89);
        org.junit.Assert.assertNotNull(monthDay91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        java.util.Locale locale27 = null;
        java.lang.String str28 = monthDay24.toString("--01-01", locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        org.joda.time.MonthDay.Property property40 = monthDay32.monthOfYear();
        java.lang.String str42 = monthDay32.toString("--11-24");
        boolean boolean43 = monthDay24.isAfter((org.joda.time.ReadablePartial) monthDay32);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(10, (int) (short) 1);
        org.joda.time.MonthDay monthDay48 = monthDay46.withDayOfMonth((int) (short) 1);
        int int49 = monthDay24.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "--01-01" + "'", str28, "--01-01");
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "--11-24" + "'", str42, "--11-24");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay73.dayOfMonth();
        org.joda.time.Chronology chronology79 = monthDay73.getChronology();
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(chronology79);
        org.joda.time.MonthDay monthDay81 = monthDay71.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = new org.joda.time.MonthDay(10L, chronology79);
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology79);
        org.joda.time.DateTimeField dateTimeField85 = monthDay83.getField((int) (byte) 1);
        java.lang.Class<?> wildcardClass86 = monthDay83.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(10L, chronology12);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        org.joda.time.MonthDay monthDay29 = property26.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property30 = monthDay29.dayOfMonth();
        int int31 = property30.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay33 = property30.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property30.getFieldType();
        org.joda.time.MonthDay monthDay36 = monthDay15.withField(dateTimeFieldType34, (int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay36.minus(readablePeriod37);
        org.joda.time.Chronology chronology39 = monthDay36.getChronology();
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay29.getFields();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.withPeriodAdded(readablePeriod33, 0);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property50 = monthDay49.dayOfMonth();
        int int51 = property50.getMaximumValueOverall();
        int int52 = property50.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay54 = property50.setCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        org.joda.time.MonthDay monthDay57 = monthDay35.withField(dateTimeFieldType55, 8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField59 = monthDay35.getField((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(monthDay57);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay((-1L), chronology25);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((java.lang.Object) monthDay26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) '#');
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.Chronology chronology40 = monthDay33.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = monthDay33.toDateTime(readableInstant41);
        org.joda.time.MonthDay monthDay44 = monthDay33.plusMonths((int) ' ');
        boolean boolean45 = monthDay29.isAfter((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay47.dayOfMonth();
        org.joda.time.MonthDay monthDay54 = property52.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay56 = property52.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.MonthDay monthDay62 = monthDay58.minusMonths((int) (byte) -1);
        boolean boolean63 = property52.equals((java.lang.Object) monthDay62);
        int int64 = property52.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property52.getFieldType();
        org.joda.time.MonthDay.Property property66 = monthDay44.property(dateTimeFieldType65);
        int int67 = monthDay27.indexOf(dateTimeFieldType65);
        org.joda.time.MonthDay monthDay69 = monthDay3.withField(dateTimeFieldType65, 9);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay3.plus(readablePeriod70);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay((java.lang.Object) monthDay21);
        org.joda.time.MonthDay.Property property28 = monthDay21.monthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        org.joda.time.MonthDay monthDay17 = property10.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField44 = monthDay39.getField(1);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay46.plus(readablePeriod51);
        int int53 = monthDay52.getMonthOfYear();
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        java.util.Locale locale65 = null;
        int int66 = property64.getMaximumTextLength(locale65);
        org.joda.time.MonthDay monthDay68 = property64.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay68.minus(readablePeriod69);
        boolean boolean71 = monthDay52.isAfter((org.joda.time.ReadablePartial) monthDay68);
        boolean boolean72 = monthDay39.isBefore((org.joda.time.ReadablePartial) monthDay52);
        boolean boolean73 = monthDay17.isEqual((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay.Property property74 = monthDay17.dayOfMonth();
        org.joda.time.MonthDay.Property property75 = monthDay17.dayOfMonth();
        org.joda.time.MonthDay monthDay77 = monthDay17.minusMonths((int) (short) -1);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(monthDay77);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.Chronology chronology7 = monthDay1.getChronology();
        org.joda.time.Chronology chronology8 = monthDay1.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = monthDay1.toDateTime(readableInstant9);
        org.joda.time.MonthDay monthDay12 = monthDay1.plusMonths(0);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay14.getFields();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.MonthDay monthDay38 = monthDay14.minus(readablePeriod37);
        boolean boolean39 = monthDay1.equals((java.lang.Object) monthDay38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        java.util.Locale locale51 = null;
        int int52 = property50.getMaximumTextLength(locale51);
        org.joda.time.MonthDay monthDay54 = property50.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.MonthDay monthDay55 = new org.joda.time.MonthDay((java.lang.Object) monthDay54);
        boolean boolean56 = monthDay38.isAfter((org.joda.time.ReadablePartial) monthDay55);
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay58.plus(readablePeriod63);
        org.joda.time.MonthDay monthDay66 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MonthDay monthDay68 = monthDay66.withChronologyRetainFields(chronology67);
        org.joda.time.MonthDay monthDay70 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MonthDay monthDay72 = monthDay70.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = monthDay70.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property75 = monthDay68.property(dateTimeFieldType74);
        int int76 = property75.get();
        org.joda.time.MonthDay monthDay78 = property75.addWrapFieldToCopy((int) (short) 1);
        boolean boolean79 = monthDay58.isBefore((org.joda.time.ReadablePartial) monthDay78);
        org.joda.time.MonthDay monthDay81 = monthDay78.minusMonths((int) (byte) 100);
        int int82 = monthDay81.getMonthOfYear();
        org.joda.time.MonthDay monthDay84 = monthDay81.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay81.plus(readablePeriod85);
        org.joda.time.MonthDay monthDay88 = monthDay86.withDayOfMonth(1);
        boolean boolean89 = monthDay38.isBefore((org.joda.time.ReadablePartial) monthDay88);
        java.util.Locale locale91 = null;
        java.lang.String str92 = monthDay88.toString("--01-02", locale91);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(monthDay68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(monthDay81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "--01-02" + "'", str92, "--01-02");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        boolean boolean38 = property24.equals((java.lang.Object) monthDay30);
        java.lang.String str39 = property24.getAsShortText();
        java.lang.String str40 = property24.toString();
        java.lang.String str41 = property24.getAsShortText();
        int int42 = property24.getMaximumValueOverall();
        boolean boolean43 = property11.equals((java.lang.Object) int42);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Property[dayOfMonth]" + "'", str40, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 31 + "'", int42 == 31);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay29.getFields();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.withPeriodAdded(readablePeriod33, 0);
        int int36 = monthDay35.getDayOfMonth();
        java.lang.String str38 = monthDay35.toString("25");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "25" + "'", str38, "25");
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        org.joda.time.MonthDay monthDay16 = property11.addWrapFieldToCopy((int) '#');
        java.lang.String str17 = property11.toString();
        org.joda.time.MonthDay monthDay19 = property11.addToCopy(0);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.minus(readablePeriod20);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[monthOfYear]" + "'", str17, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.minusDays(31);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusDays((int) (byte) 10);
        org.joda.time.MonthDay monthDay30 = monthDay26.minusMonths(2);
        org.joda.time.MonthDay monthDay32 = monthDay26.plusMonths((int) '#');
        int int33 = monthDay26.getDayOfMonth();
        int int34 = monthDay26.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        int int25 = monthDay24.getMonthOfYear();
        org.joda.time.MonthDay monthDay27 = monthDay24.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay24.plus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(9);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = monthDay29.getFields();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay29.withPeriodAdded(readablePeriod33, 0);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        int int47 = property46.get();
        org.joda.time.MonthDay monthDay49 = property46.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property50 = monthDay49.dayOfMonth();
        int int51 = property50.getMaximumValueOverall();
        int int52 = property50.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay54 = property50.setCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property50.getFieldType();
        org.joda.time.MonthDay monthDay57 = monthDay35.withField(dateTimeFieldType55, 8);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = monthDay57.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(monthDay57);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        java.lang.String str20 = property10.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property10.getFieldType();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "dayOfMonth" + "'", str20, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        int int39 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay26);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay((java.lang.Object) monthDay26);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay44 = monthDay42.minusDays((int) '#');
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = monthDay46.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property51 = monthDay46.dayOfMonth();
        org.joda.time.Chronology chronology52 = monthDay46.getChronology();
        org.joda.time.Chronology chronology53 = monthDay46.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = monthDay46.toDateTime(readableInstant54);
        org.joda.time.MonthDay monthDay57 = monthDay46.plusMonths((int) ' ');
        boolean boolean58 = monthDay42.isAfter((org.joda.time.ReadablePartial) monthDay57);
        org.joda.time.Chronology chronology59 = monthDay57.getChronology();
        org.joda.time.MonthDay monthDay60 = new org.joda.time.MonthDay((java.lang.Object) monthDay40, chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField62 = monthDay60.getField((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.MonthDay monthDay14 = property11.setCopy("1");
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay((-1L), chronology23);
        boolean boolean25 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay24);
        org.joda.time.MonthDay.Property property26 = monthDay24.monthOfYear();
        java.lang.String str27 = property26.getAsString();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "12" + "'", str27, "12");
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.MonthDay monthDay6 = monthDay3.withPeriodAdded(readablePeriod4, 1);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay3.plus(readablePeriod7);
        int int9 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay8);
        org.joda.time.MonthDay.Property property10 = monthDay8.monthOfYear();
        org.joda.time.Chronology chronology11 = monthDay8.getChronology();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        int int28 = monthDay15.getDayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = monthDay15.toString(dateTimeFormatter29);
        org.joda.time.MonthDay.Property property31 = monthDay15.dayOfMonth();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property31.getAsText(locale32);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "--01-01" + "'", str30, "--01-01");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay.Property property23 = monthDay1.monthOfYear();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay25.plus(readablePeriod30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        int int43 = property42.get();
        org.joda.time.MonthDay monthDay45 = property42.addWrapFieldToCopy((int) (short) 1);
        boolean boolean46 = monthDay25.isBefore((org.joda.time.ReadablePartial) monthDay45);
        boolean boolean47 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay45);
        int[] intArray48 = monthDay45.getValues();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay45.plus(readablePeriod49);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 2]");
        org.junit.Assert.assertNotNull(monthDay50);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumShortTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property17 = monthDay16.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay20 = monthDay16.withFieldAdded(durationFieldType18, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValue();
        java.lang.String str16 = property14.getAsText();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsShortText(locale17);
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay20.plus(readablePeriod25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.MonthDay monthDay40 = property37.addWrapFieldToCopy((int) (short) 1);
        boolean boolean41 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay40);
        org.joda.time.MonthDay monthDay43 = monthDay40.minusMonths((int) (byte) 100);
        int int44 = monthDay43.getMonthOfYear();
        org.joda.time.MonthDay monthDay46 = monthDay43.withMonthOfYear(1);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay48 = monthDay43.plus(readablePeriod47);
        int int49 = property14.compareTo((org.joda.time.ReadablePartial) monthDay48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        int int61 = property60.get();
        org.joda.time.MonthDay monthDay63 = property60.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = monthDay69.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property74 = monthDay67.property(dateTimeFieldType73);
        int int75 = property74.get();
        org.joda.time.DurationField durationField76 = property74.getDurationField();
        java.util.Locale locale77 = null;
        int int78 = property74.getMaximumTextLength(locale77);
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.MonthDay monthDay82 = monthDay80.withChronologyRetainFields(chronology81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = monthDay80.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property85 = monthDay80.dayOfMonth();
        org.joda.time.Chronology chronology86 = monthDay80.getChronology();
        org.joda.time.Chronology chronology87 = monthDay80.getChronology();
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = monthDay80.toDateTime(readableInstant88);
        int int90 = property74.compareTo((org.joda.time.ReadableInstant) dateTime89);
        int int91 = property60.compareTo((org.joda.time.ReadableInstant) dateTime89);
        int int92 = property14.compareTo((org.joda.time.ReadableInstant) dateTime89);
        int int93 = property14.getMaximumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 31 + "'", int93 == 31);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = monthDay17.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property22 = monthDay17.dayOfMonth();
        org.joda.time.Chronology chronology23 = monthDay17.getChronology();
        org.joda.time.Chronology chronology24 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.now(chronology24);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.now(chronology24);
        boolean boolean27 = property10.equals((java.lang.Object) monthDay26);
        int[] intArray28 = monthDay26.getValues();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[11, 25]");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addToCopy((int) (short) -1);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay25.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property30 = monthDay23.property(dateTimeFieldType29);
        int int31 = property30.get();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        boolean boolean44 = property30.equals((java.lang.Object) monthDay36);
        org.joda.time.MonthDay monthDay45 = new org.joda.time.MonthDay((java.lang.Object) monthDay36);
        boolean boolean46 = property10.equals((java.lang.Object) monthDay45);
        int int47 = property10.getMinimumValue();
        java.lang.String str48 = property10.getAsText();
        java.lang.String str49 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay16.dayOfMonth();
        org.joda.time.Chronology chronology22 = monthDay16.getChronology();
        org.joda.time.Chronology chronology23 = monthDay16.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = monthDay16.toDateTime(readableInstant24);
        int int26 = property10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MonthDay monthDay28 = property10.addWrapFieldToCopy((int) '4');
        org.joda.time.MonthDay monthDay29 = property10.getMonthDay();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property10.getAsShortText(locale30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = monthDay2.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property7 = monthDay2.dayOfMonth();
        org.joda.time.Chronology chronology8 = monthDay2.getChronology();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.now(chronology8);
        org.joda.time.MonthDay monthDay10 = new org.joda.time.MonthDay(0L, chronology8);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        org.joda.time.DurationField durationField23 = property21.getDurationField();
        org.joda.time.MonthDay monthDay25 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay25.withChronologyRetainFields(chronology26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = monthDay29.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property34 = monthDay27.property(dateTimeFieldType33);
        boolean boolean35 = property21.equals((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay36 = new org.joda.time.MonthDay((java.lang.Object) monthDay27);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay41 = monthDay38.withPeriodAdded(readablePeriod39, 1);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        int int48 = monthDay41.indexOf(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay41.withChronologyRetainFields(chronology49);
        boolean boolean51 = monthDay36.isBefore((org.joda.time.ReadablePartial) monthDay50);
        int int52 = monthDay10.compareTo((org.joda.time.ReadablePartial) monthDay50);
        org.joda.time.MonthDay monthDay54 = monthDay10.withDayOfMonth(1);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.MonthDay monthDay56 = monthDay10.minus(readablePeriod55);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(monthDay56);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        java.lang.String str15 = property10.getName();
        int int16 = property10.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay17 = property10.setCopy("--09-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = monthDay16.indexOf(dateTimeFieldType30);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        org.joda.time.MonthDay monthDay46 = property43.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.MonthDay monthDay52 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MonthDay monthDay54 = monthDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = monthDay52.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property57 = monthDay50.property(dateTimeFieldType56);
        int int58 = property57.get();
        org.joda.time.DurationField durationField59 = property57.getDurationField();
        java.util.Locale locale60 = null;
        int int61 = property57.getMaximumTextLength(locale60);
        org.joda.time.MonthDay monthDay63 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MonthDay monthDay65 = monthDay63.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = monthDay63.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property68 = monthDay63.dayOfMonth();
        org.joda.time.Chronology chronology69 = monthDay63.getChronology();
        org.joda.time.Chronology chronology70 = monthDay63.getChronology();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = monthDay63.toDateTime(readableInstant71);
        int int73 = property57.compareTo((org.joda.time.ReadableInstant) dateTime72);
        int int74 = property43.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = monthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        int int76 = property10.compareTo((org.joda.time.ReadableInstant) dateTime72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay78 = property10.setCopy("--09-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-01\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(monthDay63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay1.getFieldType(0);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay26.plus(readablePeriod31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay35 = monthDay26.withPeriodAdded(readablePeriod33, 9);
        org.joda.time.DateTimeField dateTimeField37 = monthDay35.getField(1);
        boolean boolean38 = monthDay1.isEqual((org.joda.time.ReadablePartial) monthDay35);
        java.lang.String str40 = monthDay1.toString("1");
        int int41 = monthDay1.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay43 = monthDay1.withDayOfMonth((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay.Property property25 = monthDay16.dayOfMonth();
        org.joda.time.MonthDay.Property property26 = monthDay16.monthOfYear();
        org.joda.time.MonthDay monthDay28 = property26.addToCopy(4);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(dateTimeZone29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = monthDay30.getFields();
        int int32 = property26.compareTo((org.joda.time.ReadablePartial) monthDay30);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay1.minus(readablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay29.withMonthOfYear(12);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.plus(readablePeriod32);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        java.util.Locale locale25 = null;
        int int26 = property24.getMaximumTextLength(locale25);
        org.joda.time.MonthDay monthDay28 = property24.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.minus(readablePeriod29);
        boolean boolean31 = property11.equals((java.lang.Object) monthDay30);
        int int32 = monthDay30.getDayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology14 = monthDay3.getChronology();
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay((java.lang.Object) monthDay3);
        org.joda.time.MonthDay monthDay17 = monthDay3.plusDays(0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(monthDay17);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.MonthDay monthDay20 = monthDay1.withPeriodAdded(readablePeriod18, (int) (byte) -1);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay22.plus(readablePeriod27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = monthDay34.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property39 = monthDay32.property(dateTimeFieldType38);
        int int40 = property39.get();
        org.joda.time.MonthDay monthDay42 = property39.addWrapFieldToCopy((int) (short) 1);
        boolean boolean43 = monthDay22.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.MonthDay monthDay45 = monthDay42.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay49.property(dateTimeFieldType55);
        org.joda.time.MonthDay.Property property57 = monthDay49.monthOfYear();
        int int58 = monthDay49.getDayOfMonth();
        org.joda.time.MonthDay.Property property59 = monthDay49.dayOfMonth();
        int int60 = monthDay49.getDayOfMonth();
        org.joda.time.MonthDay monthDay62 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MonthDay monthDay64 = monthDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = monthDay62.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property67 = monthDay62.dayOfMonth();
        org.joda.time.Chronology chronology68 = monthDay62.getChronology();
        org.joda.time.MonthDay monthDay69 = monthDay49.withChronologyRetainFields(chronology68);
        org.joda.time.MonthDay monthDay70 = new org.joda.time.MonthDay(chronology68);
        boolean boolean71 = monthDay45.isAfter((org.joda.time.ReadablePartial) monthDay70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay73.dayOfMonth();
        org.joda.time.MonthDay monthDay80 = property78.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay82 = property78.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay84 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.MonthDay monthDay86 = monthDay84.withChronologyRetainFields(chronology85);
        org.joda.time.MonthDay monthDay88 = monthDay84.minusMonths((int) (byte) -1);
        boolean boolean89 = property78.equals((java.lang.Object) monthDay88);
        int int90 = property78.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property78.getFieldType();
        org.joda.time.MonthDay monthDay93 = monthDay45.withField(dateTimeFieldType91, 11);
        boolean boolean94 = monthDay20.isBefore((org.joda.time.ReadablePartial) monthDay93);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(monthDay86);
        org.junit.Assert.assertNotNull(monthDay88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 31 + "'", int90 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(monthDay93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay2.withChronologyRetainFields(chronology3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property11 = monthDay6.dayOfMonth();
        org.joda.time.Chronology chronology12 = monthDay6.getChronology();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.now(chronology12);
        org.joda.time.MonthDay monthDay14 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = new org.joda.time.MonthDay(10L, chronology12);
        org.joda.time.MonthDay monthDay17 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MonthDay monthDay19 = monthDay17.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property26 = monthDay19.property(dateTimeFieldType25);
        int int27 = property26.get();
        org.joda.time.MonthDay monthDay29 = property26.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property30 = monthDay29.dayOfMonth();
        int int31 = property30.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay33 = property30.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property30.getFieldType();
        org.joda.time.MonthDay monthDay36 = monthDay15.withField(dateTimeFieldType34, (int) (short) 10);
        org.joda.time.MonthDay monthDay38 = new org.joda.time.MonthDay((long) 10);
        org.joda.time.MonthDay monthDay40 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay43 = monthDay40.withPeriodAdded(readablePeriod41, 1);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay40.plus(readablePeriod44);
        int int46 = monthDay38.compareTo((org.joda.time.ReadablePartial) monthDay45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay49 = monthDay45.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property56 = monthDay51.dayOfMonth();
        org.joda.time.Chronology chronology57 = monthDay51.getChronology();
        org.joda.time.Chronology chronology58 = monthDay51.getChronology();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = monthDay51.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = monthDay49.toDateTime(readableInstant59);
        int int62 = monthDay49.getDayOfMonth();
        boolean boolean63 = monthDay15.isBefore((org.joda.time.ReadablePartial) monthDay49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType65 = monthDay49.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        java.lang.String str12 = property10.toString();
        org.joda.time.MonthDay monthDay14 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property10.getFieldType();
        int int16 = property10.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = monthDay20.getFieldType((int) (byte) 1);
        boolean boolean25 = monthDay18.isSupported(dateTimeFieldType24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay29 = monthDay27.minusDays((int) '#');
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay31.dayOfMonth();
        org.joda.time.Chronology chronology37 = monthDay31.getChronology();
        org.joda.time.Chronology chronology38 = monthDay31.getChronology();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = monthDay31.toDateTime(readableInstant39);
        org.joda.time.MonthDay monthDay42 = monthDay31.plusMonths((int) ' ');
        boolean boolean43 = monthDay27.isAfter((org.joda.time.ReadablePartial) monthDay42);
        boolean boolean44 = monthDay18.isBefore((org.joda.time.ReadablePartial) monthDay42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay46 = monthDay18.minus(readablePeriod45);
        org.joda.time.MonthDay monthDay48 = monthDay46.withMonthOfYear(12);
        int int49 = property10.compareTo((org.joda.time.ReadablePartial) monthDay46);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfMonth]" + "'", str12, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay14.plus(readablePeriod19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = monthDay26.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property31 = monthDay24.property(dateTimeFieldType30);
        int int32 = property31.get();
        org.joda.time.MonthDay monthDay34 = property31.addWrapFieldToCopy((int) (short) 1);
        boolean boolean35 = monthDay14.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.MonthDay monthDay37 = monthDay34.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay39 = monthDay37.plusMonths(1);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        boolean boolean48 = monthDay41.isSupported(dateTimeFieldType47);
        boolean boolean49 = monthDay37.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology50 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay((long) 8, chronology50);
        org.joda.time.MonthDay monthDay52 = monthDay3.withChronologyRetainFields(chronology50);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(monthDay52);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        boolean boolean8 = monthDay1.isSupported(dateTimeFieldType7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay12 = monthDay10.minusDays((int) '#');
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay14.dayOfMonth();
        org.joda.time.Chronology chronology20 = monthDay14.getChronology();
        org.joda.time.Chronology chronology21 = monthDay14.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = monthDay14.toDateTime(readableInstant22);
        org.joda.time.MonthDay monthDay25 = monthDay14.plusMonths((int) ' ');
        boolean boolean26 = monthDay10.isAfter((org.joda.time.ReadablePartial) monthDay25);
        boolean boolean27 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay25);
        int int28 = monthDay1.size();
        org.joda.time.DateTimeField dateTimeField30 = monthDay1.getField(0);
        org.joda.time.MonthDay.Property property31 = monthDay1.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str14 = property10.getAsString();
        java.lang.String str15 = property10.getAsText();
        org.joda.time.DurationField durationField16 = property10.getRangeDurationField();
        int int17 = property10.getMinimumValue();
        org.joda.time.MonthDay monthDay19 = property10.addWrapFieldToCopy((int) '4');
        int int20 = property10.getMaximumValueOverall();
        int int21 = property10.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property10.getFieldType();
        org.joda.time.MonthDay monthDay24 = property10.setCopy(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay26 = property10.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(monthDay24);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay((java.lang.Object) monthDay16);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay16.minus(readablePeriod26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay16.plus(readablePeriod28);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay26 = monthDay24.plusMonths(1);
        int int27 = monthDay26.getDayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = monthDay26.getFields();
        java.lang.Class<?> wildcardClass29 = dateTimeFieldArray28.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        int int25 = property10.getMaximumValueOverall();
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay28 = property10.setCopy("--09-02", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"--09-02\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay1.withChronologyRetainFields(chronology23);
        org.joda.time.Chronology chronology25 = monthDay24.getChronology();
        org.joda.time.MonthDay monthDay26 = new org.joda.time.MonthDay(chronology25);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths((int) '#');
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.MonthDay monthDay37 = property35.addWrapFieldToCopy(1);
        int int38 = property35.getMaximumValue();
        int int39 = property35.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property35.getFieldType();
        int int41 = monthDay26.get(dateTimeFieldType40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = monthDay26.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 25 + "'", int41 == 25);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        java.lang.String str11 = property6.getName();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property6.getAsText(locale12);
        org.joda.time.MonthDay monthDay14 = property6.getMonthDay();
        int int15 = property6.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField16 = property6.getField();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfMonth" + "'", str11, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.joda.time.Chronology chronology18 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology18);
        int int20 = monthDay19.getMonthOfYear();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay19.property(dateTimeFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay29 = monthDay19.withDayOfMonth((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.MonthDay.Property property18 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay20 = property18.addWrapFieldToCopy((int) 'a');
        org.joda.time.MonthDay monthDay22 = new org.joda.time.MonthDay(10L);
        int[] intArray23 = monthDay22.getValues();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.plus(readablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay(dateTimeZone26);
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MonthDay monthDay31 = monthDay29.withChronologyRetainFields(chronology30);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay31.property(dateTimeFieldType37);
        int int39 = property38.get();
        int int40 = property38.getMaximumValue();
        org.joda.time.MonthDay monthDay42 = property38.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay44 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.MonthDay monthDay47 = monthDay44.withPeriodAdded(readablePeriod45, 1);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        int int54 = monthDay47.indexOf(dateTimeFieldType53);
        boolean boolean55 = monthDay42.isSupported(dateTimeFieldType53);
        int int56 = monthDay27.get(dateTimeFieldType53);
        org.joda.time.MonthDay monthDay58 = monthDay25.withField(dateTimeFieldType53, (int) (byte) 10);
        org.joda.time.MonthDay.Property property59 = monthDay20.property(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 25 + "'", int56 == 25);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = property10.addWrapFieldToCopy(1);
        int int13 = property10.getMinimumValue();
        org.joda.time.DurationField durationField14 = property10.getRangeDurationField();
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property33 = monthDay26.property(dateTimeFieldType32);
        int int34 = property33.get();
        org.joda.time.MonthDay monthDay36 = property33.addWrapFieldToCopy((int) (short) 1);
        boolean boolean37 = monthDay16.isBefore((org.joda.time.ReadablePartial) monthDay36);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = monthDay16.getFields();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay16.minus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.MonthDay monthDay43 = monthDay16.withPeriodAdded(readablePeriod41, (int) (byte) -1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay((long) (short) 100, chronology45);
        org.joda.time.MonthDay monthDay48 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MonthDay monthDay50 = monthDay48.withChronologyRetainFields(chronology49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = monthDay48.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property53 = monthDay48.dayOfMonth();
        org.joda.time.Chronology chronology54 = monthDay48.getChronology();
        org.joda.time.Chronology chronology55 = monthDay48.getChronology();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = monthDay48.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = monthDay46.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = monthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        int int60 = property10.compareTo((org.joda.time.ReadableInstant) dateTime58);
        int int61 = property10.getMinimumValue();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay48);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay15 = monthDay13.plusDays(2);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.minus(readablePeriod16);
        org.joda.time.Chronology chronology18 = monthDay17.getChronology();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology18);
        int int20 = monthDay19.getMonthOfYear();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay19.property(dateTimeFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType29 = monthDay19.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay7 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay7.withChronologyRetainFields(chronology8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = monthDay11.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property16 = monthDay9.property(dateTimeFieldType15);
        int int17 = monthDay1.indexOf(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MonthDay monthDay19 = new org.joda.time.MonthDay(dateTimeZone18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = monthDay19.getFields();
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 1);
        boolean boolean26 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay22);
        boolean boolean27 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay22);
        org.joda.time.MonthDay.Property property28 = monthDay22.dayOfMonth();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property28.getAsText(locale29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay32.dayOfMonth();
        org.joda.time.Chronology chronology38 = monthDay32.getChronology();
        org.joda.time.Chronology chronology39 = monthDay32.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = monthDay32.toDateTime(readableInstant40);
        org.joda.time.MonthDay monthDay43 = monthDay32.plusMonths((int) ' ');
        org.joda.time.MonthDay monthDay45 = monthDay43.minusMonths((int) (short) 10);
        boolean boolean46 = property28.equals((java.lang.Object) (short) 10);
        org.joda.time.MonthDay monthDay48 = property28.addWrapFieldToCopy((int) (short) 0);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(monthDay48);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.Chronology chronology14 = monthDay3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.minus(readablePeriod15);
        java.lang.String str17 = monthDay3.toString();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay19.plus(readablePeriod24);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.MonthDay monthDay31 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = monthDay31.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property36 = monthDay29.property(dateTimeFieldType35);
        int int37 = property36.get();
        org.joda.time.MonthDay monthDay39 = property36.addWrapFieldToCopy((int) (short) 1);
        boolean boolean40 = monthDay19.isBefore((org.joda.time.ReadablePartial) monthDay39);
        org.joda.time.MonthDay monthDay42 = monthDay39.minusMonths((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = monthDay42.toString(dateTimeFormatter43);
        org.joda.time.MonthDay monthDay46 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.MonthDay monthDay49 = monthDay46.withPeriodAdded(readablePeriod47, 1);
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = monthDay51.getFieldType((int) (byte) 1);
        int int56 = monthDay49.indexOf(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MonthDay monthDay58 = monthDay49.withChronologyRetainFields(chronology57);
        org.joda.time.MonthDay.Property property59 = monthDay58.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property59.getFieldType();
        org.joda.time.MonthDay monthDay62 = monthDay42.withField(dateTimeFieldType60, 2);
        org.joda.time.MonthDay monthDay64 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MonthDay monthDay66 = monthDay64.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = monthDay64.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.MonthDay monthDay70 = monthDay64.plus(readablePeriod69);
        org.joda.time.MonthDay monthDay72 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MonthDay monthDay74 = monthDay72.withChronologyRetainFields(chronology73);
        org.joda.time.MonthDay monthDay76 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay76.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = monthDay76.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property81 = monthDay74.property(dateTimeFieldType80);
        int int82 = property81.get();
        org.joda.time.MonthDay monthDay84 = property81.addWrapFieldToCopy((int) (short) 1);
        boolean boolean85 = monthDay64.isBefore((org.joda.time.ReadablePartial) monthDay84);
        org.joda.time.MonthDay monthDay87 = monthDay84.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay.Property property88 = monthDay87.monthOfYear();
        int int89 = property88.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property88.getFieldType();
        org.joda.time.MonthDay.Property property91 = monthDay62.property(dateTimeFieldType90);
        org.joda.time.MonthDay monthDay93 = monthDay3.withField(dateTimeFieldType90, (int) (byte) 10);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "--01-01" + "'", str17, "--01-01");
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "--09-02" + "'", str44, "--09-02");
        org.junit.Assert.assertNotNull(monthDay46);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertNotNull(monthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(monthDay87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 12 + "'", int89 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(monthDay93);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.MonthDay.Property property14 = monthDay13.dayOfMonth();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.MonthDay monthDay17 = property14.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay19.dayOfMonth();
        org.joda.time.Chronology chronology25 = monthDay19.getChronology();
        org.joda.time.Chronology chronology26 = monthDay19.getChronology();
        org.joda.time.MonthDay monthDay28 = monthDay19.plusMonths((int) ' ');
        int int29 = property14.compareTo((org.joda.time.ReadablePartial) monthDay28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay28.getFieldType((int) (byte) 0);
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay33.plus(readablePeriod38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.MonthDay monthDay45 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MonthDay monthDay47 = monthDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = monthDay45.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property50 = monthDay43.property(dateTimeFieldType49);
        int int51 = property50.get();
        org.joda.time.MonthDay monthDay53 = property50.addWrapFieldToCopy((int) (short) 1);
        boolean boolean54 = monthDay33.isBefore((org.joda.time.ReadablePartial) monthDay53);
        org.joda.time.DateTimeField[] dateTimeFieldArray55 = monthDay33.getFields();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay33.minus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.MonthDay monthDay60 = monthDay33.withPeriodAdded(readablePeriod58, (int) (byte) -1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MonthDay monthDay63 = new org.joda.time.MonthDay((long) (short) 100, chronology62);
        org.joda.time.MonthDay monthDay65 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MonthDay monthDay67 = monthDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = monthDay65.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property70 = monthDay65.dayOfMonth();
        org.joda.time.Chronology chronology71 = monthDay65.getChronology();
        org.joda.time.Chronology chronology72 = monthDay65.getChronology();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = monthDay65.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime75 = monthDay63.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime76 = monthDay33.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.MonthDay monthDay78 = monthDay33.minus(readablePeriod77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = monthDay33.toDateTime(readableInstant79);
        org.joda.time.MonthDay monthDay82 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MonthDay monthDay84 = monthDay82.withChronologyRetainFields(chronology83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = monthDay82.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property87 = monthDay82.dayOfMonth();
        java.util.Locale locale88 = null;
        java.lang.String str89 = property87.getAsText(locale88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property87.getFieldType();
        boolean boolean91 = monthDay33.isSupported(dateTimeFieldType90);
        boolean boolean92 = monthDay28.isSupported(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(monthDay78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(monthDay82);
        org.junit.Assert.assertNotNull(monthDay84);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1" + "'", str89, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = monthDay1.plusMonths((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = monthDay9.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.MonthDay monthDay23 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.withChronologyRetainFields(chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = monthDay23.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property28 = monthDay21.property(dateTimeFieldType27);
        int int29 = monthDay13.indexOf(dateTimeFieldType27);
        boolean boolean30 = monthDay3.equals((java.lang.Object) int29);
        org.joda.time.MonthDay monthDay32 = monthDay3.withMonthOfYear(9);
        int int34 = monthDay32.getValue((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = monthDay32.getFieldTypes();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay37.dayOfMonth();
        org.joda.time.Chronology chronology43 = monthDay37.getChronology();
        org.joda.time.Chronology chronology44 = monthDay37.getChronology();
        org.joda.time.MonthDay monthDay45 = monthDay32.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = monthDay45.minusDays((int) (short) 100);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        int int22 = property6.get();
        org.joda.time.DurationField durationField23 = property6.getDurationField();
        java.lang.String str24 = property6.getAsShortText();
        org.joda.time.MonthDay monthDay26 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MonthDay monthDay28 = monthDay26.withChronologyRetainFields(chronology27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay28.property(dateTimeFieldType34);
        org.joda.time.MonthDay.Property property36 = monthDay28.monthOfYear();
        java.util.Locale locale37 = null;
        int int38 = property36.getMaximumTextLength(locale37);
        int int39 = property36.getMaximumValue();
        org.joda.time.MonthDay monthDay41 = property36.addWrapFieldToCopy((int) '#');
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.minus(readablePeriod42);
        int int44 = property6.compareTo((org.joda.time.ReadablePartial) monthDay41);
        org.joda.time.MonthDay.Property property45 = monthDay41.monthOfYear();
        int int46 = property45.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property6.getFieldType();
        org.joda.time.DurationField durationField20 = property6.getDurationField();
        java.lang.String str21 = property6.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = monthDay1.minusMonths((int) (byte) -1);
        org.joda.time.MonthDay monthDay8 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MonthDay monthDay10 = monthDay8.withChronologyRetainFields(chronology9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = monthDay12.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property17 = monthDay12.dayOfMonth();
        org.joda.time.Chronology chronology18 = monthDay12.getChronology();
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.now(chronology18);
        org.joda.time.MonthDay monthDay20 = monthDay10.withChronologyRetainFields(chronology18);
        org.joda.time.MonthDay monthDay21 = new org.joda.time.MonthDay(10L, chronology18);
        org.joda.time.MonthDay monthDay23 = monthDay21.plusDays((int) (byte) 0);
        boolean boolean24 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay23);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long) (short) 1);
        org.joda.time.MonthDay monthDay3 = monthDay1.withDayOfMonth(1);
        org.joda.time.Chronology chronology4 = monthDay1.getChronology();
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        org.joda.time.MonthDay monthDay8 = property6.addWrapFieldToCopy(1);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy(0);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = monthDay12.minusMonths((int) (byte) -1);
        boolean boolean17 = property6.equals((java.lang.Object) monthDay16);
        int int18 = property6.get();
        org.joda.time.DurationField durationField19 = property6.getRangeDurationField();
        org.joda.time.MonthDay monthDay21 = property6.addWrapFieldToCopy((int) (byte) 1);
        java.lang.String str22 = property6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay24 = property6.setCopy("January");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"January\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[dayOfMonth]" + "'", str22, "Property[dayOfMonth]");
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        int int8 = monthDay7.getMonthOfYear();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = monthDay14.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property19 = monthDay12.property(dateTimeFieldType18);
        java.util.Locale locale20 = null;
        int int21 = property19.getMaximumTextLength(locale20);
        org.joda.time.MonthDay monthDay23 = property19.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.MonthDay monthDay25 = monthDay23.minus(readablePeriod24);
        boolean boolean26 = monthDay7.isAfter((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property37 = monthDay30.property(dateTimeFieldType36);
        int int38 = property37.get();
        org.joda.time.DurationField durationField39 = property37.getDurationField();
        java.util.Locale locale40 = null;
        int int41 = property37.getMaximumTextLength(locale40);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = monthDay43.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property48 = monthDay43.dayOfMonth();
        org.joda.time.Chronology chronology49 = monthDay43.getChronology();
        org.joda.time.Chronology chronology50 = monthDay43.getChronology();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = monthDay43.toDateTime(readableInstant51);
        int int53 = property37.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MonthDay monthDay55 = property37.addWrapFieldToCopy((int) '4');
        org.joda.time.Chronology chronology56 = monthDay55.getChronology();
        org.joda.time.MonthDay monthDay57 = org.joda.time.MonthDay.now(chronology56);
        boolean boolean58 = monthDay23.isEqual((org.joda.time.ReadablePartial) monthDay57);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.MonthDay monthDay14 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay14.withChronologyRetainFields(chronology15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = monthDay18.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property23 = monthDay16.property(dateTimeFieldType22);
        boolean boolean24 = property10.equals((java.lang.Object) monthDay16);
        java.util.Locale locale25 = null;
        java.lang.String str26 = property10.getAsShortText(locale25);
        java.lang.String str27 = property10.getAsShortText();
        java.lang.String str28 = property10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property10.getFieldType();
        java.util.Locale locale30 = null;
        int int31 = property10.getMaximumShortTextLength(locale30);
        org.joda.time.DurationField durationField32 = property10.getDurationField();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property10.getAsText(locale33);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfMonth]" + "'", str28, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MonthDay monthDay11 = monthDay9.withChronologyRetainFields(chronology10);
        org.joda.time.MonthDay monthDay13 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MonthDay monthDay15 = monthDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = monthDay13.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property18 = monthDay11.property(dateTimeFieldType17);
        int int19 = property18.get();
        org.joda.time.MonthDay monthDay21 = property18.addWrapFieldToCopy((int) (short) 1);
        boolean boolean22 = monthDay1.isBefore((org.joda.time.ReadablePartial) monthDay21);
        org.joda.time.MonthDay monthDay24 = monthDay21.minusMonths((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField26 = monthDay21.getField(1);
        org.joda.time.MonthDay monthDay28 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MonthDay monthDay30 = monthDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = monthDay28.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay28.plus(readablePeriod33);
        int int35 = monthDay34.getMonthOfYear();
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.MonthDay monthDay41 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MonthDay monthDay43 = monthDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = monthDay41.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property46 = monthDay39.property(dateTimeFieldType45);
        java.util.Locale locale47 = null;
        int int48 = property46.getMaximumTextLength(locale47);
        org.joda.time.MonthDay monthDay50 = property46.addWrapFieldToCopy((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.MonthDay monthDay52 = monthDay50.minus(readablePeriod51);
        boolean boolean53 = monthDay34.isAfter((org.joda.time.ReadablePartial) monthDay50);
        boolean boolean54 = monthDay21.isBefore((org.joda.time.ReadablePartial) monthDay34);
        org.joda.time.Chronology chronology55 = monthDay34.getChronology();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(monthDay50);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay1.plus(readablePeriod6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = monthDay7.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        int int20 = monthDay4.get(dateTimeFieldType19);
        org.joda.time.MonthDay monthDay22 = monthDay4.plusDays(0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay4.minus(readablePeriod23);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = monthDay4.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = monthDay4.getFields();
        org.joda.time.MonthDay monthDay28 = monthDay4.plusMonths((int) 'a');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(monthDay28);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        int int12 = monthDay3.getDayOfMonth();
        org.joda.time.MonthDay.Property property13 = monthDay3.dayOfMonth();
        int int14 = monthDay3.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.MonthDay monthDay16 = monthDay3.plus(readablePeriod15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        int int29 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay.Property property30 = monthDay20.dayOfMonth();
        int int31 = monthDay20.getDayOfMonth();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.MonthDay monthDay40 = monthDay20.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay41 = monthDay16.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay43 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MonthDay monthDay45 = monthDay43.withChronologyRetainFields(chronology44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property52 = monthDay45.property(dateTimeFieldType51);
        org.joda.time.MonthDay.Property property53 = monthDay45.monthOfYear();
        int int54 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay.Property property55 = monthDay45.dayOfMonth();
        int int56 = monthDay45.getDayOfMonth();
        org.joda.time.MonthDay monthDay58 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MonthDay monthDay60 = monthDay58.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = monthDay58.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property63 = monthDay58.dayOfMonth();
        org.joda.time.Chronology chronology64 = monthDay58.getChronology();
        org.joda.time.MonthDay monthDay65 = monthDay45.withChronologyRetainFields(chronology64);
        org.joda.time.MonthDay monthDay66 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology64);
        org.joda.time.MonthDay monthDay69 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MonthDay monthDay71 = monthDay69.withChronologyRetainFields(chronology70);
        org.joda.time.MonthDay monthDay73 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MonthDay monthDay75 = monthDay73.withChronologyRetainFields(chronology74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = monthDay73.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property78 = monthDay73.dayOfMonth();
        org.joda.time.Chronology chronology79 = monthDay73.getChronology();
        org.joda.time.MonthDay monthDay80 = org.joda.time.MonthDay.now(chronology79);
        org.joda.time.MonthDay monthDay81 = monthDay71.withChronologyRetainFields(chronology79);
        org.joda.time.MonthDay monthDay82 = new org.joda.time.MonthDay(10L, chronology79);
        org.joda.time.MonthDay monthDay83 = new org.joda.time.MonthDay((java.lang.Object) monthDay16, chronology79);
        java.util.Locale locale85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = monthDay16.toString("", locale85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay41);
        org.junit.Assert.assertNotNull(monthDay43);
        org.junit.Assert.assertNotNull(monthDay45);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(monthDay58);
        org.junit.Assert.assertNotNull(monthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay69);
        org.junit.Assert.assertNotNull(monthDay71);
        org.junit.Assert.assertNotNull(monthDay73);
        org.junit.Assert.assertNotNull(monthDay75);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(monthDay81);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        int int12 = property10.getMaximumValue();
        org.joda.time.MonthDay monthDay14 = property10.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay16.plus(readablePeriod21);
        int int23 = monthDay16.getDayOfMonth();
        int int24 = property10.compareTo((org.joda.time.ReadablePartial) monthDay16);
        org.joda.time.DurationField durationField25 = property10.getDurationField();
        org.joda.time.MonthDay monthDay27 = property10.addToCopy((int) '#');
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay31 = monthDay29.minusDays((int) '#');
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = monthDay33.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property38 = monthDay33.dayOfMonth();
        org.joda.time.Chronology chronology39 = monthDay33.getChronology();
        org.joda.time.Chronology chronology40 = monthDay33.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = monthDay33.toDateTime(readableInstant41);
        org.joda.time.MonthDay monthDay44 = monthDay33.plusMonths((int) ' ');
        boolean boolean45 = monthDay29.isAfter((org.joda.time.ReadablePartial) monthDay44);
        org.joda.time.MonthDay monthDay47 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MonthDay monthDay49 = monthDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = monthDay47.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay47.plus(readablePeriod52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.MonthDay monthDay59 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MonthDay monthDay61 = monthDay59.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = monthDay59.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property64 = monthDay57.property(dateTimeFieldType63);
        int int65 = property64.get();
        org.joda.time.MonthDay monthDay67 = property64.addWrapFieldToCopy((int) (short) 1);
        boolean boolean68 = monthDay47.isBefore((org.joda.time.ReadablePartial) monthDay67);
        org.joda.time.MonthDay monthDay70 = monthDay67.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay72 = monthDay70.plusMonths(1);
        int int73 = monthDay44.compareTo((org.joda.time.ReadablePartial) monthDay70);
        java.lang.String str74 = monthDay70.toString();
        boolean boolean75 = monthDay27.equals((java.lang.Object) str74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.MonthDay monthDay78 = monthDay27.withPeriodAdded(readablePeriod76, (int) '#');
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(monthDay59);
        org.junit.Assert.assertNotNull(monthDay61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(monthDay70);
        org.junit.Assert.assertNotNull(monthDay72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "--09-02" + "'", str74, "--09-02");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(monthDay78);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMinimumValue();
        java.util.Locale locale15 = null;
        org.joda.time.MonthDay monthDay16 = property11.setCopy("2", locale15);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay20.property(dateTimeFieldType26);
        org.joda.time.MonthDay.Property property28 = monthDay20.monthOfYear();
        org.joda.time.DurationField durationField29 = property28.getRangeDurationField();
        org.joda.time.MonthDay monthDay31 = property28.setCopy("1");
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property28.getFieldType();
        org.joda.time.MonthDay.Property property33 = monthDay16.property(dateTimeFieldType32);
        org.joda.time.MonthDay.Property property34 = monthDay16.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay16.plus(readablePeriod35);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = monthDay36.getFields();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Jan" + "'", str12, "Jan");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.MonthDay monthDay4 = monthDay1.withPeriodAdded(readablePeriod2, 1);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = monthDay6.getFieldType((int) (byte) 1);
        int int11 = monthDay4.indexOf(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay4.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay15.dayOfMonth();
        org.joda.time.Chronology chronology21 = monthDay15.getChronology();
        org.joda.time.Chronology chronology22 = monthDay15.getChronology();
        boolean boolean23 = monthDay4.isEqual((org.joda.time.ReadablePartial) monthDay15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = monthDay15.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MonthDay monthDay27 = monthDay15.withChronologyRetainFields(chronology26);
        int int28 = monthDay15.getDayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        java.lang.Class<?> wildcardClass31 = dateTimeFieldType30.getClass();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--01-01" + "'", str25, "--01-01");
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MonthDay monthDay5 = monthDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = monthDay3.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.MonthDay monthDay9 = monthDay3.plus(readablePeriod8);
        org.joda.time.MonthDay monthDay11 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MonthDay monthDay13 = monthDay11.withChronologyRetainFields(chronology12);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = monthDay15.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property20 = monthDay13.property(dateTimeFieldType19);
        int int21 = property20.get();
        org.joda.time.MonthDay monthDay23 = property20.addWrapFieldToCopy((int) (short) 1);
        boolean boolean24 = monthDay3.isBefore((org.joda.time.ReadablePartial) monthDay23);
        org.joda.time.MonthDay monthDay26 = monthDay23.minusMonths((int) (byte) 100);
        org.joda.time.MonthDay monthDay28 = monthDay26.plusMonths(1);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay32 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MonthDay monthDay34 = monthDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = monthDay32.getFieldType((int) (byte) 1);
        boolean boolean37 = monthDay30.isSupported(dateTimeFieldType36);
        boolean boolean38 = monthDay26.isSupported(dateTimeFieldType36);
        int int39 = monthDay1.compareTo((org.joda.time.ReadablePartial) monthDay26);
        org.joda.time.MonthDay monthDay40 = new org.joda.time.MonthDay((java.lang.Object) monthDay26);
        org.joda.time.MonthDay.Property property41 = monthDay40.dayOfMonth();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(monthDay28);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = monthDay1.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property6 = monthDay1.dayOfMonth();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property6.getAsShortText(locale7);
        org.joda.time.MonthDay monthDay10 = property6.addWrapFieldToCopy((-1));
        java.util.Locale locale11 = null;
        java.lang.String str12 = property6.getAsText(locale11);
        org.joda.time.MonthDay monthDay14 = property6.addWrapFieldToCopy(12);
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(monthDay14);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.MonthDay monthDay3 = monthDay1.minusDays((int) '#');
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.Chronology chronology12 = monthDay5.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = monthDay5.toDateTime(readableInstant13);
        org.joda.time.MonthDay monthDay16 = monthDay5.plusMonths((int) ' ');
        boolean boolean17 = monthDay1.isAfter((org.joda.time.ReadablePartial) monthDay16);
        int[] intArray18 = monthDay1.getValues();
        org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MonthDay monthDay22 = monthDay20.withChronologyRetainFields(chronology21);
        org.joda.time.MonthDay monthDay24 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MonthDay monthDay26 = monthDay24.withChronologyRetainFields(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = monthDay24.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property29 = monthDay22.property(dateTimeFieldType28);
        int int30 = property29.get();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        org.joda.time.MonthDay monthDay33 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MonthDay monthDay35 = monthDay33.withChronologyRetainFields(chronology34);
        org.joda.time.MonthDay monthDay37 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MonthDay monthDay39 = monthDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = monthDay37.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property42 = monthDay35.property(dateTimeFieldType41);
        boolean boolean43 = property29.equals((java.lang.Object) monthDay35);
        boolean boolean44 = monthDay1.equals((java.lang.Object) monthDay35);
        int[] intArray45 = monthDay35.getValues();
        int int46 = monthDay35.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 1]");
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(monthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay35);
        org.junit.Assert.assertNotNull(monthDay37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay5.dayOfMonth();
        org.joda.time.Chronology chronology11 = monthDay5.getChronology();
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.now(chronology11);
        org.joda.time.MonthDay monthDay13 = monthDay3.withChronologyRetainFields(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = monthDay3.toString(dateTimeFormatter14);
        org.joda.time.MonthDay monthDay18 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MonthDay monthDay20 = monthDay18.withChronologyRetainFields(chronology19);
        org.joda.time.MonthDay monthDay22 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MonthDay monthDay24 = monthDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = monthDay22.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property27 = monthDay22.dayOfMonth();
        org.joda.time.Chronology chronology28 = monthDay22.getChronology();
        org.joda.time.MonthDay monthDay29 = org.joda.time.MonthDay.now(chronology28);
        org.joda.time.MonthDay monthDay30 = monthDay20.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay20.minus(readablePeriod31);
        org.joda.time.MonthDay monthDay34 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MonthDay monthDay36 = monthDay34.withChronologyRetainFields(chronology35);
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = monthDay38.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property43 = monthDay36.property(dateTimeFieldType42);
        int int44 = property43.get();
        int int45 = property43.getMaximumValue();
        org.joda.time.MonthDay monthDay47 = property43.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay49 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MonthDay monthDay51 = monthDay49.withChronologyRetainFields(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = monthDay49.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.MonthDay monthDay55 = monthDay49.plus(readablePeriod54);
        int int56 = monthDay49.getDayOfMonth();
        int int57 = property43.compareTo((org.joda.time.ReadablePartial) monthDay49);
        boolean boolean58 = monthDay32.isBefore((org.joda.time.ReadablePartial) monthDay49);
        org.joda.time.Chronology chronology59 = monthDay49.getChronology();
        org.joda.time.MonthDay monthDay60 = new org.joda.time.MonthDay((long) 2, chronology59);
        org.joda.time.MonthDay monthDay62 = monthDay60.minusMonths((int) (byte) 1);
        org.joda.time.MonthDay monthDay64 = monthDay60.minusDays(3);
        boolean boolean65 = monthDay3.isAfter((org.joda.time.ReadablePartial) monthDay60);
        java.lang.String str67 = monthDay3.toString("--12-31");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--01-01" + "'", str15, "--01-01");
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(monthDay20);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 31 + "'", int45 == 31);
        org.junit.Assert.assertNotNull(monthDay47);
        org.junit.Assert.assertNotNull(monthDay49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(monthDay62);
        org.junit.Assert.assertNotNull(monthDay64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "--12-31" + "'", str67, "--12-31");
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        int int11 = property10.get();
        org.joda.time.MonthDay monthDay13 = property10.addToCopy((int) (short) 0);
        org.joda.time.MonthDay monthDay15 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MonthDay monthDay17 = monthDay15.withChronologyRetainFields(chronology16);
        org.joda.time.MonthDay monthDay19 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MonthDay monthDay21 = monthDay19.withChronologyRetainFields(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = monthDay19.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property24 = monthDay17.property(dateTimeFieldType23);
        int int25 = property24.get();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        java.util.Locale locale27 = null;
        int int28 = property24.getMaximumTextLength(locale27);
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MonthDay monthDay32 = monthDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = monthDay30.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property35 = monthDay30.dayOfMonth();
        org.joda.time.Chronology chronology36 = monthDay30.getChronology();
        org.joda.time.Chronology chronology37 = monthDay30.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = monthDay30.toDateTime(readableInstant38);
        int int40 = property24.compareTo((org.joda.time.ReadableInstant) dateTime39);
        int int41 = property10.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MonthDay monthDay42 = new org.joda.time.MonthDay((java.lang.Object) dateTime39);
        int int43 = monthDay42.getMonthOfYear();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(monthDay13);
        org.junit.Assert.assertNotNull(monthDay15);
        org.junit.Assert.assertNotNull(monthDay17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(monthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay monthDay12 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MonthDay monthDay14 = monthDay12.withChronologyRetainFields(chronology13);
        org.joda.time.MonthDay monthDay16 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MonthDay monthDay18 = monthDay16.withChronologyRetainFields(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = monthDay16.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property21 = monthDay14.property(dateTimeFieldType20);
        int int22 = property21.get();
        int int23 = property21.getMaximumValue();
        org.joda.time.MonthDay monthDay25 = property21.setCopy((int) (short) 1);
        org.joda.time.MonthDay monthDay27 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MonthDay monthDay29 = monthDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = monthDay27.getFieldType((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.MonthDay monthDay33 = monthDay27.plus(readablePeriod32);
        int int34 = monthDay27.getDayOfMonth();
        int int35 = property21.compareTo((org.joda.time.ReadablePartial) monthDay27);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = monthDay27.getFields();
        org.joda.time.MonthDay monthDay38 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MonthDay monthDay40 = monthDay38.withChronologyRetainFields(chronology39);
        org.joda.time.MonthDay monthDay42 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MonthDay monthDay44 = monthDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = monthDay42.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property47 = monthDay40.property(dateTimeFieldType46);
        int int48 = property47.get();
        org.joda.time.DurationField durationField49 = property47.getDurationField();
        org.joda.time.MonthDay monthDay51 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MonthDay monthDay53 = monthDay51.withChronologyRetainFields(chronology52);
        org.joda.time.MonthDay monthDay55 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MonthDay monthDay57 = monthDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = monthDay55.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property60 = monthDay53.property(dateTimeFieldType59);
        boolean boolean61 = property47.equals((java.lang.Object) monthDay53);
        int int62 = property47.getMinimumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property47.getFieldType();
        org.joda.time.MonthDay monthDay65 = monthDay27.withField(dateTimeFieldType63, (int) (short) 10);
        org.joda.time.MonthDay monthDay67 = monthDay27.minusDays((-1));
        boolean boolean68 = monthDay3.isAfter((org.joda.time.ReadablePartial) monthDay27);
        java.lang.String str70 = monthDay3.toString("--09-10");
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(monthDay14);
        org.junit.Assert.assertNotNull(monthDay16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(monthDay38);
        org.junit.Assert.assertNotNull(monthDay40);
        org.junit.Assert.assertNotNull(monthDay42);
        org.junit.Assert.assertNotNull(monthDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertNotNull(monthDay55);
        org.junit.Assert.assertNotNull(monthDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(monthDay65);
        org.junit.Assert.assertNotNull(monthDay67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "--09-10" + "'", str70, "--09-10");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.joda.time.MonthDay monthDay1 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MonthDay monthDay3 = monthDay1.withChronologyRetainFields(chronology2);
        org.joda.time.MonthDay monthDay5 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MonthDay monthDay7 = monthDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = monthDay5.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property10 = monthDay3.property(dateTimeFieldType9);
        org.joda.time.MonthDay.Property property11 = monthDay3.monthOfYear();
        java.util.Locale locale12 = null;
        int int13 = property11.getMaximumTextLength(locale12);
        int int14 = property11.getMaximumValue();
        java.lang.String str15 = property11.getAsShortText();
        org.joda.time.DurationField durationField16 = property11.getDurationField();
        java.lang.String str17 = property11.getAsString();
        java.lang.String str18 = property11.getAsText();
        org.junit.Assert.assertNotNull(monthDay1);
        org.junit.Assert.assertNotNull(monthDay3);
        org.junit.Assert.assertNotNull(monthDay5);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "January" + "'", str18, "January");
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.MonthDay monthDay2 = monthDay0.plus(readablePeriod1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.MonthDay monthDay4 = monthDay0.minus(readablePeriod3);
        org.joda.time.MonthDay monthDay6 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MonthDay monthDay8 = monthDay6.withChronologyRetainFields(chronology7);
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MonthDay monthDay12 = monthDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = monthDay10.getFieldType((int) (byte) 1);
        org.joda.time.MonthDay.Property property15 = monthDay8.property(dateTimeFieldType14);
        org.joda.time.MonthDay.Property property16 = monthDay8.monthOfYear();
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        org.joda.time.MonthDay monthDay19 = property16.setCopy("1");
        org.joda.time.MonthDay monthDay21 = org.joda.time.MonthDay.parse("");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MonthDay monthDay23 = monthDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = monthDay21.getFieldType((int) (byte) 1);
        int int26 = monthDay19.indexOf(dateTimeFieldType25);
        org.joda.time.MonthDay.Property property27 = monthDay4.property(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay8);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(monthDay19);
        org.junit.Assert.assertNotNull(monthDay21);
        org.junit.Assert.assertNotNull(monthDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property27);
    }
}

